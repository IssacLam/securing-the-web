.TH "s2n/libcrypto-build/openssl/apps/s_cb.c" 3 "Thu Jun 30 2016" "s2n-openssl-doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n/libcrypto-build/openssl/apps/s_cb.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'apps\&.h'\fP
.br
\fC#include <openssl/err\&.h>\fP
.br
\fC#include <openssl/rand\&.h>\fP
.br
\fC#include <openssl/x509\&.h>\fP
.br
\fC#include <openssl/ssl\&.h>\fP
.br
\fC#include 's_apps\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBssl_excert_st\fP"
.br
.ti -1c
.RI "struct \fBchain_flags\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUSE_SOCKETS\fP"
.br
.ti -1c
.RI "#define \fBNON_MAIN\fP"
.br
.ti -1c
.RI "#define \fBCOOKIE_SECRET_LENGTH\fP   16"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBMS_CALLBACK\fP \fBverify_callback\fP (int ok, \fBX509_STORE_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "int \fBset_cert_stuff\fP (\fBSSL_CTX\fP *\fBctx\fP, char *cert_file, char *key_file)"
.br
.ti -1c
.RI "int \fBset_cert_key_stuff\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBX509\fP *cert, \fBEVP_PKEY\fP *\fBkey\fP, \fBSTACK_OF\fP(\fBX509\fP)*chain, int build_chain)"
.br
.ti -1c
.RI "int \fBssl_print_sigalgs\fP (\fBBIO\fP *\fBout\fP, \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBssl_print_point_formats\fP (\fBBIO\fP *\fBout\fP, \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBssl_print_curves\fP (\fBBIO\fP *\fBout\fP, \fBSSL\fP *s, int noshared)"
.br
.ti -1c
.RI "int \fBssl_print_tmp_key\fP (\fBBIO\fP *\fBout\fP, \fBSSL\fP *s)"
.br
.ti -1c
.RI "long \fBMS_CALLBACK\fP \fBbio_dump_callback\fP (\fBBIO\fP *bio, int cmd, const char *argp, int argi, long argl, long ret)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMS_CALLBACK\fP \fBapps_ssl_info_callback\fP (const \fBSSL\fP *s, int where, int ret)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMS_CALLBACK\fP \fBmsg_cb\fP (int write_p, int \fBversion\fP, int content_type, const \fBvoid\fP *buf, size_t \fBlen\fP, \fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMS_CALLBACK\fP \fBtlsext_cb\fP (\fBSSL\fP *s, int client_server, int \fBtype\fP, unsigned char *\fBdata\fP, int \fBlen\fP, \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "int \fBMS_CALLBACK\fP \fBgenerate_cookie_callback\fP (\fBSSL\fP *\fBssl\fP, unsigned char *cookie, unsigned int *cookie_len)"
.br
.ti -1c
.RI "int \fBMS_CALLBACK\fP \fBverify_cookie_callback\fP (\fBSSL\fP *\fBssl\fP, unsigned char *cookie, unsigned int cookie_len)"
.br
.ti -1c
.RI "\fBvoid\fP \fBssl_ctx_set_excert\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBSSL_EXCERT\fP *exc)"
.br
.ti -1c
.RI "\fBvoid\fP \fBssl_excert_free\fP (\fBSSL_EXCERT\fP *exc)"
.br
.ti -1c
.RI "int \fBload_excert\fP (\fBSSL_EXCERT\fP **pexc, \fBBIO\fP *err)"
.br
.ti -1c
.RI "int \fBargs_excert\fP (char ***pargs, int *pargc, int *badarg, \fBBIO\fP *err, \fBSSL_EXCERT\fP **pexc)"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint_ssl_summary\fP (\fBBIO\fP *bio, \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBargs_ssl\fP (char ***pargs, int *pargc, \fBSSL_CONF_CTX\fP *cctx, int *badarg, \fBBIO\fP *err, \fBSTACK_OF\fP(\fBOPENSSL_STRING\fP)**pstr)"
.br
.ti -1c
.RI "int \fBargs_ssl_call\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBBIO\fP *err, \fBSSL_CONF_CTX\fP *cctx, \fBSTACK_OF\fP(\fBOPENSSL_STRING\fP)*str, int no_ecdhe, int \fBno_jpake\fP)"
.br
.ti -1c
.RI "int \fBssl_ctx_add_crls\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBSTACK_OF\fP(\fBX509_CRL\fP)*crls, int crl_download)"
.br
.ti -1c
.RI "int \fBssl_load_stores\fP (\fBSSL_CTX\fP *\fBctx\fP, const char *vfyCApath, const char *vfyCAfile, const char *chCApath, const char *chCAfile, \fBSTACK_OF\fP(\fBX509_CRL\fP)*crls, int crl_download)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBverify_depth\fP = 0"
.br
.ti -1c
.RI "int \fBverify_quiet\fP = 0"
.br
.ti -1c
.RI "int \fBverify_error\fP = \fBX509_V_OK\fP"
.br
.ti -1c
.RI "int \fBverify_return_error\fP = 0"
.br
.ti -1c
.RI "unsigned char \fBcookie_secret\fP [\fBCOOKIE_SECRET_LENGTH\fP]"
.br
.ti -1c
.RI "int \fBcookie_initialized\fP = 0"
.br
.ti -1c
.RI "struct \fBchain_flags\fP \fBchain_flags_list\fP []"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define COOKIE_SECRET_LENGTH   16"

.PP
Definition at line 126 of file s_cb\&.c\&.
.SS "#define NON_MAIN"

.PP
Definition at line 116 of file s_cb\&.c\&.
.SS "#define USE_SOCKETS"

.PP
Definition at line 115 of file s_cb\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP \fBMS_CALLBACK\fP apps_ssl_info_callback (const \fBSSL\fP * s, int where, int ret)"

.PP
Definition at line 562 of file s_cb\&.c\&.
.SS "int args_excert (char *** pargs, int * pargc, int * badarg, \fBBIO\fP * err, \fBSSL_EXCERT\fP ** pexc)"

.PP
Definition at line 1362 of file s_cb\&.c\&.
.SS "int args_ssl (char *** pargs, int * pargc, \fBSSL_CONF_CTX\fP * cctx, int * badarg, \fBBIO\fP * err, \fBSTACK_OF\fP(\fBOPENSSL_STRING\fP)** pstr)"

.PP
Definition at line 1509 of file s_cb\&.c\&.
.SS "int args_ssl_call (\fBSSL_CTX\fP * ctx, \fBBIO\fP * err, \fBSSL_CONF_CTX\fP * cctx, \fBSTACK_OF\fP(\fBOPENSSL_STRING\fP)* str, int no_ecdhe, int no_jpake)"

.PP
Definition at line 1552 of file s_cb\&.c\&.
.SS "long \fBMS_CALLBACK\fP bio_dump_callback (\fBBIO\fP * bio, int cmd, const char * argp, int argi, long argl, long ret)"

.PP
Definition at line 540 of file s_cb\&.c\&.
.SS "int \fBMS_CALLBACK\fP generate_cookie_callback (\fBSSL\fP * ssl, unsigned char * cookie, unsigned int * cookie_len)"

.PP
Definition at line 1006 of file s_cb\&.c\&.
.SS "int load_excert (\fBSSL_EXCERT\fP ** pexc, \fBBIO\fP * err)"

.PP
Definition at line 1322 of file s_cb\&.c\&.
.SS "\fBvoid\fP \fBMS_CALLBACK\fP msg_cb (int write_p, int version, int content_type, const \fBvoid\fP * buf, size_t len, \fBSSL\fP * ssl, \fBvoid\fP * arg)"

.PP
Definition at line 595 of file s_cb\&.c\&.
.SS "\fBvoid\fP print_ssl_summary (\fBBIO\fP * bio, \fBSSL\fP * s)"

.PP
Definition at line 1472 of file s_cb\&.c\&.
.SS "int set_cert_key_stuff (\fBSSL_CTX\fP * ctx, \fBX509\fP * cert, \fBEVP_PKEY\fP * key, \fBSTACK_OF\fP(\fBX509\fP)* chain, int build_chain)"

.PP
Definition at line 254 of file s_cb\&.c\&.
.SS "int set_cert_stuff (\fBSSL_CTX\fP * ctx, char * cert_file, char * key_file)"

.PP
Definition at line 197 of file s_cb\&.c\&.
.SS "int ssl_ctx_add_crls (\fBSSL_CTX\fP * ctx, \fBSTACK_OF\fP(\fBX509_CRL\fP)* crls, int crl_download)"

.PP
Definition at line 1618 of file s_cb\&.c\&.
.SS "\fBvoid\fP ssl_ctx_set_excert (\fBSSL_CTX\fP * ctx, \fBSSL_EXCERT\fP * exc)"

.PP
Definition at line 1271 of file s_cb\&.c\&.
.SS "\fBvoid\fP ssl_excert_free (\fBSSL_EXCERT\fP * exc)"

.PP
Definition at line 1306 of file s_cb\&.c\&.
.SS "int ssl_load_stores (\fBSSL_CTX\fP * ctx, const char * vfyCApath, const char * vfyCAfile, const char * chCApath, const char * chCAfile, \fBSTACK_OF\fP(\fBX509_CRL\fP)* crls, int crl_download)"

.PP
Definition at line 1628 of file s_cb\&.c\&.
.SS "int ssl_print_curves (\fBBIO\fP * out, \fBSSL\fP * s, int noshared)"

.PP
Definition at line 452 of file s_cb\&.c\&.
.SS "int ssl_print_point_formats (\fBBIO\fP * out, \fBSSL\fP * s)"

.PP
Definition at line 416 of file s_cb\&.c\&.
.SS "int ssl_print_sigalgs (\fBBIO\fP * out, \fBSSL\fP * s)"

.PP
Definition at line 403 of file s_cb\&.c\&.
.SS "int ssl_print_tmp_key (\fBBIO\fP * out, \fBSSL\fP * s)"

.PP
Definition at line 507 of file s_cb\&.c\&.
.SS "\fBvoid\fP \fBMS_CALLBACK\fP tlsext_cb (\fBSSL\fP * s, int client_server, int type, unsigned char * data, int len, \fBvoid\fP * arg)"

.PP
Definition at line 895 of file s_cb\&.c\&.
.SS "static int \fBMS_CALLBACK\fP verify_callback (int ok, \fBX509_STORE_CTX\fP * ctx)"

.PP
Definition at line 135 of file s_cb\&.c\&.
.SS "int \fBMS_CALLBACK\fP verify_cookie_callback (\fBSSL\fP * ssl, unsigned char * cookie, unsigned int cookie_len)"

.PP
Definition at line 1084 of file s_cb\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "struct \fBchain_flags\fP chain_flags_list[]"
\fBInitial value:\fP
.PP
.nf
= {
    {CERT_PKEY_VALID, "Overall Validity"},
    {CERT_PKEY_SIGN, "Sign with EE key"},
    {CERT_PKEY_EE_SIGNATURE, "EE signature"},
    {CERT_PKEY_CA_SIGNATURE, "CA signature"},
    {CERT_PKEY_EE_PARAM, "EE key parameters"},
    {CERT_PKEY_CA_PARAM, "CA key parameters"},
    {CERT_PKEY_EXPLICIT_SIGN, "Explicity sign with EE key"},
    {CERT_PKEY_ISSUER_NAME, "Issuer Name"},
    {CERT_PKEY_CERT_TYPE, "Certificate Type"},
    {0, NULL}
}
.fi
.PP
Definition at line 1184 of file s_cb\&.c\&.
.SS "int cookie_initialized = 0"

.PP
Definition at line 133 of file s_cb\&.c\&.
.SS "unsigned char cookie_secret[\fBCOOKIE_SECRET_LENGTH\fP]"

.PP
Definition at line 132 of file s_cb\&.c\&.
.SS "int verify_depth = 0"

.PP
Definition at line 128 of file s_cb\&.c\&.
.SS "int verify_error = \fBX509_V_OK\fP"

.PP
Definition at line 130 of file s_cb\&.c\&.
.SS "int verify_quiet = 0"

.PP
Definition at line 129 of file s_cb\&.c\&.
.SS "int verify_return_error = 0"

.PP
Definition at line 131 of file s_cb\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-openssl-doxygen from the source code\&.
