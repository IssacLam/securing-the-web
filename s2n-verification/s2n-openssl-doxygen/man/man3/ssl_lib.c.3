.TH "s2n/libcrypto-build/openssl/ssl/ssl_lib.c" 3 "Thu Jun 30 2016" "s2n-openssl-doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n/libcrypto-build/openssl/ssl/ssl_lib.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include 'ssl_locl\&.h'\fP
.br
\fC#include 'kssl_lcl\&.h'\fP
.br
\fC#include <openssl/objects\&.h>\fP
.br
\fC#include <openssl/lhash\&.h>\fP
.br
\fC#include <openssl/x509v3\&.h>\fP
.br
\fC#include <openssl/rand\&.h>\fP
.br
\fC#include <openssl/ocsp\&.h>\fP
.br
\fC#include <openssl/dh\&.h>\fP
.br
\fC#include <openssl/engine\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBku_reject\fP(\fBx\fP,  \fBusage\fP)   (((\fBx\fP)\->ex_flags & \fBEXFLAG_KUSAGE\fP) && !((\fBx\fP)\->ex_kusage & (\fBusage\fP)))"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBSSL_clear\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_ssl_version\fP (\fBSSL_CTX\fP *\fBctx\fP, const \fBSSL_METHOD\fP *meth)"
.br
.ti -1c
.RI "\fBSSL\fP * \fBSSL_new\fP (\fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_session_id_context\fP (\fBSSL_CTX\fP *\fBctx\fP, const unsigned char *sid_ctx, unsigned int sid_ctx_len)"
.br
.ti -1c
.RI "int \fBSSL_set_session_id_context\fP (\fBSSL\fP *\fBssl\fP, const unsigned char *sid_ctx, unsigned int sid_ctx_len)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_generate_session_id\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBGEN_SESSION_CB\fP \fBcb\fP)"
.br
.ti -1c
.RI "int \fBSSL_set_generate_session_id\fP (\fBSSL\fP *\fBssl\fP, \fBGEN_SESSION_CB\fP \fBcb\fP)"
.br
.ti -1c
.RI "int \fBSSL_has_matching_session_id\fP (const \fBSSL\fP *\fBssl\fP, const unsigned char *id, unsigned int id_len)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_purpose\fP (\fBSSL_CTX\fP *s, int purpose)"
.br
.ti -1c
.RI "int \fBSSL_set_purpose\fP (\fBSSL\fP *s, int purpose)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_trust\fP (\fBSSL_CTX\fP *s, int trust)"
.br
.ti -1c
.RI "int \fBSSL_set_trust\fP (\fBSSL\fP *s, int trust)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set1_param\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBX509_VERIFY_PARAM\fP *vpm)"
.br
.ti -1c
.RI "int \fBSSL_set1_param\fP (\fBSSL\fP *\fBssl\fP, \fBX509_VERIFY_PARAM\fP *vpm)"
.br
.ti -1c
.RI "\fBX509_VERIFY_PARAM\fP * \fBSSL_CTX_get0_param\fP (\fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "\fBX509_VERIFY_PARAM\fP * \fBSSL_get0_param\fP (\fBSSL\fP *\fBssl\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_certs_clear\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_free\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_bio\fP (\fBSSL\fP *s, \fBBIO\fP *rbio, \fBBIO\fP *wbio)"
.br
.ti -1c
.RI "\fBBIO\fP * \fBSSL_get_rbio\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBBIO\fP * \fBSSL_get_wbio\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_get_fd\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_get_rfd\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_get_wfd\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_set_fd\fP (\fBSSL\fP *s, int fd)"
.br
.ti -1c
.RI "int \fBSSL_set_wfd\fP (\fBSSL\fP *s, int fd)"
.br
.ti -1c
.RI "int \fBSSL_set_rfd\fP (\fBSSL\fP *s, int fd)"
.br
.ti -1c
.RI "size_t \fBSSL_get_finished\fP (const \fBSSL\fP *s, \fBvoid\fP *buf, size_t count)"
.br
.ti -1c
.RI "size_t \fBSSL_get_peer_finished\fP (const \fBSSL\fP *s, \fBvoid\fP *buf, size_t count)"
.br
.ti -1c
.RI "int \fBSSL_get_verify_mode\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_get_verify_depth\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_CTX_get_verify_mode\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "int \fBSSL_CTX_get_verify_depth\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_verify\fP (\fBSSL\fP *s, int mode, int(*\fBcallback\fP)(int ok, \fBX509_STORE_CTX\fP *\fBctx\fP))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_verify_depth\fP (\fBSSL\fP *s, int depth)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_read_ahead\fP (\fBSSL\fP *s, int yes)"
.br
.ti -1c
.RI "int \fBSSL_get_read_ahead\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_pending\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBX509\fP * \fBSSL_get_peer_certificate\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBSTACK_OF\fP (\fBX509\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_copy_session_id\fP (\fBSSL\fP *\fBt\fP, const \fBSSL\fP *\fBf\fP)"
.br
.ti -1c
.RI "int \fBSSL_CTX_check_private_key\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "int \fBSSL_check_private_key\fP (const \fBSSL\fP *\fBssl\fP)"
.br
.ti -1c
.RI "int \fBSSL_accept\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_connect\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "long \fBSSL_get_default_timeout\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_read\fP (\fBSSL\fP *s, \fBvoid\fP *buf, int \fBnum\fP)"
.br
.ti -1c
.RI "int \fBSSL_peek\fP (\fBSSL\fP *s, \fBvoid\fP *buf, int \fBnum\fP)"
.br
.ti -1c
.RI "int \fBSSL_write\fP (\fBSSL\fP *s, const \fBvoid\fP *buf, int \fBnum\fP)"
.br
.ti -1c
.RI "int \fBSSL_shutdown\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_renegotiate\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_renegotiate_abbreviated\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_renegotiate_pending\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "long \fBSSL_ctrl\fP (\fBSSL\fP *s, int cmd, long larg, \fBvoid\fP *parg)"
.br
.ti -1c
.RI "long \fBSSL_callback_ctrl\fP (\fBSSL\fP *s, int cmd, \fBvoid\fP(*\fBfp\fP)(\fBvoid\fP))"
.br
.ti -1c
.RI "\fBLHASH_OF\fP (\fBSSL_SESSION\fP)"
.br
.ti -1c
.RI "long \fBSSL_CTX_ctrl\fP (\fBSSL_CTX\fP *\fBctx\fP, int cmd, long larg, \fBvoid\fP *parg)"
.br
.ti -1c
.RI "long \fBSSL_CTX_callback_ctrl\fP (\fBSSL_CTX\fP *\fBctx\fP, int cmd, \fBvoid\fP(*\fBfp\fP)(\fBvoid\fP))"
.br
.ti -1c
.RI "int \fBssl_cipher_id_cmp\fP (const \fBSSL_CIPHER\fP *\fBa\fP, const \fBSSL_CIPHER\fP *\fBb\fP)"
.br
.ti -1c
.RI "int \fBssl_cipher_ptr_id_cmp\fP (const \fBSSL_CIPHER\fP *const *ap, const \fBSSL_CIPHER\fP *const *\fBbp\fP)"
.br
.ti -1c
.RI "\fBSTACK_OF\fP (\fBSSL_CIPHER\fP)"
.br
.ti -1c
.RI "const char * \fBSSL_get_cipher_list\fP (const \fBSSL\fP *s, int n)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_cipher_list\fP (\fBSSL_CTX\fP *\fBctx\fP, const char *str)"
.br
.ti -1c
.RI "int \fBSSL_set_cipher_list\fP (\fBSSL\fP *s, const char *str)"
.br
.ti -1c
.RI "char * \fBSSL_get_shared_ciphers\fP (const \fBSSL\fP *s, char *buf, int \fBlen\fP)"
.br
.ti -1c
.RI "int \fBssl_cipher_list_to_bytes\fP (\fBSSL\fP *s, \fBSTACK_OF\fP(\fBSSL_CIPHER\fP)*sk, unsigned char *\fBp\fP, int(*put_cb)(const \fBSSL_CIPHER\fP *,                                                                                                                                                                       unsigned char *))"
.br
.ti -1c
.RI "const char * \fBSSL_get_servername\fP (const \fBSSL\fP *s, const int \fBtype\fP)"
.br
.ti -1c
.RI "int \fBSSL_get_servername_type\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_select_next_proto\fP (unsigned char **\fBout\fP, unsigned char *outlen, const unsigned char *server, unsigned int server_len, const unsigned char *client, unsigned int client_len)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_get0_next_proto_negotiated\fP (const \fBSSL\fP *s, const unsigned char **\fBdata\fP, unsigned *\fBlen\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_next_protos_advertised_cb\fP (\fBSSL_CTX\fP *\fBctx\fP, int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                               const unsigned char                                                                                                                                                                                                               **\fBout\fP,                                                                                                                                                                                                               unsigned int *outlen,                                                                                                                                                                                                               \fBvoid\fP *\fBarg\fP), \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_next_proto_select_cb\fP (\fBSSL_CTX\fP *\fBctx\fP, int(*\fBcb\fP)(\fBSSL\fP *s, unsigned char **\fBout\fP,                                                                                                                                                                                           unsigned char *outlen,                                                                                                                                                                                           const unsigned char *\fBin\fP,                                                                                                                                                                                           unsigned int inlen,                                                                                                                                                                                           \fBvoid\fP *\fBarg\fP), \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_alpn_protos\fP (\fBSSL_CTX\fP *\fBctx\fP, const unsigned char *protos, unsigned protos_len)"
.br
.ti -1c
.RI "int \fBSSL_set_alpn_protos\fP (\fBSSL\fP *\fBssl\fP, const unsigned char *protos, unsigned protos_len)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_alpn_select_cb\fP (\fBSSL_CTX\fP *\fBctx\fP, int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                   const unsigned char **\fBout\fP,                                                                                                                                                                   unsigned char *outlen,                                                                                                                                                                   const unsigned char *\fBin\fP,                                                                                                                                                                   unsigned int inlen,                                                                                                                                                                   \fBvoid\fP *\fBarg\fP), \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_get0_alpn_selected\fP (const \fBSSL\fP *\fBssl\fP, const unsigned char **\fBdata\fP, unsigned *\fBlen\fP)"
.br
.ti -1c
.RI "int \fBSSL_export_keying_material\fP (\fBSSL\fP *s, unsigned char *\fBout\fP, size_t olen, const char *label, size_t llen, const unsigned char *\fBp\fP, size_t plen, int use_context)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_free\fP (\fBSSL_CTX\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_default_passwd_cb\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBpem_password_cb\fP *\fBcb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_default_passwd_cb_userdata\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBvoid\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_cert_verify_callback\fP (\fBSSL_CTX\fP *\fBctx\fP, int(*\fBcb\fP)(\fBX509_STORE_CTX\fP *, \fBvoid\fP *), \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_verify\fP (\fBSSL_CTX\fP *\fBctx\fP, int mode, int(*\fBcb\fP)(int, \fBX509_STORE_CTX\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_verify_depth\fP (\fBSSL_CTX\fP *\fBctx\fP, int depth)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_cert_cb\fP (\fBSSL_CTX\fP *\fBc\fP, int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP), \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_cert_cb\fP (\fBSSL\fP *s, int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP), \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBssl_set_cert_masks\fP (\fBCERT\fP *\fBc\fP, const \fBSSL_CIPHER\fP *cipher)"
.br
.ti -1c
.RI "int \fBssl_check_srvr_ecc_cert_and_alg\fP (\fBX509\fP *\fBx\fP, \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBCERT_PKEY\fP * \fBssl_get_server_send_pkey\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBssl_get_sign_pkey\fP (\fBSSL\fP *s, const \fBSSL_CIPHER\fP *cipher, const \fBEVP_MD\fP **pmd)"
.br
.ti -1c
.RI "int \fBssl_get_server_cert_serverinfo\fP (\fBSSL\fP *s, const unsigned char **serverinfo, size_t *serverinfo_length)"
.br
.ti -1c
.RI "\fBvoid\fP \fBssl_update_cache\fP (\fBSSL\fP *s, int mode)"
.br
.ti -1c
.RI "const \fBSSL_METHOD\fP * \fBSSL_CTX_get_ssl_method\fP (\fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "const \fBSSL_METHOD\fP * \fBSSL_get_ssl_method\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_set_ssl_method\fP (\fBSSL\fP *s, const \fBSSL_METHOD\fP *meth)"
.br
.ti -1c
.RI "int \fBSSL_get_error\fP (const \fBSSL\fP *s, int i)"
.br
.ti -1c
.RI "int \fBSSL_do_handshake\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_accept_state\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_connect_state\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBssl_undefined_function\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBssl_undefined_void_function\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBssl_undefined_const_function\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBSSL_METHOD\fP * \fBssl_bad_method\fP (int ver)"
.br
.ti -1c
.RI "const char * \fBSSL_get_version\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBSSL\fP * \fBSSL_dup\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBssl_clear_cipher_ctx\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBX509\fP * \fBSSL_get_certificate\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBSSL_get_privatekey\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBX509\fP * \fBSSL_CTX_get0_certificate\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBSSL_CTX_get0_privatekey\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "const \fBSSL_CIPHER\fP * \fBSSL_get_current_cipher\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "const \fBCOMP_METHOD\fP * \fBSSL_get_current_compression\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "const \fBCOMP_METHOD\fP * \fBSSL_get_current_expansion\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBssl_init_wbio_buffer\fP (\fBSSL\fP *s, int push)"
.br
.ti -1c
.RI "\fBvoid\fP \fBssl_free_wbio_buffer\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_quiet_shutdown\fP (\fBSSL_CTX\fP *\fBctx\fP, int mode)"
.br
.ti -1c
.RI "int \fBSSL_CTX_get_quiet_shutdown\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_quiet_shutdown\fP (\fBSSL\fP *s, int mode)"
.br
.ti -1c
.RI "int \fBSSL_get_quiet_shutdown\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_shutdown\fP (\fBSSL\fP *s, int mode)"
.br
.ti -1c
.RI "int \fBSSL_get_shutdown\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_version\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBSSL_CTX\fP * \fBSSL_get_SSL_CTX\fP (const \fBSSL\fP *\fBssl\fP)"
.br
.ti -1c
.RI "\fBSSL_CTX\fP * \fBSSL_set_SSL_CTX\fP (\fBSSL\fP *\fBssl\fP, \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_default_verify_paths\fP (\fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "int \fBSSL_CTX_load_verify_locations\fP (\fBSSL_CTX\fP *\fBctx\fP, const char *CAfile, const char *CApath)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_info_callback\fP (\fBSSL\fP *\fBssl\fP, \fBvoid\fP(*\fBcb\fP)(const \fBSSL\fP *\fBssl\fP, int \fBtype\fP, int val))"
.br
.ti -1c
.RI "int \fBSSL_state\fP (const \fBSSL\fP *\fBssl\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_state\fP (\fBSSL\fP *\fBssl\fP, int state)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_verify_result\fP (\fBSSL\fP *\fBssl\fP, long \fBarg\fP)"
.br
.ti -1c
.RI "long \fBSSL_get_verify_result\fP (const \fBSSL\fP *\fBssl\fP)"
.br
.ti -1c
.RI "int \fBSSL_get_ex_new_index\fP (long argl, \fBvoid\fP *argp, \fBCRYPTO_EX_new\fP *new_func, \fBCRYPTO_EX_dup\fP *dup_func, \fBCRYPTO_EX_free\fP *\fBfree_func\fP)"
.br
.ti -1c
.RI "int \fBSSL_set_ex_data\fP (\fBSSL\fP *s, int idx, \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBSSL_get_ex_data\fP (const \fBSSL\fP *s, int idx)"
.br
.ti -1c
.RI "int \fBSSL_CTX_get_ex_new_index\fP (long argl, \fBvoid\fP *argp, \fBCRYPTO_EX_new\fP *new_func, \fBCRYPTO_EX_dup\fP *dup_func, \fBCRYPTO_EX_free\fP *\fBfree_func\fP)"
.br
.ti -1c
.RI "int \fBSSL_CTX_set_ex_data\fP (\fBSSL_CTX\fP *s, int idx, \fBvoid\fP *\fBarg\fP)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBSSL_CTX_get_ex_data\fP (const \fBSSL_CTX\fP *s, int idx)"
.br
.ti -1c
.RI "int \fBssl_ok\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBX509_STORE\fP * \fBSSL_CTX_get_cert_store\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_cert_store\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBX509_STORE\fP *store)"
.br
.ti -1c
.RI "int \fBSSL_want\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_tmp_rsa_callback\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBRSA\fP *(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                                                       int is_export,                                                                                                                                                                                                                                       int keylength))"
.br
.RI "\fISet the callback for generating temporary RSA keys\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_tmp_rsa_callback\fP (\fBSSL\fP *\fBssl\fP, \fBRSA\fP *(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                       int is_export,                                                                                                                                                                                                       int keylength))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_tmp_dh_callback\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBDH\fP *(*dh)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                       int keylength))"
.br
.RI "\fISet the callback for generating temporary DH keys\&. \fP"
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_tmp_dh_callback\fP (\fBSSL\fP *\fBssl\fP, \fBDH\fP *(*dh)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                                               int keylength))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_tmp_ecdh_callback\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBEC_KEY\fP *(*ecdh)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                                                       int keylength))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_tmp_ecdh_callback\fP (\fBSSL\fP *\fBssl\fP, \fBEC_KEY\fP *(*ecdh)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                                       int keylength))"
.br
.ti -1c
.RI "int \fBSSL_CTX_use_psk_identity_hint\fP (\fBSSL_CTX\fP *\fBctx\fP, const char *identity_hint)"
.br
.ti -1c
.RI "int \fBSSL_use_psk_identity_hint\fP (\fBSSL\fP *s, const char *identity_hint)"
.br
.ti -1c
.RI "const char * \fBSSL_get_psk_identity_hint\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "const char * \fBSSL_get_psk_identity\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_psk_client_callback\fP (\fBSSL\fP *s, unsigned int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                           const char *hint,                                                                                                                                                                                                           char *identity,                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                           max_identity_len,                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                           max_psk_len))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_psk_client_callback\fP (\fBSSL_CTX\fP *\fBctx\fP, unsigned int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                                           const char *hint,                                                                                                                                                                                                                           char *identity,                                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                                           max_identity_len,                                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                                           max_psk_len))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_psk_server_callback\fP (\fBSSL\fP *s, unsigned int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                           const char *identity,                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                           max_psk_len))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_psk_server_callback\fP (\fBSSL_CTX\fP *\fBctx\fP, unsigned int(*\fBcb\fP)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                                           const char *identity,                                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                                           max_psk_len))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_CTX_set_msg_callback\fP (\fBSSL_CTX\fP *\fBctx\fP, \fBvoid\fP(*\fBcb\fP)(int write_p, int \fBversion\fP,                                                                                                                                                               int content_type, const \fBvoid\fP *buf,                                                                                                                                                               size_t \fBlen\fP, \fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP))"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_msg_callback\fP (\fBSSL\fP *\fBssl\fP, \fBvoid\fP(*\fBcb\fP)(int write_p, int \fBversion\fP,                                                                                                                                               int content_type, const \fBvoid\fP *buf,                                                                                                                                               size_t \fBlen\fP, \fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP))"
.br
.ti -1c
.RI "\fBEVP_MD_CTX\fP * \fBssl_replace_hash\fP (\fBEVP_MD_CTX\fP **\fBhash\fP, const \fBEVP_MD\fP *md)"
.br
.ti -1c
.RI "\fBvoid\fP \fBssl_clear_hash_ctx\fP (\fBEVP_MD_CTX\fP **\fBhash\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSSL_set_debug\fP (\fBSSL\fP *s, int debug)"
.br
.ti -1c
.RI "int \fBSSL_cache_hit\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "int \fBSSL_is_server\fP (\fBSSL\fP *s)"
.br
.ti -1c
.RI "\fBIMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN\fP (\fBSSL_CIPHER\fP, \fBSSL_CIPHER\fP, ssl_cipher_id)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const char * \fBSSL_version_str\fP = \fBOPENSSL_VERSION_TEXT\fP"
.br
.ti -1c
.RI "\fBSSL3_ENC_METHOD\fP \fBssl3_undef_enc_method\fP"
.br
.ti -1c
.RI "int(*)(int, \fBX509_STORE_CTX\fP *) \fBSSL_get_verify_callback\fP (const \fBSSL\fP *s)"
.br
.ti -1c
.RI "int(*)(int, \fBX509_STORE_CTX\fP *) \fBSSL_CTX_get_verify_callback\fP (const \fBSSL_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "\fBvoid\fP(*)(const \fBSSL\fP *, int, int) \fBSSL_get_info_callback\fP (const \fBSSL\fP *\fBssl\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ku_reject(\fBx\fP, \fBusage\fP)   (((\fBx\fP)\->ex_flags & \fBEXFLAG_KUSAGE\fP) && !((\fBx\fP)\->ex_kusage & (\fBusage\fP)))"

.PP
Definition at line 2452 of file ssl_lib\&.c\&.
.SH "Function Documentation"
.PP 
.SS "IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN (\fBSSL_CIPHER\fP, \fBSSL_CIPHER\fP, ssl_cipher_id)"

.SS "LHASH_OF (\fBSSL_SESSION\fP)"

.PP
Definition at line 1182 of file ssl_lib\&.c\&.
.SS "int SSL_accept (\fBSSL\fP * s)"

.PP
Definition at line 993 of file ssl_lib\&.c\&.
.SS "\fBSSL_METHOD\fP* ssl_bad_method (int ver)"

.PP
Definition at line 2839 of file ssl_lib\&.c\&.
.SS "int SSL_cache_hit (\fBSSL\fP * s)"

.PP
Definition at line 3555 of file ssl_lib\&.c\&.
.SS "long SSL_callback_ctrl (\fBSSL\fP * s, int cmd, \fBvoid\fP(*)(\fBvoid\fP) fp)"

.PP
Definition at line 1167 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_certs_clear (\fBSSL\fP * s)"

.PP
Definition at line 557 of file ssl_lib\&.c\&.
.SS "int SSL_check_private_key (const \fBSSL\fP * ssl)"

.PP
Definition at line 971 of file ssl_lib\&.c\&.
.SS "int ssl_check_srvr_ecc_cert_and_alg (\fBX509\fP * x, \fBSSL\fP * s)"

.PP
Definition at line 2457 of file ssl_lib\&.c\&.
.SS "int ssl_cipher_id_cmp (const \fBSSL_CIPHER\fP * a, const \fBSSL_CIPHER\fP * b)"

.PP
Definition at line 1298 of file ssl_lib\&.c\&.
.SS "int ssl_cipher_list_to_bytes (\fBSSL\fP * s, \fBSTACK_OF\fP(\fBSSL_CIPHER\fP)* sk, unsigned char * p, int(*)(const \fBSSL_CIPHER\fP *,                                                                                                                                                                       unsigned char *) put_cb)"

.PP
Definition at line 1443 of file ssl_lib\&.c\&.
.SS "int ssl_cipher_ptr_id_cmp (const \fBSSL_CIPHER\fP *const * ap, const \fBSSL_CIPHER\fP *const * bp)"

.PP
Definition at line 1309 of file ssl_lib\&.c\&.
.SS "int SSL_clear (\fBSSL\fP * s)"

.PP
Definition at line 190 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP ssl_clear_cipher_ctx (\fBSSL\fP * s)"

.PP
Definition at line 2989 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP ssl_clear_hash_ctx (\fBEVP_MD_CTX\fP ** hash)"

.PP
Definition at line 3542 of file ssl_lib\&.c\&.
.SS "int SSL_connect (\fBSSL\fP * s)"

.PP
Definition at line 1002 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_copy_session_id (\fBSSL\fP * t, const \fBSSL\fP * f)"

.PP
Definition at line 925 of file ssl_lib\&.c\&.
.SS "long SSL_ctrl (\fBSSL\fP * s, int cmd, long larg, \fBvoid\fP * parg)"

.PP
Definition at line 1109 of file ssl_lib\&.c\&.
.SS "long SSL_CTX_callback_ctrl (\fBSSL_CTX\fP * ctx, int cmd, \fBvoid\fP(*)(\fBvoid\fP) fp)"

.PP
Definition at line 1283 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_check_private_key (const \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 953 of file ssl_lib\&.c\&.
.SS "long SSL_CTX_ctrl (\fBSSL_CTX\fP * ctx, int cmd, long larg, \fBvoid\fP * parg)"

.PP
Definition at line 1187 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_free (\fBSSL_CTX\fP * a)"

.PP
Definition at line 2101 of file ssl_lib\&.c\&.
.SS "\fBX509\fP* SSL_CTX_get0_certificate (const \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 3029 of file ssl_lib\&.c\&.
.SS "\fBX509_VERIFY_PARAM\fP* SSL_CTX_get0_param (\fBSSL_CTX\fP * ctx)"

.PP
Definition at line 547 of file ssl_lib\&.c\&.
.SS "\fBEVP_PKEY\fP* SSL_CTX_get0_privatekey (const \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 3037 of file ssl_lib\&.c\&.
.SS "\fBX509_STORE\fP* SSL_CTX_get_cert_store (const \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 3311 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP* SSL_CTX_get_ex_data (const \fBSSL_CTX\fP * s, int idx)"

.PP
Definition at line 3301 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_get_ex_new_index (long argl, \fBvoid\fP * argp, \fBCRYPTO_EX_new\fP * new_func, \fBCRYPTO_EX_dup\fP * dup_func, \fBCRYPTO_EX_free\fP * free_func)"

.PP
Definition at line 3288 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_get_quiet_shutdown (const \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 3131 of file ssl_lib\&.c\&.
.SS "const \fBSSL_METHOD\fP* SSL_CTX_get_ssl_method (\fBSSL_CTX\fP * ctx)"

.PP
Definition at line 2657 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_get_verify_depth (const \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 842 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_get_verify_mode (const \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 837 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_load_verify_locations (\fBSSL_CTX\fP * ctx, const char * CAfile, const char * CApath)"

.PP
Definition at line 3228 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set1_param (\fBSSL_CTX\fP * ctx, \fBX509_VERIFY_PARAM\fP * vpm)"

.PP
Definition at line 537 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_alpn_protos (\fBSSL_CTX\fP * ctx, const unsigned char * protos, unsigned protos_len)"

.PP
Definition at line 1754 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_alpn_select_cb (\fBSSL_CTX\fP * ctx, int(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                   const unsigned char **\fBout\fP,                                                                                                                                                                   unsigned char *outlen,                                                                                                                                                                   const unsigned char *\fBin\fP,                                                                                                                                                                   unsigned int inlen,                                                                                                                                                                   \fBvoid\fP *\fBarg\fP) cb, \fBvoid\fP * arg)"

.PP
Definition at line 1794 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_cert_cb (\fBSSL_CTX\fP * c, int(*)(\fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP) cb, \fBvoid\fP * arg)"

.PP
Definition at line 2228 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_cert_store (\fBSSL_CTX\fP * ctx, \fBX509_STORE\fP * store)"

.PP
Definition at line 3316 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_cert_verify_callback (\fBSSL_CTX\fP * ctx, int(*)(\fBX509_STORE_CTX\fP *, \fBvoid\fP *) cb, \fBvoid\fP * arg)"

.PP
Definition at line 2208 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_cipher_list (\fBSSL_CTX\fP * ctx, const char * str)"
specify the ciphers to be used by default by the SSL_CTX 
.PP
Definition at line 1367 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_default_passwd_cb (\fBSSL_CTX\fP * ctx, \fBpem_password_cb\fP * cb)"

.PP
Definition at line 2198 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_default_passwd_cb_userdata (\fBSSL_CTX\fP * ctx, \fBvoid\fP * u)"

.PP
Definition at line 2203 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_default_verify_paths (\fBSSL_CTX\fP * ctx)"

.PP
Definition at line 3223 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_ex_data (\fBSSL_CTX\fP * s, int idx, \fBvoid\fP * arg)"

.PP
Definition at line 3296 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_generate_session_id (\fBSSL_CTX\fP * ctx, \fBGEN_SESSION_CB\fP cb)"

.PP
Definition at line 465 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_msg_callback (\fBSSL_CTX\fP * ctx, \fBvoid\fP(*)(int write_p, int \fBversion\fP,                                                                                                                                                               int content_type, const \fBvoid\fP *buf,                                                                                                                                                               size_t \fBlen\fP, \fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP) cb)"

.PP
Definition at line 3507 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_next_proto_select_cb (\fBSSL_CTX\fP * ctx, int(*)(\fBSSL\fP *s, unsigned char **\fBout\fP,                                                                                                                                                                                           unsigned char *outlen,                                                                                                                                                                                           const unsigned char *\fBin\fP,                                                                                                                                                                                           unsigned int inlen,                                                                                                                                                                                           \fBvoid\fP *\fBarg\fP) cb, \fBvoid\fP * arg)"

.PP
Definition at line 1737 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_next_protos_advertised_cb (\fBSSL_CTX\fP * ctx, int(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                               const unsigned char                                                                                                                                                                                                               **\fBout\fP,                                                                                                                                                                                                               unsigned int *outlen,                                                                                                                                                                                                               \fBvoid\fP *\fBarg\fP) cb, \fBvoid\fP * arg)"

.PP
Definition at line 1716 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_psk_client_callback (\fBSSL_CTX\fP * ctx, unsigned int(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                                           const char *hint,                                                                                                                                                                                                                           char *identity,                                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                                           max_identity_len,                                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                                           max_psk_len) cb)"

.PP
Definition at line 3473 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_psk_server_callback (\fBSSL_CTX\fP * ctx, unsigned int(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                                           const char *identity,                                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                                           max_psk_len) cb)"

.PP
Definition at line 3496 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_purpose (\fBSSL_CTX\fP * s, int purpose)"

.PP
Definition at line 517 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_quiet_shutdown (\fBSSL_CTX\fP * ctx, int mode)"

.PP
Definition at line 3126 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_session_id_context (\fBSSL_CTX\fP * ctx, const unsigned char * sid_ctx, unsigned int sid_ctx_len)"

.PP
Definition at line 437 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_ssl_version (\fBSSL_CTX\fP * ctx, const \fBSSL_METHOD\fP * meth)"
Used to change an SSL_CTXs default SSL method type 
.PP
Definition at line 275 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_tmp_dh_callback (\fBSSL_CTX\fP * ctx, \fBDH\fP *(*)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                       int keylength) dh)"

.PP
Set the callback for generating temporary DH keys\&. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the SSL context\&. 
.br
\fIdh\fP the callback 
.RE
.PP

.PP
Definition at line 3373 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_tmp_ecdh_callback (\fBSSL_CTX\fP * ctx, \fBEC_KEY\fP *(*)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                                                       int keylength) ecdh)"

.PP
Definition at line 3388 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_tmp_rsa_callback (\fBSSL_CTX\fP * ctx, \fBRSA\fP *(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                                                       int is_export,                                                                                                                                                                                                                                       int keylength) cb)"

.PP
Set the callback for generating temporary RSA keys\&. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the SSL context\&. 
.br
\fIcb\fP the callback 
.RE
.PP

.PP
Definition at line 3335 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_set_trust (\fBSSL_CTX\fP * s, int trust)"

.PP
Definition at line 527 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_verify (\fBSSL_CTX\fP * ctx, int mode, int(*)(int, \fBX509_STORE_CTX\fP *) cb)"

.PP
Definition at line 2216 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_CTX_set_verify_depth (\fBSSL_CTX\fP * ctx, int depth)"

.PP
Definition at line 2223 of file ssl_lib\&.c\&.
.SS "int SSL_CTX_use_psk_identity_hint (\fBSSL_CTX\fP * ctx, const char * identity_hint)"

.PP
Definition at line 3405 of file ssl_lib\&.c\&.
.SS "int SSL_do_handshake (\fBSSL\fP * s)"

.PP
Definition at line 2774 of file ssl_lib\&.c\&.
.SS "\fBSSL\fP* SSL_dup (\fBSSL\fP * s)"

.PP
Definition at line 2867 of file ssl_lib\&.c\&.
.SS "int SSL_export_keying_material (\fBSSL\fP * s, unsigned char * out, size_t olen, const char * label, size_t llen, const unsigned char * p, size_t plen, int use_context)"

.PP
Definition at line 1826 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_free (\fBSSL\fP * s)"

.PP
Definition at line 562 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP ssl_free_wbio_buffer (\fBSSL\fP * s)"

.PP
Definition at line 3109 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_get0_alpn_selected (const \fBSSL\fP * ssl, const unsigned char ** data, unsigned * len)"

.PP
Definition at line 1812 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_get0_next_proto_negotiated (const \fBSSL\fP * s, const unsigned char ** data, unsigned * len)"

.PP
Definition at line 1695 of file ssl_lib\&.c\&.
.SS "\fBX509_VERIFY_PARAM\fP* SSL_get0_param (\fBSSL\fP * ssl)"

.PP
Definition at line 552 of file ssl_lib\&.c\&.
.SS "\fBX509\fP* SSL_get_certificate (const \fBSSL\fP * s)"

.PP
Definition at line 3013 of file ssl_lib\&.c\&.
.SS "const char* SSL_get_cipher_list (const \fBSSL\fP * s, int n)"
The old interface to get the same thing as SSL_get_ciphers() 
.PP
Definition at line 1350 of file ssl_lib\&.c\&.
.SS "const \fBSSL_CIPHER\fP* SSL_get_current_cipher (const \fBSSL\fP * s)"

.PP
Definition at line 3045 of file ssl_lib\&.c\&.
.SS "const \fBCOMP_METHOD\fP* SSL_get_current_compression (\fBSSL\fP * s)"

.PP
Definition at line 3064 of file ssl_lib\&.c\&.
.SS "const \fBCOMP_METHOD\fP* SSL_get_current_expansion (\fBSSL\fP * s)"

.PP
Definition at line 3071 of file ssl_lib\&.c\&.
.SS "long SSL_get_default_timeout (const \fBSSL\fP * s)"

.PP
Definition at line 1011 of file ssl_lib\&.c\&.
.SS "int SSL_get_error (const \fBSSL\fP * s, int i)"

.PP
Definition at line 2692 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP* SSL_get_ex_data (const \fBSSL\fP * s, int idx)"

.PP
Definition at line 3283 of file ssl_lib\&.c\&.
.SS "int SSL_get_ex_new_index (long argl, \fBvoid\fP * argp, \fBCRYPTO_EX_new\fP * new_func, \fBCRYPTO_EX_dup\fP * dup_func, \fBCRYPTO_EX_free\fP * free_func)"

.PP
Definition at line 3271 of file ssl_lib\&.c\&.
.SS "int SSL_get_fd (const \fBSSL\fP * s)"

.PP
Definition at line 702 of file ssl_lib\&.c\&.
.SS "size_t SSL_get_finished (const \fBSSL\fP * s, \fBvoid\fP * buf, size_t count)"

.PP
Definition at line 796 of file ssl_lib\&.c\&.
.SS "\fBX509\fP* SSL_get_peer_certificate (const \fBSSL\fP * s)"

.PP
Definition at line 886 of file ssl_lib\&.c\&.
.SS "size_t SSL_get_peer_finished (const \fBSSL\fP * s, \fBvoid\fP * buf, size_t count)"

.PP
Definition at line 810 of file ssl_lib\&.c\&.
.SS "\fBEVP_PKEY\fP* SSL_get_privatekey (const \fBSSL\fP * s)"

.PP
Definition at line 3021 of file ssl_lib\&.c\&.
.SS "const char* SSL_get_psk_identity (const \fBSSL\fP * s)"

.PP
Definition at line 3453 of file ssl_lib\&.c\&.
.SS "const char* SSL_get_psk_identity_hint (const \fBSSL\fP * s)"

.PP
Definition at line 3446 of file ssl_lib\&.c\&.
.SS "int SSL_get_quiet_shutdown (const \fBSSL\fP * s)"

.PP
Definition at line 3141 of file ssl_lib\&.c\&.
.SS "\fBBIO\fP* SSL_get_rbio (const \fBSSL\fP * s)"

.PP
Definition at line 692 of file ssl_lib\&.c\&.
.SS "int SSL_get_read_ahead (const \fBSSL\fP * s)"

.PP
Definition at line 869 of file ssl_lib\&.c\&.
.SS "int SSL_get_rfd (const \fBSSL\fP * s)"

.PP
Definition at line 707 of file ssl_lib\&.c\&.
.SS "int ssl_get_server_cert_serverinfo (\fBSSL\fP * s, const unsigned char ** serverinfo, size_t * serverinfo_length)"

.PP
Definition at line 2605 of file ssl_lib\&.c\&.
.SS "\fBCERT_PKEY\fP* ssl_get_server_send_pkey (const \fBSSL\fP * s)"

.PP
Definition at line 2535 of file ssl_lib\&.c\&.
.SS "const char* SSL_get_servername (const \fBSSL\fP * s, const int type)"
return a servername extension value if provided in Client Hello, or NULL\&. So far, only host_name types are defined (RFC 3546)\&. 
.PP
Definition at line 1609 of file ssl_lib\&.c\&.
.SS "int SSL_get_servername_type (const \fBSSL\fP * s)"

.PP
Definition at line 1618 of file ssl_lib\&.c\&.
.SS "char* SSL_get_shared_ciphers (const \fBSSL\fP * s, char * buf, int len)"

.PP
Definition at line 1407 of file ssl_lib\&.c\&.
.SS "int SSL_get_shutdown (const \fBSSL\fP * s)"

.PP
Definition at line 3151 of file ssl_lib\&.c\&.
.SS "\fBEVP_PKEY\fP* ssl_get_sign_pkey (\fBSSL\fP * s, const \fBSSL_CIPHER\fP * cipher, const \fBEVP_MD\fP ** pmd)"

.PP
Definition at line 2564 of file ssl_lib\&.c\&.
.SS "\fBSSL_CTX\fP* SSL_get_SSL_CTX (const \fBSSL\fP * ssl)"

.PP
Definition at line 3161 of file ssl_lib\&.c\&.
.SS "const \fBSSL_METHOD\fP* SSL_get_ssl_method (\fBSSL\fP * s)"

.PP
Definition at line 2662 of file ssl_lib\&.c\&.
.SS "int SSL_get_verify_depth (const \fBSSL\fP * s)"

.PP
Definition at line 828 of file ssl_lib\&.c\&.
.SS "int SSL_get_verify_mode (const \fBSSL\fP * s)"

.PP
Definition at line 823 of file ssl_lib\&.c\&.
.SS "long SSL_get_verify_result (const \fBSSL\fP * ssl)"

.PP
Definition at line 3266 of file ssl_lib\&.c\&.
.SS "const char* SSL_get_version (const \fBSSL\fP * s)"

.PP
Definition at line 2845 of file ssl_lib\&.c\&.
.SS "\fBBIO\fP* SSL_get_wbio (const \fBSSL\fP * s)"

.PP
Definition at line 697 of file ssl_lib\&.c\&.
.SS "int SSL_get_wfd (const \fBSSL\fP * s)"

.PP
Definition at line 719 of file ssl_lib\&.c\&.
.SS "int SSL_has_matching_session_id (const \fBSSL\fP * ssl, const unsigned char * id, unsigned int id_len)"

.PP
Definition at line 481 of file ssl_lib\&.c\&.
.SS "int ssl_init_wbio_buffer (\fBSSL\fP * s, int push)"

.PP
Definition at line 3079 of file ssl_lib\&.c\&.
.SS "int SSL_is_server (\fBSSL\fP * s)"

.PP
Definition at line 3560 of file ssl_lib\&.c\&.
.SS "\fBSSL\fP* SSL_new (\fBSSL_CTX\fP * ctx)"

.PP
Definition at line 294 of file ssl_lib\&.c\&.
.SS "int ssl_ok (\fBSSL\fP * s)"

.PP
Definition at line 3306 of file ssl_lib\&.c\&.
.SS "int SSL_peek (\fBSSL\fP * s, \fBvoid\fP * buf, int num)"

.PP
Definition at line 1030 of file ssl_lib\&.c\&.
.SS "int SSL_pending (const \fBSSL\fP * s)"

.PP
Definition at line 874 of file ssl_lib\&.c\&.
.SS "int SSL_read (\fBSSL\fP * s, \fBvoid\fP * buf, int num)"

.PP
Definition at line 1016 of file ssl_lib\&.c\&.
.SS "int SSL_renegotiate (\fBSSL\fP * s)"

.PP
Definition at line 1080 of file ssl_lib\&.c\&.
.SS "int SSL_renegotiate_abbreviated (\fBSSL\fP * s)"

.PP
Definition at line 1090 of file ssl_lib\&.c\&.
.SS "int SSL_renegotiate_pending (\fBSSL\fP * s)"

.PP
Definition at line 1100 of file ssl_lib\&.c\&.
.SS "\fBEVP_MD_CTX\fP* ssl_replace_hash (\fBEVP_MD_CTX\fP ** hash, const \fBEVP_MD\fP * md)"

.PP
Definition at line 3530 of file ssl_lib\&.c\&.
.SS "int SSL_select_next_proto (unsigned char ** out, unsigned char * outlen, const unsigned char * server, unsigned int server_len, const unsigned char * client, unsigned int client_len)"

.PP
Definition at line 1647 of file ssl_lib\&.c\&.
.SS "int SSL_set1_param (\fBSSL\fP * ssl, \fBX509_VERIFY_PARAM\fP * vpm)"

.PP
Definition at line 542 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_accept_state (\fBSSL\fP * s)"

.PP
Definition at line 2795 of file ssl_lib\&.c\&.
.SS "int SSL_set_alpn_protos (\fBSSL\fP * ssl, const unsigned char * protos, unsigned protos_len)"

.PP
Definition at line 1774 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_bio (\fBSSL\fP * s, \fBBIO\fP * rbio, \fBBIO\fP * wbio)"

.PP
Definition at line 673 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_cert_cb (\fBSSL\fP * s, int(*)(\fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP) cb, \fBvoid\fP * arg)"

.PP
Definition at line 2234 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP ssl_set_cert_masks (\fBCERT\fP * c, const \fBSSL_CIPHER\fP * cipher)"

.PP
Definition at line 2239 of file ssl_lib\&.c\&.
.SS "int SSL_set_cipher_list (\fBSSL\fP * s, const char * str)"
specify the ciphers to be used by the SSL 
.PP
Definition at line 1390 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_connect_state (\fBSSL\fP * s)"

.PP
Definition at line 2807 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_debug (\fBSSL\fP * s, int debug)"

.PP
Definition at line 3550 of file ssl_lib\&.c\&.
.SS "int SSL_set_ex_data (\fBSSL\fP * s, int idx, \fBvoid\fP * arg)"

.PP
Definition at line 3278 of file ssl_lib\&.c\&.
.SS "int SSL_set_fd (\fBSSL\fP * s, int fd)"

.PP
Definition at line 732 of file ssl_lib\&.c\&.
.SS "int SSL_set_generate_session_id (\fBSSL\fP * ssl, \fBGEN_SESSION_CB\fP cb)"

.PP
Definition at line 473 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_info_callback (\fBSSL\fP * ssl, \fBvoid\fP(*)(const \fBSSL\fP *\fBssl\fP, int \fBtype\fP, int val) cb)"

.PP
Definition at line 3235 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_msg_callback (\fBSSL\fP * ssl, \fBvoid\fP(*)(int write_p, int \fBversion\fP,                                                                                                                                               int content_type, const \fBvoid\fP *buf,                                                                                                                                               size_t \fBlen\fP, \fBSSL\fP *\fBssl\fP, \fBvoid\fP *\fBarg\fP) cb)"

.PP
Definition at line 3515 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_psk_client_callback (\fBSSL\fP * s, unsigned int(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                           const char *hint,                                                                                                                                                                                                           char *identity,                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                           max_identity_len,                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                           max_psk_len) cb)"

.PP
Definition at line 3460 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_psk_server_callback (\fBSSL\fP * s, unsigned int(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                           const char *identity,                                                                                                                                                                                                           unsigned char *psk,                                                                                                                                                                                                           unsigned int                                                                                                                                                                                                           max_psk_len) cb)"

.PP
Definition at line 3486 of file ssl_lib\&.c\&.
.SS "int SSL_set_purpose (\fBSSL\fP * s, int purpose)"

.PP
Definition at line 522 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_quiet_shutdown (\fBSSL\fP * s, int mode)"

.PP
Definition at line 3136 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_read_ahead (\fBSSL\fP * s, int yes)"

.PP
Definition at line 864 of file ssl_lib\&.c\&.
.SS "int SSL_set_rfd (\fBSSL\fP * s, int fd)"

.PP
Definition at line 772 of file ssl_lib\&.c\&.
.SS "int SSL_set_session_id_context (\fBSSL\fP * ssl, const unsigned char * sid_ctx, unsigned int sid_ctx_len)"

.PP
Definition at line 451 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_shutdown (\fBSSL\fP * s, int mode)"

.PP
Definition at line 3146 of file ssl_lib\&.c\&.
.SS "\fBSSL_CTX\fP* SSL_set_SSL_CTX (\fBSSL\fP * ssl, \fBSSL_CTX\fP * ctx)"

.PP
Definition at line 3166 of file ssl_lib\&.c\&.
.SS "int SSL_set_ssl_method (\fBSSL\fP * s, const \fBSSL_METHOD\fP * meth)"

.PP
Definition at line 2667 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_state (\fBSSL\fP * ssl, int state)"

.PP
Definition at line 3256 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_tmp_dh_callback (\fBSSL\fP * ssl, \fBDH\fP *(*)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                                               int keylength) dh)"

.PP
Definition at line 3380 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_tmp_ecdh_callback (\fBSSL\fP * ssl, \fBEC_KEY\fP *(*)(\fBSSL\fP *\fBssl\fP, int is_export,                                                                                                                                                                                       int keylength) ecdh)"

.PP
Definition at line 3396 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_tmp_rsa_callback (\fBSSL\fP * ssl, \fBRSA\fP *(*)(\fBSSL\fP *\fBssl\fP,                                                                                                                                                                                                       int is_export,                                                                                                                                                                                                       int keylength) cb)"

.PP
Definition at line 3342 of file ssl_lib\&.c\&.
.SS "int SSL_set_trust (\fBSSL\fP * s, int trust)"

.PP
Definition at line 532 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_verify (\fBSSL\fP * s, int mode, int(*)(int ok, \fBX509_STORE_CTX\fP *\fBctx\fP) callback)"

.PP
Definition at line 851 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_verify_depth (\fBSSL\fP * s, int depth)"

.PP
Definition at line 859 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP SSL_set_verify_result (\fBSSL\fP * ssl, long arg)"

.PP
Definition at line 3261 of file ssl_lib\&.c\&.
.SS "int SSL_set_wfd (\fBSSL\fP * s, int fd)"

.PP
Definition at line 750 of file ssl_lib\&.c\&.
.SS "int SSL_shutdown (\fBSSL\fP * s)"

.PP
Definition at line 1058 of file ssl_lib\&.c\&.
.SS "int SSL_state (const \fBSSL\fP * ssl)"

.PP
Definition at line 3251 of file ssl_lib\&.c\&.
.SS "int ssl_undefined_const_function (const \fBSSL\fP * s)"

.PP
Definition at line 2832 of file ssl_lib\&.c\&.
.SS "int ssl_undefined_function (\fBSSL\fP * s)"

.PP
Definition at line 2819 of file ssl_lib\&.c\&.
.SS "int ssl_undefined_void_function (\fBvoid\fP)"

.PP
Definition at line 2825 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP ssl_update_cache (\fBSSL\fP * s, int mode)"

.PP
Definition at line 2626 of file ssl_lib\&.c\&.
.SS "int SSL_use_psk_identity_hint (\fBSSL\fP * s, const char * identity_hint)"

.PP
Definition at line 3423 of file ssl_lib\&.c\&.
.SS "int SSL_version (const \fBSSL\fP * s)"

.PP
Definition at line 3156 of file ssl_lib\&.c\&.
.SS "int SSL_want (const \fBSSL\fP * s)"

.PP
Definition at line 3323 of file ssl_lib\&.c\&.
.SS "int SSL_write (\fBSSL\fP * s, const \fBvoid\fP * buf, int num)"

.PP
Definition at line 1043 of file ssl_lib\&.c\&.
.SS "STACK_OF (\fBX509\fP)"

.PP
Definition at line 903 of file ssl_lib\&.c\&.
.SS "STACK_OF (\fBSSL_CIPHER\fP)"
return a STACK of the ciphers available for the SSL and in order of preference
.PP
return a STACK of the ciphers available for the SSL and in order of algorithm id 
.PP
Definition at line 1323 of file ssl_lib\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBSSL3_ENC_METHOD\fP ssl3_undef_enc_method"
\fBInitial value:\fP
.PP
.nf
= {
    
    (int (*)(SSL *, int))ssl_undefined_function,
    (int (*)(SSL *, unsigned char *, int))ssl_undefined_function,
    ssl_undefined_function,
    (int (*)(SSL *, unsigned char *, unsigned char *, int))
        ssl_undefined_function,
    (int (*)(SSL *, int))ssl_undefined_function,
    (int (*)(SSL *, const char *, int, unsigned char *))
        ssl_undefined_function,
    0,                          
    (int (*)(SSL *, int, unsigned char *))ssl_undefined_function,
    NULL,                       
    0,                          
    NULL,                       
    0,                          
    (int (*)(int))ssl_undefined_function,
    (int (*)(SSL *, unsigned char *, size_t, const char *,
             size_t, const unsigned char *, size_t,
             int use_context))ssl_undefined_function,
}
.fi
.PP
Definition at line 165 of file ssl_lib\&.c\&.
.SS "int(*)(int, \fBX509_STORE_CTX\fP *) SSL_CTX_get_verify_callback(const \fBSSL_CTX\fP *\fBctx\fP)"

.PP
Definition at line 847 of file ssl_lib\&.c\&.
.SS "\fBvoid\fP(*)(const \fBSSL\fP * , int , int ) SSL_get_info_callback(const \fBSSL\fP *\fBssl\fP)"

.PP
Definition at line 3245 of file ssl_lib\&.c\&.
.SS "int(*)(int, \fBX509_STORE_CTX\fP *) SSL_get_verify_callback(const \fBSSL\fP *s)"

.PP
Definition at line 833 of file ssl_lib\&.c\&.
.SS "const char* SSL_version_str = \fBOPENSSL_VERSION_TEXT\fP"

.PP
Definition at line 163 of file ssl_lib\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-openssl-doxygen from the source code\&.
