.TH "s2n/libcrypto-build/openssl/crypto/ec/ec_key.c" 3 "Thu Jun 30 2016" "s2n-openssl-doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n/libcrypto-build/openssl/crypto/ec/ec_key.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include 'ec_lcl\&.h'\fP
.br
\fC#include <openssl/err\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_new_by_curve_name\fP (int \fBnid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_free\fP (\fBEC_KEY\fP *r)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_copy\fP (\fBEC_KEY\fP *dest, const \fBEC_KEY\fP *src)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_dup\fP (const \fBEC_KEY\fP *ec_key)"
.br
.ti -1c
.RI "int \fBEC_KEY_up_ref\fP (\fBEC_KEY\fP *r)"
.br
.ti -1c
.RI "int \fBEC_KEY_generate_key\fP (\fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "int \fBEC_KEY_check_key\fP (const \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_public_key_affine_coordinates\fP (\fBEC_KEY\fP *\fBkey\fP, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y)"
.br
.ti -1c
.RI "const \fBEC_GROUP\fP * \fBEC_KEY_get0_group\fP (const \fBEC_KEY\fP *\fBkey\fP)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_group\fP (\fBEC_KEY\fP *\fBkey\fP, const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBEC_KEY_get0_private_key\fP (const \fBEC_KEY\fP *\fBkey\fP)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_private_key\fP (\fBEC_KEY\fP *\fBkey\fP, const \fBBIGNUM\fP *priv_key)"
.br
.ti -1c
.RI "const \fBEC_POINT\fP * \fBEC_KEY_get0_public_key\fP (const \fBEC_KEY\fP *\fBkey\fP)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_public_key\fP (\fBEC_KEY\fP *\fBkey\fP, const \fBEC_POINT\fP *pub_key)"
.br
.ti -1c
.RI "unsigned int \fBEC_KEY_get_enc_flags\fP (const \fBEC_KEY\fP *\fBkey\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_enc_flags\fP (\fBEC_KEY\fP *\fBkey\fP, unsigned int \fBflags\fP)"
.br
.ti -1c
.RI "\fBpoint_conversion_form_t\fP \fBEC_KEY_get_conv_form\fP (const \fBEC_KEY\fP *\fBkey\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_conv_form\fP (\fBEC_KEY\fP *\fBkey\fP, \fBpoint_conversion_form_t\fP cform)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEC_KEY_get_key_method_data\fP (\fBEC_KEY\fP *\fBkey\fP, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEC_KEY_insert_key_method_data\fP (\fBEC_KEY\fP *\fBkey\fP, \fBvoid\fP *\fBdata\fP, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_asn1_flag\fP (\fBEC_KEY\fP *\fBkey\fP, int flag)"
.br
.ti -1c
.RI "int \fBEC_KEY_precompute_mult\fP (\fBEC_KEY\fP *\fBkey\fP, \fBBN_CTX\fP *\fBctx\fP)"
.br
.ti -1c
.RI "int \fBEC_KEY_get_flags\fP (const \fBEC_KEY\fP *\fBkey\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_flags\fP (\fBEC_KEY\fP *\fBkey\fP, int \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_clear_flags\fP (\fBEC_KEY\fP *\fBkey\fP, int \fBflags\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int EC_KEY_check_key (const \fBEC_KEY\fP * key)"
Verifies that a private and/or public key is valid\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise\&. 
.RE
.PP

.PP
Definition at line 294 of file ec_key\&.c\&.
.SS "\fBvoid\fP EC_KEY_clear_flags (\fBEC_KEY\fP * key, int flags)"

.PP
Definition at line 561 of file ec_key\&.c\&.
.SS "\fBEC_KEY\fP* EC_KEY_copy (\fBEC_KEY\fP * dst, const \fBEC_KEY\fP * src)"
Copies a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdst\fP destination EC_KEY object 
.br
\fIsrc\fP src EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
dst or NULL if an error occurred\&. 
.RE
.PP

.PP
Definition at line 140 of file ec_key\&.c\&.
.SS "\fBEC_KEY\fP* EC_KEY_dup (const \fBEC_KEY\fP * src)"
Creates a new EC_KEY object and copies the content from src to it\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP the source EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_KEY object or NULL if an error occurred\&. 
.RE
.PP

.PP
Definition at line 203 of file ec_key\&.c\&.
.SS "\fBvoid\fP EC_KEY_free (\fBEC_KEY\fP * key)"
Frees a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object to be freed\&. 
.RE
.PP

.PP
Definition at line 106 of file ec_key\&.c\&.
.SS "int EC_KEY_generate_key (\fBEC_KEY\fP * key)"
Creates a new ec private (and optional a new public) key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.PP
Definition at line 230 of file ec_key\&.c\&.
.SS "const \fBEC_GROUP\fP* EC_KEY_get0_group (const \fBEC_KEY\fP * key)"
Returns the EC_GROUP object of a EC_KEY object 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
the EC_GROUP object (possibly NULL)\&. 
.RE
.PP

.PP
Definition at line 442 of file ec_key\&.c\&.
.SS "const \fBBIGNUM\fP* EC_KEY_get0_private_key (const \fBEC_KEY\fP * key)"
Returns the private key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
a BIGNUM with the private key (possibly NULL)\&. 
.RE
.PP

.PP
Definition at line 455 of file ec_key\&.c\&.
.SS "const \fBEC_POINT\fP* EC_KEY_get0_public_key (const \fBEC_KEY\fP * key)"
Returns the public key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
a EC_POINT object with the public key (possibly NULL) 
.RE
.PP

.PP
Definition at line 468 of file ec_key\&.c\&.
.SS "\fBpoint_conversion_form_t\fP EC_KEY_get_conv_form (const \fBEC_KEY\fP * key)"

.PP
Definition at line 491 of file ec_key\&.c\&.
.SS "unsigned int EC_KEY_get_enc_flags (const \fBEC_KEY\fP * key)"

.PP
Definition at line 481 of file ec_key\&.c\&.
.SS "int EC_KEY_get_flags (const \fBEC_KEY\fP * key)"

.PP
Definition at line 551 of file ec_key\&.c\&.
.SS "\fBvoid\fP* EC_KEY_get_key_method_data (\fBEC_KEY\fP * key, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"

.PP
Definition at line 503 of file ec_key\&.c\&.
.SS "\fBvoid\fP* EC_KEY_insert_key_method_data (\fBEC_KEY\fP * key, \fBvoid\fP * data, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"
Sets the key method data of an EC_KEY object, if none has yet been set\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIdata\fP opaque data to install\&. 
.br
\fIdup_func\fP a function that duplicates |data|\&. 
.br
\fIfree_func\fP a function that frees |data|\&. 
.br
\fIclear_free_func\fP a function that wipes and frees |data|\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the previously set data pointer, or NULL if |data| was inserted\&. 
.RE
.PP

.PP
Definition at line 519 of file ec_key\&.c\&.
.SS "\fBEC_KEY\fP* EC_KEY_new (\fBvoid\fP)"
Creates a new EC_KEY object\&. 
.PP
\fBReturns:\fP
.RS 4
EC_KEY object or NULL if an error occurred\&. 
.RE
.PP

.PP
Definition at line 71 of file ec_key\&.c\&.
.SS "\fBEC_KEY\fP* EC_KEY_new_by_curve_name (int nid)"
Creates a new EC_KEY object using a named curve as underlying EC_GROUP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInid\fP NID of the named curve\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
EC_KEY object or NULL if an error occurred\&. 
.RE
.PP

.PP
Definition at line 93 of file ec_key\&.c\&.
.SS "int EC_KEY_precompute_mult (\fBEC_KEY\fP * key, \fBBN_CTX\fP * ctx)"
Creates a table of pre-computed multiples of the generator to accelerate further EC_KEY operations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.PP
Definition at line 544 of file ec_key\&.c\&.
.SS "\fBvoid\fP EC_KEY_set_asn1_flag (\fBEC_KEY\fP * key, int flag)"

.PP
Definition at line 538 of file ec_key\&.c\&.
.SS "\fBvoid\fP EC_KEY_set_conv_form (\fBEC_KEY\fP * key, \fBpoint_conversion_form_t\fP cform)"

.PP
Definition at line 496 of file ec_key\&.c\&.
.SS "\fBvoid\fP EC_KEY_set_enc_flags (\fBEC_KEY\fP * key, unsigned int flags)"

.PP
Definition at line 486 of file ec_key\&.c\&.
.SS "\fBvoid\fP EC_KEY_set_flags (\fBEC_KEY\fP * key, int flags)"

.PP
Definition at line 556 of file ec_key\&.c\&.
.SS "int EC_KEY_set_group (\fBEC_KEY\fP * key, const \fBEC_GROUP\fP * group)"
Sets the EC_GROUP of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIgroup\fP EC_GROUP to use in the EC_KEY object (note: the EC_KEY object will use an own copy of the EC_GROUP)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.PP
Definition at line 447 of file ec_key\&.c\&.
.SS "int EC_KEY_set_private_key (\fBEC_KEY\fP * key, const \fBBIGNUM\fP * prv)"
Sets the private key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIprv\fP BIGNUM with the private key (note: the EC_KEY object will use an own copy of the BIGNUM)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.PP
Definition at line 460 of file ec_key\&.c\&.
.SS "int EC_KEY_set_public_key (\fBEC_KEY\fP * key, const \fBEC_POINT\fP * pub)"
Sets the public key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIpub\fP EC_POINT object with the public key (note: the EC_KEY object will use an own copy of the EC_POINT object)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.PP
Definition at line 473 of file ec_key\&.c\&.
.SS "int EC_KEY_set_public_key_affine_coordinates (\fBEC_KEY\fP * key, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y)"
Sets a public key from affine coordindates performing neccessary NIST PKV tests\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object 
.br
\fIx\fP public key x coordinate 
.br
\fIy\fP public key y coordinate 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise\&. 
.RE
.PP

.PP
Definition at line 363 of file ec_key\&.c\&.
.SS "int EC_KEY_up_ref (\fBEC_KEY\fP * key)"
Increases the internal reference count of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.PP
Definition at line 215 of file ec_key\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-openssl-doxygen from the source code\&.
