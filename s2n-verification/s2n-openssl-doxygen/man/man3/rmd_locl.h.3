.TH "s2n/libcrypto-build/openssl/crypto/ripemd/rmd_locl.h" 3 "Thu Jun 30 2016" "s2n-openssl-doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n/libcrypto-build/openssl/crypto/ripemd/rmd_locl.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <openssl/opensslconf\&.h>\fP
.br
\fC#include <openssl/ripemd\&.h>\fP
.br
\fC#include 'md32_common\&.h'\fP
.br
\fC#include 'rmdconst\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRIPEMD160_LONG_LOG2\fP   2  /* default to 32 \fBbits\fP */"
.br
.ti -1c
.RI "#define \fBDATA_ORDER_IS_LITTLE_ENDIAN\fP"
.br
.ti -1c
.RI "#define \fBHASH_LONG\fP   \fBRIPEMD160_LONG\fP"
.br
.ti -1c
.RI "#define \fBHASH_CTX\fP   \fBRIPEMD160_CTX\fP"
.br
.ti -1c
.RI "#define \fBHASH_CBLOCK\fP   \fBRIPEMD160_CBLOCK\fP"
.br
.ti -1c
.RI "#define \fBHASH_UPDATE\fP   \fBRIPEMD160_Update\fP"
.br
.ti -1c
.RI "#define \fBHASH_TRANSFORM\fP   \fBRIPEMD160_Transform\fP"
.br
.ti -1c
.RI "#define \fBHASH_FINAL\fP   \fBRIPEMD160_Final\fP"
.br
.ti -1c
.RI "#define \fBHASH_MAKE_STRING\fP(\fBc\fP,  s)  "
.br
.ti -1c
.RI "#define \fBHASH_BLOCK_DATA_ORDER\fP   \fBripemd160_block_data_order\fP"
.br
.ti -1c
.RI "#define \fBF1\fP(\fBx\fP,  y,  z)             ((\fBx\fP) ^ (y) ^ (z))"
.br
.ti -1c
.RI "#define \fBF2\fP(\fBx\fP,  y,  z)             ((((y) ^ (z)) & (\fBx\fP)) ^ (z))"
.br
.ti -1c
.RI "#define \fBF3\fP(\fBx\fP,  y,  z)             (((~(y)) | (\fBx\fP)) ^ (z))"
.br
.ti -1c
.RI "#define \fBF4\fP(\fBx\fP,  y,  z)             ((((\fBx\fP) ^ (y)) & (z)) ^ (y))"
.br
.ti -1c
.RI "#define \fBF5\fP(\fBx\fP,  y,  z)             (((~(z)) | (y)) ^ (\fBx\fP))"
.br
.ti -1c
.RI "#define \fBRIPEMD160_A\fP   0x67452301L"
.br
.ti -1c
.RI "#define \fBRIPEMD160_B\fP   0xEFCDAB89L"
.br
.ti -1c
.RI "#define \fBRIPEMD160_C\fP   0x98BADCFEL"
.br
.ti -1c
.RI "#define \fBRIPEMD160_D\fP   0x10325476L"
.br
.ti -1c
.RI "#define \fBRIPEMD160_E\fP   0xC3D2E1F0L"
.br
.ti -1c
.RI "#define \fBRIP1\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d,  \fBe\fP,  w,  s)"
.br
.ti -1c
.RI "#define \fBRIP2\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d,  \fBe\fP,  w,  s,  K)"
.br
.ti -1c
.RI "#define \fBRIP3\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d,  \fBe\fP,  w,  s,  K)"
.br
.ti -1c
.RI "#define \fBRIP4\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d,  \fBe\fP,  w,  s,  K)"
.br
.ti -1c
.RI "#define \fBRIP5\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d,  \fBe\fP,  w,  s,  K)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBripemd160_block_data_order\fP (\fBRIPEMD160_CTX\fP *\fBc\fP, const \fBvoid\fP *\fBp\fP, size_t \fBnum\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DATA_ORDER_IS_LITTLE_ENDIAN"

.PP
Definition at line 81 of file rmd_locl\&.h\&.
.SS "#define F1(\fBx\fP, y, z)   ((\fBx\fP) ^ (y) ^ (z))"

.PP
Definition at line 111 of file rmd_locl\&.h\&.
.SS "#define F2(\fBx\fP, y, z)   ((((y) ^ (z)) & (\fBx\fP)) ^ (z))"

.PP
Definition at line 112 of file rmd_locl\&.h\&.
.SS "#define F3(\fBx\fP, y, z)   (((~(y)) | (\fBx\fP)) ^ (z))"

.PP
Definition at line 113 of file rmd_locl\&.h\&.
.SS "#define F4(\fBx\fP, y, z)   ((((\fBx\fP) ^ (y)) & (z)) ^ (y))"

.PP
Definition at line 114 of file rmd_locl\&.h\&.
.SS "#define F5(\fBx\fP, y, z)   (((~(z)) | (y)) ^ (\fBx\fP))"

.PP
Definition at line 115 of file rmd_locl\&.h\&.
.SS "#define HASH_BLOCK_DATA_ORDER   \fBripemd160_block_data_order\fP"

.PP
Definition at line 97 of file rmd_locl\&.h\&.
.SS "#define HASH_CBLOCK   \fBRIPEMD160_CBLOCK\fP"

.PP
Definition at line 85 of file rmd_locl\&.h\&.
.SS "#define HASH_CTX   \fBRIPEMD160_CTX\fP"

.PP
Definition at line 84 of file rmd_locl\&.h\&.
.SS "#define HASH_FINAL   \fBRIPEMD160_Final\fP"

.PP
Definition at line 88 of file rmd_locl\&.h\&.
.SS "#define HASH_LONG   \fBRIPEMD160_LONG\fP"

.PP
Definition at line 83 of file rmd_locl\&.h\&.
.SS "#define HASH_MAKE_STRING(\fBc\fP, s)"
\fBValue:\fP
.PP
.nf
do {    \
        unsigned long ll;               \
        ll=(c)->A; (void)HOST_l2c(ll,(s));      \
        ll=(c)->B; (void)HOST_l2c(ll,(s));      \
        ll=(c)->C; (void)HOST_l2c(ll,(s));      \
        ll=(c)->D; (void)HOST_l2c(ll,(s));      \
        ll=(c)->E; (void)HOST_l2c(ll,(s));      \
        } while (0)
.fi
.PP
Definition at line 89 of file rmd_locl\&.h\&.
.SS "#define HASH_TRANSFORM   \fBRIPEMD160_Transform\fP"

.PP
Definition at line 87 of file rmd_locl\&.h\&.
.SS "#define HASH_UPDATE   \fBRIPEMD160_Update\fP"

.PP
Definition at line 86 of file rmd_locl\&.h\&.
.SS "#define RIP1(\fBa\fP, \fBb\fP, \fBc\fP, d, \fBe\fP, w, s)"
\fBValue:\fP
.PP
.nf
{ \
        a+=F1(b,c,d)+X(w); \
        a=ROTATE(a,s)+e; \
        c=ROTATE(c,10); }
.fi
.PP
Definition at line 126 of file rmd_locl\&.h\&.
.SS "#define RIP2(\fBa\fP, \fBb\fP, \fBc\fP, d, \fBe\fP, w, s, K)"
\fBValue:\fP
.PP
.nf
{ \
        a+=F2(b,c,d)+X(w)+K; \
        a=ROTATE(a,s)+e; \
        c=ROTATE(c,10); }
.fi
.PP
Definition at line 131 of file rmd_locl\&.h\&.
.SS "#define RIP3(\fBa\fP, \fBb\fP, \fBc\fP, d, \fBe\fP, w, s, K)"
\fBValue:\fP
.PP
.nf
{ \
        a+=F3(b,c,d)+X(w)+K; \
        a=ROTATE(a,s)+e; \
        c=ROTATE(c,10); }
.fi
.PP
Definition at line 136 of file rmd_locl\&.h\&.
.SS "#define RIP4(\fBa\fP, \fBb\fP, \fBc\fP, d, \fBe\fP, w, s, K)"
\fBValue:\fP
.PP
.nf
{ \
        a+=F4(b,c,d)+X(w)+K; \
        a=ROTATE(a,s)+e; \
        c=ROTATE(c,10); }
.fi
.PP
Definition at line 141 of file rmd_locl\&.h\&.
.SS "#define RIP5(\fBa\fP, \fBb\fP, \fBc\fP, d, \fBe\fP, w, s, K)"
\fBValue:\fP
.PP
.nf
{ \
        a+=F5(b,c,d)+X(w)+K; \
        a=ROTATE(a,s)+e; \
        c=ROTATE(c,10); }
.fi
.PP
Definition at line 146 of file rmd_locl\&.h\&.
.SS "#define RIPEMD160_A   0x67452301L"

.PP
Definition at line 118 of file rmd_locl\&.h\&.
.SS "#define RIPEMD160_B   0xEFCDAB89L"

.PP
Definition at line 119 of file rmd_locl\&.h\&.
.SS "#define RIPEMD160_C   0x98BADCFEL"

.PP
Definition at line 120 of file rmd_locl\&.h\&.
.SS "#define RIPEMD160_D   0x10325476L"

.PP
Definition at line 121 of file rmd_locl\&.h\&.
.SS "#define RIPEMD160_E   0xC3D2E1F0L"

.PP
Definition at line 122 of file rmd_locl\&.h\&.
.SS "#define RIPEMD160_LONG_LOG2   2  /* default to 32 \fBbits\fP */"

.PP
Definition at line 65 of file rmd_locl\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP ripemd160_block_data_order (\fBRIPEMD160_CTX\fP * c, const \fBvoid\fP * p, size_t num)"

.PP
Definition at line 88 of file rmd_dgst\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-openssl-doxygen from the source code\&.
