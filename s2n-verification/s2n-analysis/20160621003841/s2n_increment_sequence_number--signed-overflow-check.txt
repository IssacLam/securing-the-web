CBMC version 5.4 64-bit x86_64 macos
Parsing ./s2n/crypto/s2n_sequence.c
Converting
Type-checking s2n_sequence
Generating GOTO Program
Adding CPROVER library (x86_64)
Removal of function pointers and virtual functions
Partial Inlining
Generic Property Instrumentation
Starting Bounded Model Checking
Unwinding loop s2n_increment_sequence_number.0 iteration 1 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 2 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 3 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 4 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 5 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 6 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 7 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 8 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Unwinding loop s2n_increment_sequence_number.0 iteration 9 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
Not unwinding loop s2n_increment_sequence_number.0 iteration 10 (10 max) file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
size of program expression: 244 steps
simple slicing removed 126 assignments
Generated 11 VCC(s), 11 remaining after simplification
Passing problem to propositional reduction
converting SSA
Running propositional reduction
Post-processing
Solving with MiniSAT 2.2.1 with simplifier
2370 variables, 7016 clauses
SAT checker: instance is SATISFIABLE
Runtime decision procedure: 0.012s
Building error trace

Counterexample:

State 18 file ./s2n/crypto/s2n_sequence.c line 20 thread 0
----------------------------------------------------
  sequence_number=((struct s2n_blob { unsigned char *data; unsigned int size; unsigned int allocated; unsigned int mlocked : 1; unsigned __CPROVER_bitvector[7] $bit_field_pad0 : 7; unsigned __CPROVER_bitvector[56] $pad0; } *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 19 file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number thread 0
----------------------------------------------------
  i=0 (00000000000000000000000000000000)

Violated property:
  file ./s2n/crypto/s2n_sequence.c line 22 function s2n_increment_sequence_number
  arithmetic overflow on unsigned to signed type conversion in (signed int)(sequence_number->size - (unsigned int)1)
  !(4294967295u + sequence_number->size >= 2147483648u)

VERIFICATION FAILED
