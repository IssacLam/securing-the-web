.TH "s2n-master/tls/s2n_cipher_suites.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tls/s2n_cipher_suites.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include 'error/s2n_errno\&.h'\fP
.br
\fC#include 'tls/s2n_cipher_suites\&.h'\fP
.br
\fC#include 'tls/s2n_connection\&.h'\fP
.br
\fC#include 'utils/s2n_safety\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBs2n_cipher_suite\fP * \fBs2n_cipher_suite_match\fP (uint8_t cipher_suite[\fBS2N_TLS_CIPHER_SUITE_LEN\fP])"
.br
.ti -1c
.RI "int \fBs2n_set_cipher_as_client\fP (struct \fBs2n_connection\fP *conn, uint8_t wire[\fBS2N_TLS_CIPHER_SUITE_LEN\fP])"
.br
.ti -1c
.RI "int \fBs2n_set_cipher_as_sslv2_server\fP (struct \fBs2n_connection\fP *conn, uint8_t *wire, uint16_t count)"
.br
.ti -1c
.RI "int \fBs2n_set_cipher_as_tls_server\fP (struct \fBs2n_connection\fP *conn, uint8_t *wire, uint16_t count)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const struct \fBs2n_key_exchange_algorithm\fP \fBs2n_rsa\fP"
.br
.ti -1c
.RI "const struct \fBs2n_key_exchange_algorithm\fP \fBs2n_dhe\fP"
.br
.ti -1c
.RI "const struct \fBs2n_key_exchange_algorithm\fP \fBs2n_ecdhe\fP"
.br
.ti -1c
.RI "struct \fBs2n_cipher_suite\fP \fBs2n_all_cipher_suites\fP []"
.br
.ti -1c
.RI "struct \fBs2n_cipher_suite\fP \fBs2n_null_cipher_suite\fP = { 'TLS_NULL_WITH_NULL_NULL', {TLS_NULL_WITH_NULL_NULL}, &\fBs2n_rsa\fP, &\fBs2n_null_cipher\fP, \fBS2N_HMAC_NONE\fP }"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "struct \fBs2n_cipher_suite\fP* s2n_cipher_suite_match (uint8_t cipher_suite[S2N_TLS_CIPHER_SUITE_LEN])"

.PP
Definition at line 65 of file s2n_cipher_suites\&.c\&.
.PP
.nf
66 {
67     int low = 0;
68     int top = (sizeof(s2n_all_cipher_suites) / sizeof(struct s2n_cipher_suite)) - 1;
69 
70     /* Perform a textbook binary search */
71     while (low <= top) {
72         /* Check in the middle */
73         int mid = low + ((top - low) / 2);
74         int m = memcmp(s2n_all_cipher_suites[mid]\&.value, cipher_suite, 2);
75 
76         if (m == 0) {
77             return &s2n_all_cipher_suites[mid];
78         } else if (m > 0) {
79             top = mid - 1;
80         } else if (m < 0) {
81             low = mid + 1;
82         }
83     }
84 
85     return NULL;
86 }
.fi
.SS "int s2n_set_cipher_as_client (struct \fBs2n_connection\fP * conn, uint8_t wire[S2N_TLS_CIPHER_SUITE_LEN])"

.PP
Definition at line 88 of file s2n_cipher_suites\&.c\&.
.PP
.nf
89 {
90     /* See if the cipher is one we support */
91     conn->secure\&.cipher_suite = s2n_cipher_suite_match(wire);
92     if (conn->secure\&.cipher_suite == NULL) {
93         S2N_ERROR(S2N_ERR_CIPHER_NOT_SUPPORTED);
94     }
95 
96     return 0;
97 }
.fi
.SS "int s2n_set_cipher_as_sslv2_server (struct \fBs2n_connection\fP * conn, uint8_t * wire, uint16_t count)"

.PP
Definition at line 176 of file s2n_cipher_suites\&.c\&.
.PP
.nf
177 {
178     return s2n_set_cipher_as_server(conn, wire, count, S2N_SSLv2_CIPHER_SUITE_LEN);
179 }
.fi
.SS "int s2n_set_cipher_as_tls_server (struct \fBs2n_connection\fP * conn, uint8_t * wire, uint16_t count)"

.PP
Definition at line 181 of file s2n_cipher_suites\&.c\&.
.PP
.nf
182 {
183     return s2n_set_cipher_as_server(conn, wire, count, S2N_TLS_CIPHER_SUITE_LEN);
184 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const struct \fBs2n_key_exchange_algorithm\fP s2n_rsa"
\fBInitial value:\fP
.PP
.nf
= {
    \&.flags = 0,
}
.fi
.PP
Definition at line 24 of file s2n_cipher_suites\&.c\&.
.SS "const struct \fBs2n_key_exchange_algorithm\fP s2n_dhe"
\fBInitial value:\fP
.PP
.nf
= {
    \&.flags = S2N_KEY_EXCHANGE_DH | S2N_KEY_EXCHANGE_EPH,
}
.fi
.PP
Definition at line 28 of file s2n_cipher_suites\&.c\&.
.SS "const struct \fBs2n_key_exchange_algorithm\fP s2n_ecdhe"
\fBInitial value:\fP
.PP
.nf
= {
    \&.flags = S2N_KEY_EXCHANGE_DH | S2N_KEY_EXCHANGE_EPH | S2N_KEY_EXCHANGE_ECC,
}
.fi
.PP
Definition at line 32 of file s2n_cipher_suites\&.c\&.
.SS "struct \fBs2n_cipher_suite\fP s2n_all_cipher_suites[]"
\fBInitial value:\fP
.PP
.nf
= {
    {"RC4-MD5", {TLS_RSA_WITH_RC4_128_MD5}, &s2n_rsa, &s2n_rc4, S2N_HMAC_MD5, S2N_HMAC_SHA256, S2N_SSLv3},  
    {"RC4-SHA", {TLS_RSA_WITH_RC4_128_SHA}, &s2n_rsa, &s2n_rc4, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_SSLv3}, 
    {"DES-CBC3-SHA", {TLS_RSA_WITH_3DES_EDE_CBC_SHA}, &s2n_rsa, &s2n_3des, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_SSLv3},  
    {"EDH-RSA-DES-CBC3-SHA", {TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA}, &s2n_dhe, &s2n_3des, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_SSLv3},  
    {"AES128-SHA", {TLS_RSA_WITH_AES_128_CBC_SHA}, &s2n_rsa, &s2n_aes128, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_TLS10},   
    {"DHE-RSA-AES128-SHA", {TLS_DHE_RSA_WITH_AES_128_CBC_SHA}, &s2n_dhe, &s2n_aes128, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_TLS10},   
    {"AES256-SHA", {TLS_RSA_WITH_AES_256_CBC_SHA}, &s2n_rsa, &s2n_aes256, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_TLS10},   
    {"DHE-RSA-AES256-SHA", {TLS_DHE_RSA_WITH_AES_256_CBC_SHA}, &s2n_dhe, &s2n_aes256, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_TLS10},   
    {"AES128-SHA256", {TLS_RSA_WITH_AES_128_CBC_SHA256}, &s2n_rsa, &s2n_aes128, S2N_HMAC_SHA256, S2N_HMAC_SHA256, S2N_TLS12},   
    {"AES256-SHA256", {TLS_RSA_WITH_AES_256_CBC_SHA256}, &s2n_rsa, &s2n_aes256, S2N_HMAC_SHA256, S2N_HMAC_SHA256, S2N_TLS12},   
    {"DHE-RSA-AES128-SHA256", {TLS_DHE_RSA_WITH_AES_128_CBC_SHA256}, &s2n_dhe, &s2n_aes128, S2N_HMAC_SHA256, S2N_HMAC_SHA256, S2N_TLS12},   
    {"DHE-RSA-AES256-SHA256", {TLS_DHE_RSA_WITH_AES_256_CBC_SHA256}, &s2n_dhe, &s2n_aes256, S2N_HMAC_SHA256, S2N_HMAC_SHA256, S2N_TLS12},   
    {"AES128-GCM-SHA256", {TLS_RSA_WITH_AES_128_GCM_SHA256}, &s2n_rsa, &s2n_aes128_gcm, S2N_HMAC_NONE, S2N_HMAC_SHA256, S2N_TLS12}, 
    {"AES256-GCM-SHA384", {TLS_RSA_WITH_AES_256_GCM_SHA384}, &s2n_rsa, &s2n_aes256_gcm, S2N_HMAC_NONE, S2N_HMAC_SHA384, S2N_TLS12}, 
    {"DHE-RSA-AES128-GCM-SHA256", {TLS_DHE_RSA_WITH_AES_128_GCM_SHA256}, &s2n_dhe, &s2n_aes128_gcm, S2N_HMAC_NONE, S2N_HMAC_SHA256, S2N_TLS12}, 
    {"ECDHE-RSA-DES-CBC3-SHA", {TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA}, &s2n_ecdhe, &s2n_3des, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_TLS10},    
    {"ECDHE-RSA-AES128-SHA", {TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA}, &s2n_ecdhe, &s2n_aes128, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_TLS10}, 
    {"ECDHE-RSA-AES256-SHA", {TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA}, &s2n_ecdhe, &s2n_aes256, S2N_HMAC_SHA1, S2N_HMAC_SHA256, S2N_TLS10}, 
    {"ECDHE-RSA-AES128-SHA256", {TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256}, &s2n_ecdhe, &s2n_aes128, S2N_HMAC_SHA256, S2N_HMAC_SHA256, S2N_TLS12}, 
    {"ECDHE-RSA-AES256-SHA384", {TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384}, &s2n_ecdhe, &s2n_aes256, S2N_HMAC_SHA384, S2N_HMAC_SHA384, S2N_TLS12}, 
    {"ECDHE-RSA-AES128-GCM-SHA256", {TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256}, &s2n_ecdhe, &s2n_aes128_gcm, S2N_HMAC_NONE, S2N_HMAC_SHA256, S2N_TLS12},   
    {"ECDHE-RSA-AES256-GCM-SHA384", {TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384}, &s2n_ecdhe, &s2n_aes256_gcm, S2N_HMAC_NONE, S2N_HMAC_SHA384, S2N_TLS12},   
}
.fi
.PP
Definition at line 37 of file s2n_cipher_suites\&.c\&.
.SS "struct \fBs2n_cipher_suite\fP s2n_null_cipher_suite = { 'TLS_NULL_WITH_NULL_NULL', {TLS_NULL_WITH_NULL_NULL}, &\fBs2n_rsa\fP, &\fBs2n_null_cipher\fP, \fBS2N_HMAC_NONE\fP }"

.PP
Definition at line 63 of file s2n_cipher_suites\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
