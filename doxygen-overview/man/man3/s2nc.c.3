.TH "s2n-master/bin/s2nc.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/bin/s2nc.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <sys/ioctl\&.h>\fP
.br
\fC#include <sys/poll\&.h>\fP
.br
\fC#include <netdb\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <signal\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <getopt\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <s2n\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBusage\fP ()"
.br
.ti -1c
.RI "int \fBecho\fP (struct \fBs2n_connection\fP *conn, int sockfd)"
.br
.ti -1c
.RI "int \fBnegotiate\fP (struct \fBs2n_connection\fP *conn)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char *const *argv)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP usage ()"

.PP
Definition at line 33 of file s2nc\&.c\&.
.PP
.nf
34 {
35     fprintf(stderr, "usage: s2nc [options] host [port]\n");
36     fprintf(stderr, " host: hostname or IP address to connect to\n");
37     fprintf(stderr, " port: port to connect to\n");
38     fprintf(stderr, "\n Options:\n\n");
39     fprintf(stderr, "  -a [protocols]\n");
40     fprintf(stderr, "  --alpn [protocols]\n");
41     fprintf(stderr, "    Sets the application protocols supported by this client, as a comma seperated list\&.\n");
42     fprintf(stderr, "  -h,--help\n");
43     fprintf(stderr, "    Display this message and quit\&.\n");
44     fprintf(stderr, "  -n [server name]\n");
45     fprintf(stderr, "  --name [server name]\n");
46     fprintf(stderr, "    Sets the SNI server name header for this client\&.  If not specified, the host value is used\&.\n");
47     fprintf(stderr, "\n");
48     fprintf(stderr, "  --s,--status\n");
49     fprintf(stderr, "    Request the OCSP status of the remote server certificate\n");
50     fprintf(stderr, "\n");
51     exit(1);
52 }
.fi
.SS "int echo (struct \fBs2n_connection\fP * conn, int sockfd)"

.PP
Definition at line 87 of file echo\&.c\&.
.PP
.nf
88 {
89     struct pollfd readers[2];
90 
91     readers[0]\&.fd = sockfd;
92     readers[0]\&.events = POLLIN;
93     readers[1]\&.fd = STDIN_FILENO;
94     readers[1]\&.events = POLLIN;
95 
96     /* Act as a simple proxy between stdin and the SSL connection */
97     int p;
98     s2n_blocked_status blocked;
99   POLL:
100     while ((p = poll(readers, 2, -1)) > 0) {
101         char buffer[10240];
102         int bytes_read, bytes_written;
103 
104         if (readers[0]\&.revents & POLLIN) {
105             do {
106                 bytes_read = s2n_recv(conn, buffer, 10240, &blocked);
107                 if (bytes_read == 0) {
108                     /* Connection has been closed */
109                     s2n_connection_wipe(conn);
110                     return 0;
111                 }
112                 if (bytes_read < 0) {
113                     fprintf(stderr, "Error reading from connection: '%s' %d\n", s2n_strerror(s2n_errno, "EN"), s2n_connection_get_alert(conn));
114                     exit(1);
115                 }
116                 bytes_written = write(STDOUT_FILENO, buffer, bytes_read);
117                 if (bytes_written <= 0) {
118                     fprintf(stderr, "Error writing to stdout\n");
119                     exit(1);
120                 }
121             } while (blocked);
122         }
123         if (readers[1]\&.revents & POLLIN) {
124             int bytes_available;
125             if (ioctl(STDIN_FILENO, FIONREAD, &bytes_available) < 0) {
126                 bytes_available = 1;
127             }
128             if (bytes_available > sizeof(buffer)) {
129                 bytes_available = sizeof(buffer);
130             }
131 
132             /* Read as many bytes as we think we can */
133           READ:
134             bytes_read = read(STDIN_FILENO, buffer, bytes_available);
135             if (bytes_read < 0) {
136                 if (errno == EINTR) {
137                     goto READ;
138                 }
139                 fprintf(stderr, "Error reading from stdin\n");
140                 exit(1);
141             }
142             if (bytes_read == 0) {
143                 /* Exit on EOF */
144                 return 0;
145             }
146 
147             char *buf_ptr = buffer;
148             do {
149                 bytes_written = s2n_send(conn, buf_ptr, bytes_available, &blocked);
150                 if (bytes_written < 0) {
151                     fprintf(stderr, "Error writing to connection: '%s'\n", s2n_strerror(s2n_errno, "EN"));
152                     exit(1);
153                 }
154 
155                 bytes_available -= bytes_written;
156                 buf_ptr += bytes_written;
157             } while (bytes_available || blocked);
158         }
159     }
160     if (p < 0 && errno == EINTR) {
161         goto POLL;
162     }
163 
164     return 0;
165 }
.fi
.SS "int negotiate (struct \fBs2n_connection\fP * conn)"

.PP
Definition at line 31 of file echo\&.c\&.
.PP
.nf
32 {
33     s2n_blocked_status blocked;
34     do {
35         if (s2n_negotiate(conn, &blocked) < 0) {
36             fprintf(stderr, "Failed to negotiate: '%s' %d\n", s2n_strerror(s2n_errno, "EN"), s2n_connection_get_alert(conn));
37             return -1;
38         }
39     } while (blocked);
40 
41     /* Now that we've negotiated, print some parameters */
42     int client_hello_version;
43     int client_protocol_version;
44     int server_protocol_version;
45     int actual_protocol_version;
46 
47     if ((client_hello_version = s2n_connection_get_client_hello_version(conn)) < 0) {
48         fprintf(stderr, "Could not get client hello version\n");
49         return -1;
50     }
51     if ((client_protocol_version = s2n_connection_get_client_protocol_version(conn)) < 0) {
52         fprintf(stderr, "Could not get client protocol version\n");
53         return -1;
54     }
55     if ((server_protocol_version = s2n_connection_get_server_protocol_version(conn)) < 0) {
56         fprintf(stderr, "Could not get server protocol version\n");
57         return -1;
58     }
59     if ((actual_protocol_version = s2n_connection_get_actual_protocol_version(conn)) < 0) {
60         fprintf(stderr, "Could not get actual protocol version\n");
61         return -1;
62     }
63     printf("Client hello version: %d\n", client_hello_version);
64     printf("Client protocol version: %d\n", client_protocol_version);
65     printf("Server protocol version: %d\n", server_protocol_version);
66     printf("Actual protocol version: %d\n", actual_protocol_version);
67 
68     if (s2n_get_server_name(conn)) {
69         printf("Server name: %s\n", s2n_get_server_name(conn));
70     }
71 
72     if (s2n_get_application_protocol(conn)) {
73         printf("Application protocol: %s\n", s2n_get_application_protocol(conn));
74     }
75 
76     uint32_t length;
77     const uint8_t *status = s2n_connection_get_ocsp_response(conn, &length);
78     if (status && length > 0) {
79         fprintf(stderr, "OCSP response received, length %d\n", length);
80     }
81 
82     printf("Cipher negotiated: %s\n", s2n_connection_get_cipher(conn));
83 
84     return 0;
85 }
.fi
.SS "int main (int argc, char *const * argv)"

.PP
Definition at line 57 of file s2nc\&.c\&.
.PP
.nf
58 {
59     struct addrinfo hints, *ai_list, *ai;
60     int r, sockfd = 0;
61     /* Optional args */
62     const char *alpn_protocols = NULL;
63     const char *server_name = NULL;
64     s2n_status_request_type type = S2N_STATUS_REQUEST_NONE;
65     /* required args */
66     const char *host = NULL;
67     const char *port = "443";
68 
69     static struct option long_options[] = {
70         {"alpn", required_argument, 0, 'a'},
71         {"help", no_argument, 0, 'h'},
72         {"name", required_argument, 0, 'n'},
73         {"status", no_argument, 0, 's'},
74 
75     };
76     while (1) {
77         int option_index = 0;
78         int c = getopt_long(argc, argv, "a:hn:s", long_options, &option_index);
79         if (c == -1) {
80             break;
81         }
82         switch (c) {
83         case 'a':
84             alpn_protocols = optarg;
85             break;
86         case 'h':
87             usage();
88             break;
89         case 'n':
90             server_name = optarg;
91             break;
92         case 's':
93             type = S2N_STATUS_REQUEST_OCSP;
94             break;
95         case '?':
96         default:
97             usage();
98             break;
99         }
100     }
101 
102     if (optind < argc) {
103         host = argv[optind++];
104     }
105     if (optind < argc) {
106         port = argv[optind++];
107     }
108 
109     if (!host) {
110         usage();
111     }
112 
113     if (!server_name) {
114         server_name = host;
115     }
116 
117     memset(&hints, 0, sizeof(hints));
118 
119     hints\&.ai_family = AF_UNSPEC;
120     hints\&.ai_socktype = SOCK_STREAM;
121 
122     if (signal(SIGPIPE, SIG_IGN) == SIG_ERR) {
123         fprintf(stderr, "Error disabling SIGPIPE\n");
124         exit(1);
125     }
126 
127     if ((r = getaddrinfo(host, port, &hints, &ai_list)) != 0) {
128         fprintf(stderr, "error: %s\n", gai_strerror(r));
129         exit(1);
130     }
131 
132     int connected = 0;
133     for (ai = ai_list; ai != NULL; ai = ai->ai_next) {
134         if ((sockfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {
135             continue;
136         }
137 
138         if (connect(sockfd, ai->ai_addr, ai->ai_addrlen) == -1) {
139             close(sockfd);
140             continue;
141         }
142 
143         connected = 1;
144         /* connect() succeeded */
145         break;
146     }
147 
148     freeaddrinfo(ai_list);
149 
150     if (connected == 0) {
151         fprintf(stderr, "Failed to connect to %s:%s\n", argv[1], port);
152         close(sockfd);
153         exit(1);
154     }
155 
156     if (s2n_init() < 0) {
157         fprintf(stderr, "Error running s2n_init(): '%s'\n", s2n_strerror(s2n_errno, "EN"));
158     }
159 
160     struct s2n_config *config = s2n_config_new();
161     if (config == NULL) {
162         fprintf(stderr, "Error getting new config: '%s'\n", s2n_strerror(s2n_errno, "EN"));
163         exit(1);
164     }
165 
166     if (s2n_config_set_status_request_type(config, type) < 0) {
167         fprintf(stderr, "Error setting status request type: '%s'\n", s2n_strerror(s2n_errno, "EN"));
168         exit(1);
169     }
170 
171     if (alpn_protocols) {
172         /* Count the number of commas, this tells us how many protocols there
173            are in the list */
174         const char *ptr = alpn_protocols;
175         int protocol_count = 1;
176         while (*ptr) {
177             if (*ptr == ',') {
178                 protocol_count++;
179             }
180             ptr++;
181         }
182 
183         char **protocols = malloc(sizeof(char *) * protocol_count);
184         if (!protocols) {
185             fprintf(stderr, "Error allocating memory\n");
186             exit(1);
187         }
188 
189         const char *next = alpn_protocols;
190         int index = 0;
191         int length = 0;
192         ptr = alpn_protocols;
193         while (*ptr) {
194             if (*ptr == ',') {
195                 protocols[index] = malloc(length + 1);
196                 if (!protocols[index]) {
197                     fprintf(stderr, "Error allocating memory\n");
198                     exit(1);
199                 }
200                 memcpy(protocols[index], next, length);
201                 protocols[index][length] = '\0';
202                 length = 0;
203                 index++;
204                 ptr++;
205                 next = ptr;
206             } else {
207                 length++;
208                 ptr++;
209             }
210         }
211         if (ptr != next) {
212             protocols[index] = malloc(length + 1);
213             if (!protocols[index]) {
214                 fprintf(stderr, "Error allocating memory\n");
215                 exit(1);
216             }
217             memcpy(protocols[index], next, length);
218             protocols[index][length] = '\0';
219         }
220         if (s2n_config_set_protocol_preferences(config, (const char *const *)protocols, protocol_count) < 0) {
221             fprintf(stderr, "Failed to set protocol preferences: '%s'\n", s2n_strerror(s2n_errno, "EN"));
222             exit(1);
223         }
224         while (protocol_count) {
225             protocol_count--;
226             free(protocols[protocol_count]);
227         }
228         free(protocols);
229     }
230 
231     struct s2n_connection *conn = s2n_connection_new(S2N_CLIENT);
232 
233     if (conn == NULL) {
234         fprintf(stderr, "Error getting new connection: '%s'\n", s2n_strerror(s2n_errno, "EN"));
235         exit(1);
236     }
237 
238     if (s2n_connection_set_config(conn, config) < 0) {
239         fprintf(stderr, "Error setting configuration: '%s'\n", s2n_strerror(s2n_errno, "EN"));
240         exit(1);
241     }
242 
243     if (s2n_set_server_name(conn, server_name) < 0) {
244         fprintf(stderr, "Error setting server name: '%s'\n", s2n_strerror(s2n_errno, "EN"));
245         exit(1);
246     }
247 
248     if (s2n_connection_set_fd(conn, sockfd) < 0) {
249         fprintf(stderr, "Error setting file descriptor: '%s'\n", s2n_strerror(s2n_errno, "EN"));
250         exit(1);
251     }
252 
253     /* See echo\&.c */
254     negotiate(conn);
255 
256     printf("Connected to %s:%s\n", host, port);
257 
258     echo(conn, sockfd);
259 
260     s2n_blocked_status blocked;
261     if (s2n_shutdown(conn, &blocked) < 0) {
262         fprintf(stderr, "Error calling s2n_shutdown: '%s'\n", s2n_strerror(s2n_errno, "EN"));
263         exit(1);
264     }
265 
266     if (s2n_connection_free(conn) < 0) {
267         fprintf(stderr, "Error freeing connection: '%s'\n", s2n_strerror(s2n_errno, "EN"));
268         exit(1);
269     }
270 
271     if (s2n_config_free(config) < 0) {
272         fprintf(stderr, "Error freeing configuration: '%s'\n", s2n_strerror(s2n_errno, "EN"));
273         exit(1);
274     }
275 
276     if (s2n_cleanup() < 0) {
277         fprintf(stderr, "Error running s2n_cleanup(): '%s'\n", s2n_strerror(s2n_errno, "EN"));
278     }
279 
280     return 0;
281 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
