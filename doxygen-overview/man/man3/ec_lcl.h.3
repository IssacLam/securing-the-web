.TH "s2n-master/libcrypto-build/openssl/crypto/ec/ec_lcl.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/crypto/ec/ec_lcl.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <openssl/obj_mac\&.h>\fP
.br
\fC#include <openssl/ec\&.h>\fP
.br
\fC#include <openssl/bn\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBec_method_st\fP"
.br
.ti -1c
.RI "struct \fBec_extra_data_st\fP"
.br
.ti -1c
.RI "struct \fBec_group_st\fP"
.br
.ti -1c
.RI "struct \fBec_key_st\fP"
.br
.ti -1c
.RI "struct \fBec_point_st\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEC_FLAGS_DEFAULT_OCT\fP   0x1"
.br
.ti -1c
.RI "#define \fBEC_GROUP_ASN1_FLAG_MASK\fP   0x7fffffff"
.br
.ti -1c
.RI "#define \fBEC_GROUP_VERSION\fP(\fBp\fP)   (\fBp\fP\->asn1_flag&~\fBEC_GROUP_ASN1_FLAG_MASK\fP)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBec_extra_data_st\fP \fBEC_EXTRA_DATA\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBEC_EX_DATA_set_data\fP (\fBEC_EXTRA_DATA\fP **, \fBvoid\fP *data, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEC_EX_DATA_get_data\fP (const \fBEC_EXTRA_DATA\fP *, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_EX_DATA_free_data\fP (\fBEC_EXTRA_DATA\fP **, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_EX_DATA_clear_free_data\fP (\fBEC_EXTRA_DATA\fP **, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_EX_DATA_free_all_data\fP (\fBEC_EXTRA_DATA\fP **)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_EX_DATA_clear_free_all_data\fP (\fBEC_EXTRA_DATA\fP **)"
.br
.ti -1c
.RI "int \fBec_wNAF_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_wNAF_precompute_mult\fP (\fBEC_GROUP\fP *group, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_wNAF_have_precompute_mult\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_group_init\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_simple_group_finish\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_simple_group_clear_finish\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_group_copy\fP (\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_group_set_curve\fP (\fBEC_GROUP\fP *, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_group_get_curve\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_group_get_degree\fP (const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_group_check_discriminant\fP (const \fBEC_GROUP\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_point_init\fP (\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_simple_point_finish\fP (\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_simple_point_clear_finish\fP (\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_point_copy\fP (\fBEC_POINT\fP *, const \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_point_set_to_infinity\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_set_Jprojective_coordinates_GFp\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, const \fBBIGNUM\fP *z, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_get_Jprojective_coordinates_GFp\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBIGNUM\fP *z, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_point_set_affine_coordinates\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_point_get_affine_coordinates\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_set_compressed_coordinates\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, int y_bit, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "size_t \fBec_GFp_simple_point2oct\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP \fBform\fP, unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_oct2point\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_add\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_dbl\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_invert\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_is_at_infinity\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_is_on_curve\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_cmp\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_make_affine\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_points_make_affine\fP (const \fBEC_GROUP\fP *, size_t \fBnum\fP, \fBEC_POINT\fP *[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_field_mul\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_simple_field_sqr\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_group_init\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_group_set_curve\fP (\fBEC_GROUP\fP *, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_mont_group_finish\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_mont_group_clear_finish\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_group_copy\fP (\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_field_mul\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_field_sqr\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_field_encode\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_field_decode\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_mont_field_set_to_one\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nist_group_copy\fP (\fBEC_GROUP\fP *dest, const \fBEC_GROUP\fP *src)"
.br
.ti -1c
.RI "int \fBec_GFp_nist_group_set_curve\fP (\fBEC_GROUP\fP *, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nist_field_mul\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nist_field_sqr\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_group_init\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GF2m_simple_group_finish\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GF2m_simple_group_clear_finish\fP (\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_group_copy\fP (\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_group_set_curve\fP (\fBEC_GROUP\fP *, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_group_get_curve\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_group_get_degree\fP (const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_group_check_discriminant\fP (const \fBEC_GROUP\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_point_init\fP (\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GF2m_simple_point_finish\fP (\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GF2m_simple_point_clear_finish\fP (\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_point_copy\fP (\fBEC_POINT\fP *, const \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_point_set_to_infinity\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_point_set_affine_coordinates\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_point_get_affine_coordinates\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_set_compressed_coordinates\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, int y_bit, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "size_t \fBec_GF2m_simple_point2oct\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP \fBform\fP, unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_oct2point\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_add\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_dbl\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_invert\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_is_at_infinity\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_is_on_curve\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_cmp\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_make_affine\fP (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_points_make_affine\fP (const \fBEC_GROUP\fP *, size_t \fBnum\fP, \fBEC_POINT\fP *[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_field_mul\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_field_sqr\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_field_div\fP (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_simple_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GF2m_precompute_mult\fP (\fBEC_GROUP\fP *group, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GF2m_have_precompute_mult\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp224_group_init\fP (\fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp224_group_set_curve\fP (\fBEC_GROUP\fP *group, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *n, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp224_point_get_affine_coordinates\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *point, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp224_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp224_points_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp224_precompute_mult\fP (\fBEC_GROUP\fP *group, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp224_have_precompute_mult\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp256_group_init\fP (\fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp256_group_set_curve\fP (\fBEC_GROUP\fP *group, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *n, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp256_point_get_affine_coordinates\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *point, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp256_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp256_points_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp256_precompute_mult\fP (\fBEC_GROUP\fP *group, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp256_have_precompute_mult\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp521_group_init\fP (\fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp521_group_set_curve\fP (\fBEC_GROUP\fP *group, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *n, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp521_point_get_affine_coordinates\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *point, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp521_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp521_points_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp521_precompute_mult\fP (\fBEC_GROUP\fP *group, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBec_GFp_nistp521_have_precompute_mult\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_nistp_points_make_affine_internal\fP (size_t \fBnum\fP, \fBvoid\fP *point_array, size_t felem_size, \fBvoid\fP *tmp_felems, \fBvoid\fP(*felem_one)(\fBvoid\fP *out), int(*felem_is_zero)(const \fBvoid\fP                                                                                                                                                                                                                                                                       *in), \fBvoid\fP(*felem_assign)(\fBvoid\fP *out,                                                                                                                                                                                                                                                                       const \fBvoid\fP                                                                                                                                                                                                                                                                       *in), \fBvoid\fP(*felem_square)(\fBvoid\fP *out,                                                                                                                                                                                                                                                                       const \fBvoid\fP                                                                                                                                                                                                                                                                       *in), \fBvoid\fP(*felem_mul)(\fBvoid\fP *out,                                                                                                                                                                                                                                                           const \fBvoid\fP                                                                                                                                                                                                                                                           *in1,                                                                                                                                                                                                                                                           const \fBvoid\fP                                                                                                                                                                                                                                                           *in2), \fBvoid\fP(*felem_inv)(\fBvoid\fP *out,                                                                                                                                                                                                                                                           const \fBvoid\fP                                                                                                                                                                                                                                                           *in), \fBvoid\fP(*felem_contract)(\fBvoid\fP                                                                                                                                                                                                                                                                               *out,                                                                                                                                                                                                                                                                               const                                                                                                                                                                                                                                                                                  \fBvoid\fP                                                                                                                                                                                                                                                                               *in))"
.br
.ti -1c
.RI "\fBvoid\fP \fBec_GFp_nistp_recode_scalar_bits\fP (unsigned char *sign, unsigned char *digit, unsigned char in)"
.br
.ti -1c
.RI "int \fBec_precompute_mont_data\fP (\fBEC_GROUP\fP *)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define EC_FLAGS_DEFAULT_OCT   0x1"

.PP
Definition at line 85 of file ec_lcl\&.h\&.
.SS "#define EC_GROUP_ASN1_FLAG_MASK   0x7fffffff"

.PP
Definition at line 220 of file ec_lcl\&.h\&.
.SS "#define EC_GROUP_VERSION(\fBp\fP)   (\fBp\fP\->asn1_flag&~\fBEC_GROUP_ASN1_FLAG_MASK\fP)"

.PP
Definition at line 221 of file ec_lcl\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBec_extra_data_st\fP  \fBEC_EXTRA_DATA\fP"

.SH "Function Documentation"
.PP 
.SS "int EC_EX_DATA_set_data (\fBEC_EXTRA_DATA\fP **, \fBvoid\fP * data, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"

.SS "\fBvoid\fP* EC_EX_DATA_get_data (const \fBEC_EXTRA_DATA\fP *, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"

.SS "\fBvoid\fP EC_EX_DATA_free_data (\fBEC_EXTRA_DATA\fP **, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"

.SS "\fBvoid\fP EC_EX_DATA_clear_free_data (\fBEC_EXTRA_DATA\fP **, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"

.SS "\fBvoid\fP EC_EX_DATA_free_all_data (\fBEC_EXTRA_DATA\fP **)"

.SS "\fBvoid\fP EC_EX_DATA_clear_free_all_data (\fBEC_EXTRA_DATA\fP **)"

.SS "int ec_wNAF_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP *)"

.SS "int ec_wNAF_precompute_mult (\fBEC_GROUP\fP * group, \fBBN_CTX\fP *)"

.SS "int ec_wNAF_have_precompute_mult (const \fBEC_GROUP\fP * group)"

.SS "int ec_GFp_simple_group_init (\fBEC_GROUP\fP *)"

.SS "\fBvoid\fP ec_GFp_simple_group_finish (\fBEC_GROUP\fP *)"

.SS "\fBvoid\fP ec_GFp_simple_group_clear_finish (\fBEC_GROUP\fP *)"

.SS "int ec_GFp_simple_group_copy (\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"

.SS "int ec_GFp_simple_group_set_curve (\fBEC_GROUP\fP *, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_group_get_curve (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * p, \fBBIGNUM\fP * a, \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_group_get_degree (const \fBEC_GROUP\fP *)"

.SS "int ec_GFp_simple_group_check_discriminant (const \fBEC_GROUP\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_point_init (\fBEC_POINT\fP *)"

.SS "\fBvoid\fP ec_GFp_simple_point_finish (\fBEC_POINT\fP *)"

.SS "\fBvoid\fP ec_GFp_simple_point_clear_finish (\fBEC_POINT\fP *)"

.SS "int ec_GFp_simple_point_copy (\fBEC_POINT\fP *, const \fBEC_POINT\fP *)"

.SS "int ec_GFp_simple_point_set_to_infinity (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *)"

.SS "int ec_GFp_simple_set_Jprojective_coordinates_GFp (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP * x, const \fBBIGNUM\fP * y, const \fBBIGNUM\fP * z, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_get_Jprojective_coordinates_GFp (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBIGNUM\fP * z, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_point_set_affine_coordinates (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP * x, const \fBBIGNUM\fP * y, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_point_get_affine_coordinates (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_set_compressed_coordinates (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP * x, int y_bit, \fBBN_CTX\fP *)"

.SS "size_t ec_GFp_simple_point2oct (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP form, unsigned char * buf, size_t len, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_oct2point (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const unsigned char * buf, size_t len, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_add (const \fBEC_GROUP\fP *, \fBEC_POINT\fP * r, const \fBEC_POINT\fP * a, const \fBEC_POINT\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_dbl (const \fBEC_GROUP\fP *, \fBEC_POINT\fP * r, const \fBEC_POINT\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_invert (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_is_at_infinity (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *)"

.SS "int ec_GFp_simple_is_on_curve (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_cmp (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP * a, const \fBEC_POINT\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_make_affine (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_points_make_affine (const \fBEC_GROUP\fP *, size_t num, \fBEC_POINT\fP *[], \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_field_mul (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_simple_field_sqr (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GFp_mont_group_init (\fBEC_GROUP\fP *)"

.SS "int ec_GFp_mont_group_set_curve (\fBEC_GROUP\fP *, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "\fBvoid\fP ec_GFp_mont_group_finish (\fBEC_GROUP\fP *)"

.SS "\fBvoid\fP ec_GFp_mont_group_clear_finish (\fBEC_GROUP\fP *)"

.SS "int ec_GFp_mont_group_copy (\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"

.SS "int ec_GFp_mont_field_mul (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_mont_field_sqr (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GFp_mont_field_encode (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GFp_mont_field_decode (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GFp_mont_field_set_to_one (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, \fBBN_CTX\fP *)"

.SS "int ec_GFp_nist_group_copy (\fBEC_GROUP\fP * dest, const \fBEC_GROUP\fP * src)"

.SS "int ec_GFp_nist_group_set_curve (\fBEC_GROUP\fP *, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_nist_field_mul (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GFp_nist_field_sqr (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_group_init (\fBEC_GROUP\fP *)"

.SS "\fBvoid\fP ec_GF2m_simple_group_finish (\fBEC_GROUP\fP *)"

.SS "\fBvoid\fP ec_GF2m_simple_group_clear_finish (\fBEC_GROUP\fP *)"

.SS "int ec_GF2m_simple_group_copy (\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"

.SS "int ec_GF2m_simple_group_set_curve (\fBEC_GROUP\fP *, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_group_get_curve (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * p, \fBBIGNUM\fP * a, \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_group_get_degree (const \fBEC_GROUP\fP *)"

.SS "int ec_GF2m_simple_group_check_discriminant (const \fBEC_GROUP\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_point_init (\fBEC_POINT\fP *)"

.SS "\fBvoid\fP ec_GF2m_simple_point_finish (\fBEC_POINT\fP *)"

.SS "\fBvoid\fP ec_GF2m_simple_point_clear_finish (\fBEC_POINT\fP *)"

.SS "int ec_GF2m_simple_point_copy (\fBEC_POINT\fP *, const \fBEC_POINT\fP *)"

.SS "int ec_GF2m_simple_point_set_to_infinity (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *)"

.SS "int ec_GF2m_simple_point_set_affine_coordinates (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP * x, const \fBBIGNUM\fP * y, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_point_get_affine_coordinates (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_set_compressed_coordinates (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP * x, int y_bit, \fBBN_CTX\fP *)"

.SS "size_t ec_GF2m_simple_point2oct (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP form, unsigned char * buf, size_t len, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_oct2point (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const unsigned char * buf, size_t len, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_add (const \fBEC_GROUP\fP *, \fBEC_POINT\fP * r, const \fBEC_POINT\fP * a, const \fBEC_POINT\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_dbl (const \fBEC_GROUP\fP *, \fBEC_POINT\fP * r, const \fBEC_POINT\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_invert (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_is_at_infinity (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *)"

.SS "int ec_GF2m_simple_is_on_curve (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_cmp (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP * a, const \fBEC_POINT\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_make_affine (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_points_make_affine (const \fBEC_GROUP\fP *, size_t num, \fBEC_POINT\fP *[], \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_field_mul (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_field_sqr (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_field_div (const \fBEC_GROUP\fP *, \fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP *)"

.SS "int ec_GF2m_simple_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP *)"

.SS "int ec_GF2m_precompute_mult (\fBEC_GROUP\fP * group, \fBBN_CTX\fP * ctx)"

.SS "int ec_GF2m_have_precompute_mult (const \fBEC_GROUP\fP * group)"

.SS "int ec_GFp_nistp224_group_init (\fBEC_GROUP\fP * group)"

.SS "int ec_GFp_nistp224_group_set_curve (\fBEC_GROUP\fP * group, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * n, \fBBN_CTX\fP *)"

.SS "int ec_GFp_nistp224_point_get_affine_coordinates (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * point, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp224_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP *)"

.SS "int ec_GFp_nistp224_points_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp224_precompute_mult (\fBEC_GROUP\fP * group, \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp224_have_precompute_mult (const \fBEC_GROUP\fP * group)"

.SS "int ec_GFp_nistp256_group_init (\fBEC_GROUP\fP * group)"

.SS "int ec_GFp_nistp256_group_set_curve (\fBEC_GROUP\fP * group, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * n, \fBBN_CTX\fP *)"

.SS "int ec_GFp_nistp256_point_get_affine_coordinates (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * point, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp256_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP *)"

.SS "int ec_GFp_nistp256_points_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp256_precompute_mult (\fBEC_GROUP\fP * group, \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp256_have_precompute_mult (const \fBEC_GROUP\fP * group)"

.SS "int ec_GFp_nistp521_group_init (\fBEC_GROUP\fP * group)"

.SS "int ec_GFp_nistp521_group_set_curve (\fBEC_GROUP\fP * group, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * n, \fBBN_CTX\fP *)"

.SS "int ec_GFp_nistp521_point_get_affine_coordinates (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * point, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp521_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP *)"

.SS "int ec_GFp_nistp521_points_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * scalar, size_t num, const \fBEC_POINT\fP * points[], const \fBBIGNUM\fP * scalars[], \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp521_precompute_mult (\fBEC_GROUP\fP * group, \fBBN_CTX\fP * ctx)"

.SS "int ec_GFp_nistp521_have_precompute_mult (const \fBEC_GROUP\fP * group)"

.SS "\fBvoid\fP ec_GFp_nistp_points_make_affine_internal (size_t num, \fBvoid\fP * point_array, size_t felem_size, \fBvoid\fP * tmp_felems, \fBvoid\fP(*)(\fBvoid\fP *out) felem_one, int(*)(const \fBvoid\fin) felem_is_zero, \fBvoid\fP(*)(\fBvoid\fP *out,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   const \fBvoid\fin) felem_assign, \fBvoid\fP(*)(\fBvoid\fP *outconst \fBvoid\fin) felem_square, \fBvoid\fP(*)(\fBvoid\fP *outconst \fBvoid\finconst \fBvoid\fin2) felem_mul, \fBvoid\fP(*)(\fBvoid\fP *outconst \fBvoid\fin) felem_inv, \fBvoid\fP(*)(\fBvoid\foutconstfBvoid\fin) felem_contract)"

.SS "\fBvoid\fP ec_GFp_nistp_recode_scalar_bits (unsigned char * sign, unsigned char * digit, unsigned char in)"

.SS "int ec_precompute_mont_data (\fBEC_GROUP\fP *)"

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
