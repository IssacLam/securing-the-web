.TH "s2n-master/libcrypto-build/openssl/include/openssl/evp.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/include/openssl/evp.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/opensslconf\&.h>\fP
.br
\fC#include <openssl/ossl_typ\&.h>\fP
.br
\fC#include <openssl/symhacks\&.h>\fP
.br
\fC#include <openssl/bio\&.h>\fP
.br
\fC#include <openssl/objects\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBevp_pkey_st\fP"
.br
.ti -1c
.RI "struct \fBenv_md_st\fP"
.br
.ti -1c
.RI "struct \fBenv_md_ctx_st\fP"
.br
.ti -1c
.RI "struct \fBevp_cipher_st\fP"
.br
.ti -1c
.RI "struct \fBEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM\fP"
.br
.ti -1c
.RI "struct \fBevp_cipher_info_st\fP"
.br
.ti -1c
.RI "struct \fBevp_cipher_ctx_st\fP"
.br
.ti -1c
.RI "struct \fBevp_Encode_Ctx_st\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBOPENSSL_ALGORITHM_DEFINES\fP"
.br
.ti -1c
.RI "#define \fBEVP_MAX_MD_SIZE\fP   64/* longest known is \fBSHA512\fP */"
.br
.ti -1c
.RI "#define \fBEVP_MAX_KEY_LENGTH\fP   64"
.br
.ti -1c
.RI "#define \fBEVP_MAX_IV_LENGTH\fP   16"
.br
.ti -1c
.RI "#define \fBEVP_MAX_BLOCK_LENGTH\fP   32"
.br
.ti -1c
.RI "#define \fBPKCS5_SALT_LEN\fP   8"
.br
.ti -1c
.RI "#define \fBPKCS5_DEFAULT_ITER\fP   2048"
.br
.ti -1c
.RI "#define \fBEVP_PK_RSA\fP   0x0001"
.br
.ti -1c
.RI "#define \fBEVP_PK_DSA\fP   0x0002"
.br
.ti -1c
.RI "#define \fBEVP_PK_DH\fP   0x0004"
.br
.ti -1c
.RI "#define \fBEVP_PK_EC\fP   0x0008"
.br
.ti -1c
.RI "#define \fBEVP_PKT_SIGN\fP   0x0010"
.br
.ti -1c
.RI "#define \fBEVP_PKT_ENC\fP   0x0020"
.br
.ti -1c
.RI "#define \fBEVP_PKT_EXCH\fP   0x0040"
.br
.ti -1c
.RI "#define \fBEVP_PKS_RSA\fP   0x0100"
.br
.ti -1c
.RI "#define \fBEVP_PKS_DSA\fP   0x0200"
.br
.ti -1c
.RI "#define \fBEVP_PKS_EC\fP   0x0400"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_NONE\fP   \fBNID_undef\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_RSA\fP   \fBNID_rsaEncryption\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_RSA2\fP   \fBNID_rsa\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DSA\fP   \fBNID_dsa\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DSA1\fP   \fBNID_dsa_2\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DSA2\fP   \fBNID_dsaWithSHA\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DSA3\fP   \fBNID_dsaWithSHA1\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DSA4\fP   \fBNID_dsaWithSHA1_2\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DH\fP   \fBNID_dhKeyAgreement\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DHX\fP   \fBNID_dhpublicnumber\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_EC\fP   \fBNID_X9_62_id_ecPublicKey\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_HMAC\fP   \fBNID_hmac\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CMAC\fP   \fBNID_cmac\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_MO_SIGN\fP   0x0001"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_MO_VERIFY\fP   0x0002"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_MO_ENCRYPT\fP   0x0004"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_MO_DECRYPT\fP   0x0008"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_ONESHOT\fP   0x0001"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_PKEY_DIGEST\fP   0x0002"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_PKEY_METHOD_SIGNATURE\fP   0x0004"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_DIGALGID_MASK\fP   0x0018"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_DIGALGID_NULL\fP   0x0000"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_DIGALGID_ABSENT\fP   0x0008"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_DIGALGID_CUSTOM\fP   0x0018"
.br
.ti -1c
.RI "#define \fBEVP_MD_FLAG_FIPS\fP   0x0400"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTRL_DIGALGID\fP   0x1"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTRL_MICALG\fP   0x2"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTRL_ALG_CTRL\fP   0x1000"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_NULL_method\fP   NULL,NULL,{0,0,0,0}"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_DSA_method\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_ECDSA_method\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_RSA_method\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_RSA_ASN1_OCTET_STRING_method\fP"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_ONESHOT\fP"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_CLEANED\fP"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_REUSE\fP"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_NON_FIPS_ALLOW\fP"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_PAD_MASK\fP   0xF0/* RSA mode to use */"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_PAD_PKCS1\fP   0x00/* PKCS#1 v1\&.5 mode */"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_PAD_X931\fP   0x10/* X9\&.31 mode */"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_PAD_PSS\fP   0x20/* PSS mode */"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_FLAG_NO_INIT\fP   0x0100/* Don't initialize md_data */"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_STREAM_CIPHER\fP   0x0"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_ECB_MODE\fP   0x1"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CBC_MODE\fP   0x2"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CFB_MODE\fP   0x3"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_OFB_MODE\fP   0x4"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CTR_MODE\fP   0x5"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_GCM_MODE\fP   0x6"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CCM_MODE\fP   0x7"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_XTS_MODE\fP   0x10001"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_WRAP_MODE\fP   0x10002"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_MODE\fP   0xF0007"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_VARIABLE_LENGTH\fP   0x8"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CUSTOM_IV\fP   0x10"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_ALWAYS_CALL_INIT\fP   0x20"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CTRL_INIT\fP   0x40"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CUSTOM_KEY_LENGTH\fP   0x80"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_NO_PADDING\fP   0x100"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_RAND_KEY\fP   0x200"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_CUSTOM_COPY\fP   0x400"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_FLAG_DEFAULT_ASN1\fP   0x1000"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_FLAG_LENGTH_BITS\fP   0x2000"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_FLAG_FIPS\fP   0x4000"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_FLAG_NON_FIPS_ALLOW\fP   0x8000"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_FLAG_CUSTOM_CIPHER\fP   0x100000"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_FLAG_AEAD_CIPHER\fP   0x200000"
.br
.ti -1c
.RI "#define \fBEVP_CIPH_FLAG_TLS1_1_MULTIBLOCK\fP   0x400000"
.br
.ti -1c
.RI "#define \fBEVP_CIPHER_CTX_FLAG_WRAP_ALLOW\fP   0x1"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_INIT\fP   0x0"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_SET_KEY_LENGTH\fP   0x1"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GET_RC2_KEY_BITS\fP   0x2"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_SET_RC2_KEY_BITS\fP   0x3"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GET_RC5_ROUNDS\fP   0x4"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_SET_RC5_ROUNDS\fP   0x5"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_RAND_KEY\fP   0x6"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_PBE_PRF_NID\fP   0x7"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_COPY\fP   0x8"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GCM_SET_IVLEN\fP   0x9"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GCM_GET_TAG\fP   0x10"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GCM_SET_TAG\fP   0x11"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GCM_SET_IV_FIXED\fP   0x12"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GCM_IV_GEN\fP   0x13"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_CCM_SET_IVLEN\fP   \fBEVP_CTRL_GCM_SET_IVLEN\fP"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_CCM_GET_TAG\fP   \fBEVP_CTRL_GCM_GET_TAG\fP"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_CCM_SET_TAG\fP   \fBEVP_CTRL_GCM_SET_TAG\fP"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_CCM_SET_L\fP   0x14"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_CCM_SET_MSGLEN\fP   0x15"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_AEAD_TLS1_AAD\fP   0x16"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_AEAD_SET_MAC_KEY\fP   0x17"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_GCM_SET_IV_INV\fP   0x18"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_TLS1_1_MULTIBLOCK_AAD\fP   0x19"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT\fP   0x1a"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT\fP   0x1b"
.br
.ti -1c
.RI "#define \fBEVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE\fP   0x1c"
.br
.ti -1c
.RI "#define \fBEVP_AEAD_TLS1_AAD_LEN\fP   13"
.br
.ti -1c
.RI "#define \fBEVP_GCM_TLS_FIXED_IV_LEN\fP   4"
.br
.ti -1c
.RI "#define \fBEVP_GCM_TLS_EXPLICIT_IV_LEN\fP   8"
.br
.ti -1c
.RI "#define \fBEVP_GCM_TLS_TAG_LEN\fP   16"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_assign_RSA\fP(pkey,  rsa)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_assign_DSA\fP(pkey,  dsa)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_assign_DH\fP(pkey,  dh)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_assign_EC_KEY\fP(pkey,  eckey)"
.br
.ti -1c
.RI "#define \fBEVP_get_digestbynid\fP(\fBa\fP)   \fBEVP_get_digestbyname\fP(\fBOBJ_nid2sn\fP(\fBa\fP))"
.br
.ti -1c
.RI "#define \fBEVP_get_digestbyobj\fP(\fBa\fP)   \fBEVP_get_digestbynid\fP(\fBOBJ_obj2nid\fP(\fBa\fP))"
.br
.ti -1c
.RI "#define \fBEVP_get_cipherbynid\fP(\fBa\fP)   \fBEVP_get_cipherbyname\fP(\fBOBJ_nid2sn\fP(\fBa\fP))"
.br
.ti -1c
.RI "#define \fBEVP_get_cipherbyobj\fP(\fBa\fP)   \fBEVP_get_cipherbynid\fP(\fBOBJ_obj2nid\fP(\fBa\fP))"
.br
.ti -1c
.RI "#define \fBEVP_MD_nid\fP(\fBe\fP)                                     \fBEVP_MD_type\fP(\fBe\fP)"
.br
.ti -1c
.RI "#define \fBEVP_MD_name\fP(\fBe\fP)                                   \fBOBJ_nid2sn\fP(\fBEVP_MD_nid\fP(\fBe\fP))"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_size\fP(\fBe\fP)                           \fBEVP_MD_size\fP(\fBEVP_MD_CTX_md\fP(\fBe\fP))"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_block_size\fP(\fBe\fP)               \fBEVP_MD_block_size\fP(\fBEVP_MD_CTX_md\fP(\fBe\fP))"
.br
.ti -1c
.RI "#define \fBEVP_MD_CTX_type\fP(\fBe\fP)                           \fBEVP_MD_type\fP(\fBEVP_MD_CTX_md\fP(\fBe\fP))"
.br
.ti -1c
.RI "#define \fBEVP_CIPHER_name\fP(\fBe\fP)                           \fBOBJ_nid2sn\fP(\fBEVP_CIPHER_nid\fP(\fBe\fP))"
.br
.ti -1c
.RI "#define \fBEVP_CIPHER_mode\fP(\fBe\fP)                           (\fBEVP_CIPHER_flags\fP(\fBe\fP) & \fBEVP_CIPH_MODE\fP)"
.br
.ti -1c
.RI "#define \fBEVP_CIPHER_CTX_type\fP(\fBc\fP)                 \fBEVP_CIPHER_type\fP(\fBEVP_CIPHER_CTX_cipher\fP(\fBc\fP))"
.br
.ti -1c
.RI "#define \fBEVP_CIPHER_CTX_mode\fP(\fBe\fP)                   (\fBEVP_CIPHER_CTX_flags\fP(\fBe\fP) & \fBEVP_CIPH_MODE\fP)"
.br
.ti -1c
.RI "#define \fBEVP_ENCODE_LENGTH\fP(l)       (((l+2)/3*4)+(l/48+1)*2+80)"
.br
.ti -1c
.RI "#define \fBEVP_DECODE_LENGTH\fP(l)       ((l+3)/4*3+80)"
.br
.ti -1c
.RI "#define \fBEVP_SignInit_ex\fP(\fBa\fP,  b,  \fBc\fP)                   \fBEVP_DigestInit_ex\fP(\fBa\fP,b,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBEVP_SignInit\fP(\fBa\fP,  b)                             \fBEVP_DigestInit\fP(\fBa\fP,b)"
.br
.ti -1c
.RI "#define \fBEVP_SignUpdate\fP(\fBa\fP,  b,  \fBc\fP)                     \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBEVP_VerifyInit_ex\fP(\fBa\fP,  b,  \fBc\fP)               \fBEVP_DigestInit_ex\fP(\fBa\fP,b,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBEVP_VerifyInit\fP(\fBa\fP,  b)                         \fBEVP_DigestInit\fP(\fBa\fP,b)"
.br
.ti -1c
.RI "#define \fBEVP_VerifyUpdate\fP(\fBa\fP,  b,  \fBc\fP)                 \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBEVP_OpenUpdate\fP(\fBa\fP,  b,  \fBc\fP,  d,  \fBe\fP)             \fBEVP_DecryptUpdate\fP(\fBa\fP,b,\fBc\fP,d,\fBe\fP)"
.br
.ti -1c
.RI "#define \fBEVP_SealUpdate\fP(\fBa\fP,  b,  \fBc\fP,  d,  \fBe\fP)             \fBEVP_EncryptUpdate\fP(\fBa\fP,b,\fBc\fP,d,\fBe\fP)"
.br
.ti -1c
.RI "#define \fBEVP_DigestSignUpdate\fP(\fBa\fP,  b,  \fBc\fP)         \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBEVP_DigestVerifyUpdate\fP(\fBa\fP,  b,  \fBc\fP)     \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBBIO_set_md\fP(b,  md)                             \fBBIO_ctrl\fP(b,\fBBIO_C_SET_MD\fP,0,(char *)md)"
.br
.ti -1c
.RI "#define \fBBIO_get_md\fP(b,  mdp)                             \fBBIO_ctrl\fP(b,\fBBIO_C_GET_MD\fP,0,(char *)mdp)"
.br
.ti -1c
.RI "#define \fBBIO_get_md_ctx\fP(b,  mdcp)         \fBBIO_ctrl\fP(b,\fBBIO_C_GET_MD_CTX\fP,0,(char *)mdcp)"
.br
.ti -1c
.RI "#define \fBBIO_set_md_ctx\fP(b,  mdcp)         \fBBIO_ctrl\fP(b,\fBBIO_C_SET_MD_CTX\fP,0,(char *)mdcp)"
.br
.ti -1c
.RI "#define \fBBIO_get_cipher_status\fP(b)               \fBBIO_ctrl\fP(b,\fBBIO_C_GET_CIPHER_STATUS\fP,0,NULL)"
.br
.ti -1c
.RI "#define \fBBIO_get_cipher_ctx\fP(b,  c_pp)           \fBBIO_ctrl\fP(b,\fBBIO_C_GET_CIPHER_CTX\fP,0,(char *)c_pp)"
.br
.ti -1c
.RI "#define \fBEVP_add_cipher_alias\fP(n,  alias)   \fBOBJ_NAME_add\fP((alias),\fBOBJ_NAME_TYPE_CIPHER_METH\fP|\fBOBJ_NAME_ALIAS\fP,(n))"
.br
.ti -1c
.RI "#define \fBEVP_add_digest_alias\fP(n,  alias)   \fBOBJ_NAME_add\fP((alias),\fBOBJ_NAME_TYPE_MD_METH\fP|\fBOBJ_NAME_ALIAS\fP,(n))"
.br
.ti -1c
.RI "#define \fBEVP_delete_cipher_alias\fP(alias)   \fBOBJ_NAME_remove\fP(alias,\fBOBJ_NAME_TYPE_CIPHER_METH\fP|\fBOBJ_NAME_ALIAS\fP);"
.br
.ti -1c
.RI "#define \fBEVP_delete_digest_alias\fP(alias)   \fBOBJ_NAME_remove\fP(alias,\fBOBJ_NAME_TYPE_MD_METH\fP|\fBOBJ_NAME_ALIAS\fP);"
.br
.ti -1c
.RI "#define \fBEVP_des_cfb\fP   \fBEVP_des_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_des_ede_cfb\fP   \fBEVP_des_ede_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_des_ede3_cfb\fP   \fBEVP_des_ede3_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_idea_cfb\fP   \fBEVP_idea_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_rc2_cfb\fP   \fBEVP_rc2_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_bf_cfb\fP   \fBEVP_bf_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_cast5_cfb\fP   \fBEVP_cast5_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_rc5_32_12_16_cfb\fP   \fBEVP_rc5_32_12_16_cfb64\fP"
.br
.ti -1c
.RI "#define \fBEVP_aes_128_cfb\fP   \fBEVP_aes_128_cfb128\fP"
.br
.ti -1c
.RI "#define \fBEVP_aes_192_cfb\fP   \fBEVP_aes_192_cfb128\fP"
.br
.ti -1c
.RI "#define \fBEVP_aes_256_cfb\fP   \fBEVP_aes_256_cfb128\fP"
.br
.ti -1c
.RI "#define \fBEVP_camellia_128_cfb\fP   \fBEVP_camellia_128_cfb128\fP"
.br
.ti -1c
.RI "#define \fBEVP_camellia_192_cfb\fP   \fBEVP_camellia_192_cfb128\fP"
.br
.ti -1c
.RI "#define \fBEVP_camellia_256_cfb\fP   \fBEVP_camellia_256_cfb128\fP"
.br
.ti -1c
.RI "#define \fBEVP_seed_cfb\fP   \fBEVP_seed_cfb128\fP"
.br
.ti -1c
.RI "#define \fBOpenSSL_add_all_algorithms\fP()   \fBOPENSSL_add_all_algorithms_noconf\fP()"
.br
.ti -1c
.RI "#define \fBSSLeay_add_all_algorithms\fP()   \fBOpenSSL_add_all_algorithms\fP()"
.br
.ti -1c
.RI "#define \fBSSLeay_add_all_ciphers\fP()   \fBOpenSSL_add_all_ciphers\fP()"
.br
.ti -1c
.RI "#define \fBSSLeay_add_all_digests\fP()   \fBOpenSSL_add_all_digests\fP()"
.br
.ti -1c
.RI "#define \fBEVP_PBE_TYPE_OUTER\fP   0x0"
.br
.ti -1c
.RI "#define \fBEVP_PBE_TYPE_PRF\fP   0x1"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_ALIAS\fP   0x1"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_DYNAMIC\fP   0x2"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_SIGPARAM_NULL\fP   0x4"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_CTRL_PKCS7_SIGN\fP   0x1"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_CTRL_PKCS7_ENCRYPT\fP   0x2"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_CTRL_DEFAULT_MD_NID\fP   0x3"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_CTRL_CMS_SIGN\fP   0x5"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_CTRL_CMS_ENVELOPE\fP   0x7"
.br
.ti -1c
.RI "#define \fBASN1_PKEY_CTRL_CMS_RI_TYPE\fP   0x8"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_UNDEFINED\fP   0"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_PARAMGEN\fP   (1<<1)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_KEYGEN\fP   (1<<2)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_SIGN\fP   (1<<3)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_VERIFY\fP   (1<<4)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_VERIFYRECOVER\fP   (1<<5)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_SIGNCTX\fP   (1<<6)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_VERIFYCTX\fP   (1<<7)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_ENCRYPT\fP   (1<<8)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_DECRYPT\fP   (1<<9)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_DERIVE\fP   (1<<10)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_TYPE_SIG\fP"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_TYPE_CRYPT\fP   (\fBEVP_PKEY_OP_ENCRYPT\fP | \fBEVP_PKEY_OP_DECRYPT\fP)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_TYPE_NOGEN\fP   (EVP_PKEY_OP_SIG | EVP_PKEY_OP_CRYPT | \fBEVP_PKEY_OP_DERIVE\fP)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_OP_TYPE_GEN\fP   (\fBEVP_PKEY_OP_PARAMGEN\fP | \fBEVP_PKEY_OP_KEYGEN\fP)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set_signature_md\fP(ctx,  md)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_get_signature_md\fP(ctx,  pmd)            "
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_MD\fP   1"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_PEER_KEY\fP   2"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_PKCS7_ENCRYPT\fP   3"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_PKCS7_DECRYPT\fP   4"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_PKCS7_SIGN\fP   5"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_SET_MAC_KEY\fP   6"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_DIGESTINIT\fP   7"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_SET_IV\fP   8"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_CMS_ENCRYPT\fP   9"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_CMS_DECRYPT\fP   10"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_CMS_SIGN\fP   11"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_CIPHER\fP   12"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_GET_MD\fP   13"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_ALG_CTRL\fP   0x1000"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_FLAG_AUTOARGLEN\fP   2"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_FLAG_SIGCTX_CUSTOM\fP   4"
.br
.ti -1c
.RI "#define \fBEVP_F_AESNI_INIT_KEY\fP   165"
.br
.ti -1c
.RI "#define \fBEVP_F_AESNI_XTS_CIPHER\fP   176"
.br
.ti -1c
.RI "#define \fBEVP_F_AES_INIT_KEY\fP   133"
.br
.ti -1c
.RI "#define \fBEVP_F_AES_T4_INIT_KEY\fP   178"
.br
.ti -1c
.RI "#define \fBEVP_F_AES_XTS\fP   172"
.br
.ti -1c
.RI "#define \fBEVP_F_AES_XTS_CIPHER\fP   175"
.br
.ti -1c
.RI "#define \fBEVP_F_ALG_MODULE_INIT\fP   177"
.br
.ti -1c
.RI "#define \fBEVP_F_CAMELLIA_INIT_KEY\fP   159"
.br
.ti -1c
.RI "#define \fBEVP_F_CMAC_INIT\fP   173"
.br
.ti -1c
.RI "#define \fBEVP_F_CMLL_T4_INIT_KEY\fP   179"
.br
.ti -1c
.RI "#define \fBEVP_F_D2I_PKEY\fP   100"
.br
.ti -1c
.RI "#define \fBEVP_F_DO_SIGVER_INIT\fP   161"
.br
.ti -1c
.RI "#define \fBEVP_F_DSAPKEY2PKCS8\fP   134"
.br
.ti -1c
.RI "#define \fBEVP_F_DSA_PKEY2PKCS8\fP   135"
.br
.ti -1c
.RI "#define \fBEVP_F_ECDSA_PKEY2PKCS8\fP   129"
.br
.ti -1c
.RI "#define \fBEVP_F_ECKEY_PKEY2PKCS8\fP   132"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_CIPHERINIT_EX\fP   123"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_CIPHER_CTX_COPY\fP   163"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_CIPHER_CTX_CTRL\fP   124"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH\fP   122"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_DECRYPTFINAL_EX\fP   101"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_DIGESTINIT_EX\fP   128"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_ENCRYPTFINAL_EX\fP   127"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_MD_CTX_COPY_EX\fP   110"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_MD_SIZE\fP   162"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_OPENINIT\fP   102"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PBE_ALG_ADD\fP   115"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PBE_ALG_ADD_TYPE\fP   160"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PBE_CIPHERINIT\fP   116"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKCS82PKEY\fP   111"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKCS82PKEY_BROKEN\fP   136"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY2PKCS8_BROKEN\fP   113"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_COPY_PARAMETERS\fP   103"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_CTX_CTRL\fP   137"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_CTX_CTRL_STR\fP   150"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_CTX_DUP\fP   156"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_DECRYPT\fP   104"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_DECRYPT_INIT\fP   138"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_DECRYPT_OLD\fP   151"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_DERIVE\fP   153"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_DERIVE_INIT\fP   154"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_DERIVE_SET_PEER\fP   155"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_ENCRYPT\fP   105"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_ENCRYPT_INIT\fP   139"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_ENCRYPT_OLD\fP   152"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_GET1_DH\fP   119"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_GET1_DSA\fP   120"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_GET1_ECDSA\fP   130"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_GET1_EC_KEY\fP   131"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_GET1_RSA\fP   121"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_KEYGEN\fP   146"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_KEYGEN_INIT\fP   147"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_NEW\fP   106"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_PARAMGEN\fP   148"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_PARAMGEN_INIT\fP   149"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_SIGN\fP   140"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_SIGN_INIT\fP   141"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_VERIFY\fP   142"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_VERIFY_INIT\fP   143"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_VERIFY_RECOVER\fP   144"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_PKEY_VERIFY_RECOVER_INIT\fP   145"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_RIJNDAEL\fP   126"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_SIGNFINAL\fP   107"
.br
.ti -1c
.RI "#define \fBEVP_F_EVP_VERIFYFINAL\fP   108"
.br
.ti -1c
.RI "#define \fBEVP_F_FIPS_CIPHERINIT\fP   166"
.br
.ti -1c
.RI "#define \fBEVP_F_FIPS_CIPHER_CTX_COPY\fP   170"
.br
.ti -1c
.RI "#define \fBEVP_F_FIPS_CIPHER_CTX_CTRL\fP   167"
.br
.ti -1c
.RI "#define \fBEVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH\fP   171"
.br
.ti -1c
.RI "#define \fBEVP_F_FIPS_DIGESTINIT\fP   168"
.br
.ti -1c
.RI "#define \fBEVP_F_FIPS_MD_CTX_COPY\fP   169"
.br
.ti -1c
.RI "#define \fBEVP_F_HMAC_INIT_EX\fP   174"
.br
.ti -1c
.RI "#define \fBEVP_F_INT_CTX_NEW\fP   157"
.br
.ti -1c
.RI "#define \fBEVP_F_PKCS5_PBE_KEYIVGEN\fP   117"
.br
.ti -1c
.RI "#define \fBEVP_F_PKCS5_V2_PBE_KEYIVGEN\fP   118"
.br
.ti -1c
.RI "#define \fBEVP_F_PKCS5_V2_PBKDF2_KEYIVGEN\fP   164"
.br
.ti -1c
.RI "#define \fBEVP_F_PKCS8_SET_BROKEN\fP   112"
.br
.ti -1c
.RI "#define \fBEVP_F_PKEY_SET_TYPE\fP   158"
.br
.ti -1c
.RI "#define \fBEVP_F_RC2_MAGIC_TO_METH\fP   109"
.br
.ti -1c
.RI "#define \fBEVP_F_RC5_CTRL\fP   125"
.br
.ti -1c
.RI "#define \fBEVP_R_AES_IV_SETUP_FAILED\fP   162"
.br
.ti -1c
.RI "#define \fBEVP_R_AES_KEY_SETUP_FAILED\fP   143"
.br
.ti -1c
.RI "#define \fBEVP_R_ASN1_LIB\fP   140"
.br
.ti -1c
.RI "#define \fBEVP_R_BAD_BLOCK_LENGTH\fP   136"
.br
.ti -1c
.RI "#define \fBEVP_R_BAD_DECRYPT\fP   100"
.br
.ti -1c
.RI "#define \fBEVP_R_BAD_KEY_LENGTH\fP   137"
.br
.ti -1c
.RI "#define \fBEVP_R_BN_DECODE_ERROR\fP   112"
.br
.ti -1c
.RI "#define \fBEVP_R_BN_PUBKEY_ERROR\fP   113"
.br
.ti -1c
.RI "#define \fBEVP_R_BUFFER_TOO_SMALL\fP   155"
.br
.ti -1c
.RI "#define \fBEVP_R_CAMELLIA_KEY_SETUP_FAILED\fP   157"
.br
.ti -1c
.RI "#define \fBEVP_R_CIPHER_PARAMETER_ERROR\fP   122"
.br
.ti -1c
.RI "#define \fBEVP_R_COMMAND_NOT_SUPPORTED\fP   147"
.br
.ti -1c
.RI "#define \fBEVP_R_CTRL_NOT_IMPLEMENTED\fP   132"
.br
.ti -1c
.RI "#define \fBEVP_R_CTRL_OPERATION_NOT_IMPLEMENTED\fP   133"
.br
.ti -1c
.RI "#define \fBEVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH\fP   138"
.br
.ti -1c
.RI "#define \fBEVP_R_DECODE_ERROR\fP   114"
.br
.ti -1c
.RI "#define \fBEVP_R_DIFFERENT_KEY_TYPES\fP   101"
.br
.ti -1c
.RI "#define \fBEVP_R_DIFFERENT_PARAMETERS\fP   153"
.br
.ti -1c
.RI "#define \fBEVP_R_DISABLED_FOR_FIPS\fP   163"
.br
.ti -1c
.RI "#define \fBEVP_R_ENCODE_ERROR\fP   115"
.br
.ti -1c
.RI "#define \fBEVP_R_ERROR_LOADING_SECTION\fP   165"
.br
.ti -1c
.RI "#define \fBEVP_R_ERROR_SETTING_FIPS_MODE\fP   166"
.br
.ti -1c
.RI "#define \fBEVP_R_EVP_PBE_CIPHERINIT_ERROR\fP   119"
.br
.ti -1c
.RI "#define \fBEVP_R_EXPECTING_AN_RSA_KEY\fP   127"
.br
.ti -1c
.RI "#define \fBEVP_R_EXPECTING_A_DH_KEY\fP   128"
.br
.ti -1c
.RI "#define \fBEVP_R_EXPECTING_A_DSA_KEY\fP   129"
.br
.ti -1c
.RI "#define \fBEVP_R_EXPECTING_A_ECDSA_KEY\fP   141"
.br
.ti -1c
.RI "#define \fBEVP_R_EXPECTING_A_EC_KEY\fP   142"
.br
.ti -1c
.RI "#define \fBEVP_R_FIPS_MODE_NOT_SUPPORTED\fP   167"
.br
.ti -1c
.RI "#define \fBEVP_R_INITIALIZATION_ERROR\fP   134"
.br
.ti -1c
.RI "#define \fBEVP_R_INPUT_NOT_INITIALIZED\fP   111"
.br
.ti -1c
.RI "#define \fBEVP_R_INVALID_DIGEST\fP   152"
.br
.ti -1c
.RI "#define \fBEVP_R_INVALID_FIPS_MODE\fP   168"
.br
.ti -1c
.RI "#define \fBEVP_R_INVALID_KEY_LENGTH\fP   130"
.br
.ti -1c
.RI "#define \fBEVP_R_INVALID_OPERATION\fP   148"
.br
.ti -1c
.RI "#define \fBEVP_R_IV_TOO_LARGE\fP   102"
.br
.ti -1c
.RI "#define \fBEVP_R_KEYGEN_FAILURE\fP   120"
.br
.ti -1c
.RI "#define \fBEVP_R_MESSAGE_DIGEST_IS_NULL\fP   159"
.br
.ti -1c
.RI "#define \fBEVP_R_METHOD_NOT_SUPPORTED\fP   144"
.br
.ti -1c
.RI "#define \fBEVP_R_MISSING_PARAMETERS\fP   103"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_CIPHER_SET\fP   131"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_DEFAULT_DIGEST\fP   158"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_DIGEST_SET\fP   139"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_DSA_PARAMETERS\fP   116"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_KEY_SET\fP   154"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_OPERATION_SET\fP   149"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_SIGN_FUNCTION_CONFIGURED\fP   104"
.br
.ti -1c
.RI "#define \fBEVP_R_NO_VERIFY_FUNCTION_CONFIGURED\fP   105"
.br
.ti -1c
.RI "#define \fBEVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE\fP   150"
.br
.ti -1c
.RI "#define \fBEVP_R_OPERATON_NOT_INITIALIZED\fP   151"
.br
.ti -1c
.RI "#define \fBEVP_R_PKCS8_UNKNOWN_BROKEN_TYPE\fP   117"
.br
.ti -1c
.RI "#define \fBEVP_R_PRIVATE_KEY_DECODE_ERROR\fP   145"
.br
.ti -1c
.RI "#define \fBEVP_R_PRIVATE_KEY_ENCODE_ERROR\fP   146"
.br
.ti -1c
.RI "#define \fBEVP_R_PUBLIC_KEY_NOT_RSA\fP   106"
.br
.ti -1c
.RI "#define \fBEVP_R_TOO_LARGE\fP   164"
.br
.ti -1c
.RI "#define \fBEVP_R_UNKNOWN_CIPHER\fP   160"
.br
.ti -1c
.RI "#define \fBEVP_R_UNKNOWN_DIGEST\fP   161"
.br
.ti -1c
.RI "#define \fBEVP_R_UNKNOWN_OPTION\fP   169"
.br
.ti -1c
.RI "#define \fBEVP_R_UNKNOWN_PBE_ALGORITHM\fP   121"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPORTED_NUMBER_OF_ROUNDS\fP   135"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_ALGORITHM\fP   156"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_CIPHER\fP   107"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_KEYLENGTH\fP   123"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION\fP   124"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_KEY_SIZE\fP   108"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_PRF\fP   125"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM\fP   118"
.br
.ti -1c
.RI "#define \fBEVP_R_UNSUPPORTED_SALT_TYPE\fP   126"
.br
.ti -1c
.RI "#define \fBEVP_R_WRAP_MODE_NOT_ALLOWED\fP   170"
.br
.ti -1c
.RI "#define \fBEVP_R_WRONG_FINAL_BLOCK_LENGTH\fP   109"
.br
.ti -1c
.RI "#define \fBEVP_R_WRONG_PUBLIC_KEY_TYPE\fP   110"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int \fBevp_sign_method\fP(int \fBtype\fP, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, \fBvoid\fP *key)"
.br
.ti -1c
.RI "typedef int \fBevp_verify_method\fP(int \fBtype\fP, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, \fBvoid\fP *key)"
.br
.ti -1c
.RI "typedef struct \fBevp_cipher_info_st\fP \fBEVP_CIPHER_INFO\fP"
.br
.ti -1c
.RI "typedef struct \fBevp_Encode_Ctx_st\fP \fBEVP_ENCODE_CTX\fP"
.br
.ti -1c
.RI "typedef int( \fBEVP_PBE_KEYGEN\fP) (\fBEVP_CIPHER_CTX\fP *ctx, const char *\fBpass\fP, int \fBpasslen\fP, \fBASN1_TYPE\fP *param, const \fBEVP_CIPHER\fP *cipher, const \fBEVP_MD\fP *md, int en_de)"
.br
.ti -1c
.RI "typedef int \fBEVP_PKEY_gen_cb\fP(\fBEVP_PKEY_CTX\fP *ctx)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBEVP_MD_type\fP (const \fBEVP_MD\fP *md)"
.br
.ti -1c
.RI "int \fBEVP_MD_pkey_type\fP (const \fBEVP_MD\fP *md)"
.br
.ti -1c
.RI "int \fBEVP_MD_size\fP (const \fBEVP_MD\fP *md)"
.br
.ti -1c
.RI "int \fBEVP_MD_block_size\fP (const \fBEVP_MD\fP *md)"
.br
.ti -1c
.RI "unsigned long \fBEVP_MD_flags\fP (const \fBEVP_MD\fP *md)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_MD_CTX_md\fP (const \fBEVP_MD_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_nid\fP (const \fBEVP_CIPHER\fP *cipher)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_block_size\fP (const \fBEVP_CIPHER\fP *cipher)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_key_length\fP (const \fBEVP_CIPHER\fP *cipher)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_iv_length\fP (const \fBEVP_CIPHER\fP *cipher)"
.br
.ti -1c
.RI "unsigned long \fBEVP_CIPHER_flags\fP (const \fBEVP_CIPHER\fP *cipher)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_CIPHER_CTX_cipher\fP (const \fBEVP_CIPHER_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_nid\fP (const \fBEVP_CIPHER_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_block_size\fP (const \fBEVP_CIPHER_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_key_length\fP (const \fBEVP_CIPHER_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_iv_length\fP (const \fBEVP_CIPHER_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_copy\fP (\fBEVP_CIPHER_CTX\fP *out, const \fBEVP_CIPHER_CTX\fP *in)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEVP_CIPHER_CTX_get_app_data\fP (const \fBEVP_CIPHER_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_CIPHER_CTX_set_app_data\fP (\fBEVP_CIPHER_CTX\fP *ctx, \fBvoid\fP *data)"
.br
.ti -1c
.RI "unsigned long \fBEVP_CIPHER_CTX_flags\fP (const \fBEVP_CIPHER_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_Cipher\fP (\fBEVP_CIPHER_CTX\fP *\fBc\fP, unsigned char *out, const unsigned char *in, unsigned int inl)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_MD_CTX_init\fP (\fBEVP_MD_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_MD_CTX_cleanup\fP (\fBEVP_MD_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBEVP_MD_CTX\fP * \fBEVP_MD_CTX_create\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_MD_CTX_destroy\fP (\fBEVP_MD_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_MD_CTX_copy_ex\fP (\fBEVP_MD_CTX\fP *out, const \fBEVP_MD_CTX\fP *in)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_MD_CTX_set_flags\fP (\fBEVP_MD_CTX\fP *ctx, int \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_MD_CTX_clear_flags\fP (\fBEVP_MD_CTX\fP *ctx, int \fBflags\fP)"
.br
.ti -1c
.RI "int \fBEVP_MD_CTX_test_flags\fP (const \fBEVP_MD_CTX\fP *ctx, int \fBflags\fP)"
.br
.ti -1c
.RI "int \fBEVP_DigestInit_ex\fP (\fBEVP_MD_CTX\fP *ctx, const \fBEVP_MD\fP *\fBtype\fP, \fBENGINE\fP *impl)"
.br
.ti -1c
.RI "int \fBEVP_DigestUpdate\fP (\fBEVP_MD_CTX\fP *ctx, const \fBvoid\fP *d, size_t cnt)"
.br
.ti -1c
.RI "int \fBEVP_DigestFinal_ex\fP (\fBEVP_MD_CTX\fP *ctx, unsigned char *md, unsigned int *s)"
.br
.ti -1c
.RI "int \fBEVP_Digest\fP (const \fBvoid\fP *data, size_t count, unsigned char *md, unsigned int *size, const \fBEVP_MD\fP *\fBtype\fP, \fBENGINE\fP *impl)"
.br
.ti -1c
.RI "int \fBEVP_MD_CTX_copy\fP (\fBEVP_MD_CTX\fP *out, const \fBEVP_MD_CTX\fP *in)"
.br
.ti -1c
.RI "int \fBEVP_DigestInit\fP (\fBEVP_MD_CTX\fP *ctx, const \fBEVP_MD\fP *\fBtype\fP)"
.br
.ti -1c
.RI "int \fBEVP_DigestFinal\fP (\fBEVP_MD_CTX\fP *ctx, unsigned char *md, unsigned int *s)"
.br
.ti -1c
.RI "int \fBEVP_read_pw_string\fP (char *buf, int \fBlength\fP, const char *prompt, int verify)"
.br
.ti -1c
.RI "int \fBEVP_read_pw_string_min\fP (char *buf, int minlen, int maxlen, const char *prompt, int verify)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_set_pw_prompt\fP (const char *prompt)"
.br
.ti -1c
.RI "char * \fBEVP_get_pw_prompt\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBEVP_BytesToKey\fP (const \fBEVP_CIPHER\fP *\fBtype\fP, const \fBEVP_MD\fP *md, const unsigned char *salt, const unsigned char *data, int datal, int count, unsigned char *key, unsigned char *iv)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_CIPHER_CTX_set_flags\fP (\fBEVP_CIPHER_CTX\fP *ctx, int \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_CIPHER_CTX_clear_flags\fP (\fBEVP_CIPHER_CTX\fP *ctx, int \fBflags\fP)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_test_flags\fP (const \fBEVP_CIPHER_CTX\fP *ctx, int \fBflags\fP)"
.br
.ti -1c
.RI "int \fBEVP_EncryptInit\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *cipher, const unsigned char *key, const unsigned char *iv)"
.br
.ti -1c
.RI "int \fBEVP_EncryptInit_ex\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *cipher, \fBENGINE\fP *impl, const unsigned char *key, const unsigned char *iv)"
.br
.ti -1c
.RI "int \fBEVP_EncryptUpdate\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
.br
.ti -1c
.RI "int \fBEVP_EncryptFinal_ex\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *out, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_EncryptFinal\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *out, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_DecryptInit\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *cipher, const unsigned char *key, const unsigned char *iv)"
.br
.ti -1c
.RI "int \fBEVP_DecryptInit_ex\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *cipher, \fBENGINE\fP *impl, const unsigned char *key, const unsigned char *iv)"
.br
.ti -1c
.RI "int \fBEVP_DecryptUpdate\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
.br
.ti -1c
.RI "int \fBEVP_DecryptFinal\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *outm, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_DecryptFinal_ex\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *outm, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_CipherInit\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *cipher, const unsigned char *key, const unsigned char *iv, int enc)"
.br
.ti -1c
.RI "int \fBEVP_CipherInit_ex\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *cipher, \fBENGINE\fP *impl, const unsigned char *key, const unsigned char *iv, int enc)"
.br
.ti -1c
.RI "int \fBEVP_CipherUpdate\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
.br
.ti -1c
.RI "int \fBEVP_CipherFinal\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *outm, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_CipherFinal_ex\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *outm, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_SignFinal\fP (\fBEVP_MD_CTX\fP *ctx, unsigned char *md, unsigned int *s, \fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_VerifyFinal\fP (\fBEVP_MD_CTX\fP *ctx, const unsigned char *sigbuf, unsigned int siglen, \fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_DigestSignInit\fP (\fBEVP_MD_CTX\fP *ctx, \fBEVP_PKEY_CTX\fP **pctx, const \fBEVP_MD\fP *\fBtype\fP, \fBENGINE\fP *\fBe\fP, \fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_DigestSignFinal\fP (\fBEVP_MD_CTX\fP *ctx, unsigned char *sigret, size_t *siglen)"
.br
.ti -1c
.RI "int \fBEVP_DigestVerifyInit\fP (\fBEVP_MD_CTX\fP *ctx, \fBEVP_PKEY_CTX\fP **pctx, const \fBEVP_MD\fP *\fBtype\fP, \fBENGINE\fP *\fBe\fP, \fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_DigestVerifyFinal\fP (\fBEVP_MD_CTX\fP *ctx, const unsigned char *sig, size_t siglen)"
.br
.ti -1c
.RI "int \fBEVP_OpenInit\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *\fBtype\fP, const unsigned char *ek, int ekl, const unsigned char *iv, \fBEVP_PKEY\fP *priv)"
.br
.ti -1c
.RI "int \fBEVP_OpenFinal\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *out, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_SealInit\fP (\fBEVP_CIPHER_CTX\fP *ctx, const \fBEVP_CIPHER\fP *\fBtype\fP, unsigned char **ek, int *ekl, unsigned char *iv, \fBEVP_PKEY\fP **pubk, int npubk)"
.br
.ti -1c
.RI "int \fBEVP_SealFinal\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *out, int *outl)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_EncodeInit\fP (\fBEVP_ENCODE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_EncodeUpdate\fP (\fBEVP_ENCODE_CTX\fP *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_EncodeFinal\fP (\fBEVP_ENCODE_CTX\fP *ctx, unsigned char *out, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_EncodeBlock\fP (unsigned char *\fBt\fP, const unsigned char *f, int n)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_DecodeInit\fP (\fBEVP_ENCODE_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_DecodeUpdate\fP (\fBEVP_ENCODE_CTX\fP *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
.br
.ti -1c
.RI "int \fBEVP_DecodeFinal\fP (\fBEVP_ENCODE_CTX\fP *ctx, unsigned char *out, int *outl)"
.br
.ti -1c
.RI "int \fBEVP_DecodeBlock\fP (unsigned char *\fBt\fP, const unsigned char *f, int n)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_CIPHER_CTX_init\fP (\fBEVP_CIPHER_CTX\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_cleanup\fP (\fBEVP_CIPHER_CTX\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBEVP_CIPHER_CTX\fP * \fBEVP_CIPHER_CTX_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_CIPHER_CTX_free\fP (\fBEVP_CIPHER_CTX\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_set_key_length\fP (\fBEVP_CIPHER_CTX\fP *\fBx\fP, int keylen)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_set_padding\fP (\fBEVP_CIPHER_CTX\fP *\fBc\fP, int pad)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_ctrl\fP (\fBEVP_CIPHER_CTX\fP *ctx, int \fBtype\fP, int arg, \fBvoid\fP *ptr)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_CTX_rand_key\fP (\fBEVP_CIPHER_CTX\fP *ctx, unsigned char *key)"
.br
.ti -1c
.RI "\fBBIO_METHOD\fP * \fBBIO_f_md\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBBIO_METHOD\fP * \fBBIO_f_base64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBBIO_METHOD\fP * \fBBIO_f_cipher\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBBIO_METHOD\fP * \fBBIO_f_reliable\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBIO_set_cipher\fP (\fBBIO\fP *b, const \fBEVP_CIPHER\fP *\fBc\fP, const unsigned char *k, const unsigned char *i, int enc)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_md_null\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_md2\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_md4\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_md5\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_sha\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_sha1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_dss\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_dss1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_ecdsa\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_sha224\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_sha256\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_sha384\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_sha512\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_mdc2\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_ripemd160\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_whirlpool\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_enc_null\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_desx_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_des_ede3_wrap\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc4\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc4_40\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc4_hmac_md5\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_idea_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_idea_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_idea_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_idea_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc2_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc2_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc2_40_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc2_64_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc2_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc2_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_bf_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_bf_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_bf_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_bf_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_cast5_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_cast5_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_cast5_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_cast5_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc5_32_12_16_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc5_32_12_16_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc5_32_12_16_cfb64\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_rc5_32_12_16_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_cfb128\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_ctr\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_ccm\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_gcm\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_xts\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_wrap\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_cfb128\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_ctr\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_ccm\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_gcm\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_192_wrap\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_cfb128\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_ctr\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_ccm\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_gcm\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_xts\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_wrap\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_cbc_hmac_sha1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_cbc_hmac_sha1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_128_cbc_hmac_sha256\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_aes_256_cbc_hmac_sha256\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_128_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_128_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_128_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_128_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_128_cfb128\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_128_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_192_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_192_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_192_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_192_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_192_cfb128\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_192_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_256_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_256_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_256_cfb1\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_256_cfb8\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_256_cfb128\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_camellia_256_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_seed_ecb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_seed_cbc\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_seed_cfb128\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_seed_ofb\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBOPENSSL_add_all_algorithms_noconf\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBOPENSSL_add_all_algorithms_conf\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBOpenSSL_add_all_ciphers\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBOpenSSL_add_all_digests\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBEVP_add_cipher\fP (const \fBEVP_CIPHER\fP *cipher)"
.br
.ti -1c
.RI "int \fBEVP_add_digest\fP (const \fBEVP_MD\fP *digest)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBEVP_get_cipherbyname\fP (const char *name)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBEVP_get_digestbyname\fP (const char *name)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_cleanup\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_CIPHER_do_all\fP (\fBvoid\fP(*fn)(const \fBEVP_CIPHER\fP *ciph,                                                                                                                                   const char *from, const char *to, \fBvoid\fP *\fBx\fP), \fBvoid\fP *arg)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_CIPHER_do_all_sorted\fP (\fBvoid\fP(*fn)(const \fBEVP_CIPHER\fP *ciph, const char *from,                                                                                                                       const char *to, \fBvoid\fP *\fBx\fP), \fBvoid\fP *arg)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_MD_do_all\fP (\fBvoid\fP(*fn)(const \fBEVP_MD\fP *ciph,                                                                                                                   const char *from, const char *to, \fBvoid\fP *\fBx\fP), \fBvoid\fP *arg)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_MD_do_all_sorted\fP (\fBvoid\fP(*fn)(const \fBEVP_MD\fP *ciph, const char *from,                                                                                                       const char *to, \fBvoid\fP *\fBx\fP), \fBvoid\fP *arg)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_decrypt_old\fP (unsigned char *dec_key, const unsigned char *enc_key, int enc_key_len, \fBEVP_PKEY\fP *private_key)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_encrypt_old\fP (unsigned char *enc_key, const unsigned char *key, int key_len, \fBEVP_PKEY\fP *pub_key)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_type\fP (int \fBtype\fP)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_id\fP (const \fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_base_id\fP (const \fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_bits\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_size\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_set_type\fP (\fBEVP_PKEY\fP *pkey, int \fBtype\fP)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_set_type_str\fP (\fBEVP_PKEY\fP *pkey, const char *str, int \fBlen\fP)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_assign\fP (\fBEVP_PKEY\fP *pkey, int \fBtype\fP, \fBvoid\fP *key)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEVP_PKEY_get0\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_set1_RSA\fP (\fBEVP_PKEY\fP *pkey, struct \fBrsa_st\fP *key)"
.br
.ti -1c
.RI "struct \fBrsa_st\fP * \fBEVP_PKEY_get1_RSA\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_set1_DSA\fP (\fBEVP_PKEY\fP *pkey, struct \fBdsa_st\fP *key)"
.br
.ti -1c
.RI "struct \fBdsa_st\fP * \fBEVP_PKEY_get1_DSA\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_set1_DH\fP (\fBEVP_PKEY\fP *pkey, struct \fBdh_st\fP *key)"
.br
.ti -1c
.RI "struct \fBdh_st\fP * \fBEVP_PKEY_get1_DH\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_set1_EC_KEY\fP (\fBEVP_PKEY\fP *pkey, struct \fBec_key_st\fP *key)"
.br
.ti -1c
.RI "struct \fBec_key_st\fP * \fBEVP_PKEY_get1_EC_KEY\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBEVP_PKEY_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_free\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBd2i_PublicKey\fP (int \fBtype\fP, \fBEVP_PKEY\fP **\fBa\fP, const unsigned char **\fBpp\fP, long \fBlength\fP)"
.br
.ti -1c
.RI "int \fBi2d_PublicKey\fP (\fBEVP_PKEY\fP *\fBa\fP, unsigned char **\fBpp\fP)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBd2i_PrivateKey\fP (int \fBtype\fP, \fBEVP_PKEY\fP **\fBa\fP, const unsigned char **\fBpp\fP, long \fBlength\fP)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBd2i_AutoPrivateKey\fP (\fBEVP_PKEY\fP **\fBa\fP, const unsigned char **\fBpp\fP, long \fBlength\fP)"
.br
.ti -1c
.RI "int \fBi2d_PrivateKey\fP (\fBEVP_PKEY\fP *\fBa\fP, unsigned char **\fBpp\fP)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_copy_parameters\fP (\fBEVP_PKEY\fP *to, const \fBEVP_PKEY\fP *from)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_missing_parameters\fP (const \fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_save_parameters\fP (\fBEVP_PKEY\fP *pkey, int mode)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_cmp_parameters\fP (const \fBEVP_PKEY\fP *\fBa\fP, const \fBEVP_PKEY\fP *b)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_cmp\fP (const \fBEVP_PKEY\fP *\fBa\fP, const \fBEVP_PKEY\fP *b)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_print_public\fP (\fBBIO\fP *out, const \fBEVP_PKEY\fP *pkey, int indent, \fBASN1_PCTX\fP *pctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_print_private\fP (\fBBIO\fP *out, const \fBEVP_PKEY\fP *pkey, int indent, \fBASN1_PCTX\fP *pctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_print_params\fP (\fBBIO\fP *out, const \fBEVP_PKEY\fP *pkey, int indent, \fBASN1_PCTX\fP *pctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_get_default_digest_nid\fP (\fBEVP_PKEY\fP *pkey, int *pnid)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_type\fP (const \fBEVP_CIPHER\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_param_to_asn1\fP (\fBEVP_CIPHER_CTX\fP *\fBc\fP, \fBASN1_TYPE\fP *\fBtype\fP)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_asn1_to_param\fP (\fBEVP_CIPHER_CTX\fP *\fBc\fP, \fBASN1_TYPE\fP *\fBtype\fP)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_set_asn1_iv\fP (\fBEVP_CIPHER_CTX\fP *\fBc\fP, \fBASN1_TYPE\fP *\fBtype\fP)"
.br
.ti -1c
.RI "int \fBEVP_CIPHER_get_asn1_iv\fP (\fBEVP_CIPHER_CTX\fP *\fBc\fP, \fBASN1_TYPE\fP *\fBtype\fP)"
.br
.ti -1c
.RI "int \fBPKCS5_PBE_keyivgen\fP (\fBEVP_CIPHER_CTX\fP *ctx, const char *\fBpass\fP, int \fBpasslen\fP, \fBASN1_TYPE\fP *param, const \fBEVP_CIPHER\fP *cipher, const \fBEVP_MD\fP *md, int en_de)"
.br
.ti -1c
.RI "int \fBPKCS5_PBKDF2_HMAC_SHA1\fP (const char *\fBpass\fP, int \fBpasslen\fP, const unsigned char *salt, int saltlen, int iter, int keylen, unsigned char *out)"
.br
.ti -1c
.RI "int \fBPKCS5_PBKDF2_HMAC\fP (const char *\fBpass\fP, int \fBpasslen\fP, const unsigned char *salt, int saltlen, int iter, const \fBEVP_MD\fP *digest, int keylen, unsigned char *out)"
.br
.ti -1c
.RI "int \fBPKCS5_v2_PBE_keyivgen\fP (\fBEVP_CIPHER_CTX\fP *ctx, const char *\fBpass\fP, int \fBpasslen\fP, \fBASN1_TYPE\fP *param, const \fBEVP_CIPHER\fP *cipher, const \fBEVP_MD\fP *md, int en_de)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPKCS5_PBE_add\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBEVP_PBE_CipherInit\fP (\fBASN1_OBJECT\fP *pbe_obj, const char *\fBpass\fP, int \fBpasslen\fP, \fBASN1_TYPE\fP *param, \fBEVP_CIPHER_CTX\fP *ctx, int en_de)"
.br
.ti -1c
.RI "int \fBEVP_PBE_alg_add_type\fP (int pbe_type, int pbe_nid, int cipher_nid, int md_nid, \fBEVP_PBE_KEYGEN\fP *keygen)"
.br
.ti -1c
.RI "int \fBEVP_PBE_alg_add\fP (int \fBnid\fP, const \fBEVP_CIPHER\fP *cipher, const \fBEVP_MD\fP *md, \fBEVP_PBE_KEYGEN\fP *keygen)"
.br
.ti -1c
.RI "int \fBEVP_PBE_find\fP (int \fBtype\fP, int pbe_nid, int *pcnid, int *pmnid, \fBEVP_PBE_KEYGEN\fP **pkeygen)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PBE_cleanup\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_asn1_get_count\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEVP_PKEY_ASN1_METHOD\fP * \fBEVP_PKEY_asn1_get0\fP (int idx)"
.br
.ti -1c
.RI "const \fBEVP_PKEY_ASN1_METHOD\fP * \fBEVP_PKEY_asn1_find\fP (\fBENGINE\fP **pe, int \fBtype\fP)"
.br
.ti -1c
.RI "const \fBEVP_PKEY_ASN1_METHOD\fP * \fBEVP_PKEY_asn1_find_str\fP (\fBENGINE\fP **pe, const char *str, int \fBlen\fP)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_asn1_add0\fP (const \fBEVP_PKEY_ASN1_METHOD\fP *ameth)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_asn1_add_alias\fP (int to, int from)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_asn1_get0_info\fP (int *ppkey_id, int *pkey_base_id, int *ppkey_flags, const char **pinfo, const char **ppem_str, const \fBEVP_PKEY_ASN1_METHOD\fP *ameth)"
.br
.ti -1c
.RI "const \fBEVP_PKEY_ASN1_METHOD\fP * \fBEVP_PKEY_get0_asn1\fP (\fBEVP_PKEY\fP *pkey)"
.br
.ti -1c
.RI "\fBEVP_PKEY_ASN1_METHOD\fP * \fBEVP_PKEY_asn1_new\fP (int id, int \fBflags\fP, const char *pem_str, const char *info)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_copy\fP (\fBEVP_PKEY_ASN1_METHOD\fP *dst, const \fBEVP_PKEY_ASN1_METHOD\fP *src)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_free\fP (\fBEVP_PKEY_ASN1_METHOD\fP *ameth)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_set_public\fP (\fBEVP_PKEY_ASN1_METHOD\fP *ameth, int(*pub_decode)(\fBEVP_PKEY\fP *pk,                                                                                                                                                                                           \fBX509_PUBKEY\fP *pub), int(*pub_encode)(\fBX509_PUBKEY\fP *pub,                                                                                                                                                                                           const \fBEVP_PKEY\fP *pk), int(*pub_cmp)(const \fBEVP_PKEY\fP *\fBa\fP,                                                                                                                                                                               const \fBEVP_PKEY\fP *b), int(*pub_print)(\fBBIO\fP *out,                                                                                                                                                                                       const \fBEVP_PKEY\fP *pkey,                                                                                                                                                                                       int indent, \fBASN1_PCTX\fP *pctx), int(*pkey_size)(const \fBEVP_PKEY\fP *pk), int(*pkey_bits)(const \fBEVP_PKEY\fP *pk))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_set_private\fP (\fBEVP_PKEY_ASN1_METHOD\fP *ameth, int(*priv_decode)(\fBEVP_PKEY\fP *pk,                                                                                                                                                                                                   \fBPKCS8_PRIV_KEY_INFO\fP                                                                                                                                                                                                   *p8inf), int(*priv_encode)(\fBPKCS8_PRIV_KEY_INFO\fP *p8,                                                                                                                                                                                                   const \fBEVP_PKEY\fP *pk), int(*priv_print)(\fBBIO\fP *out,                                                                                                                                                                                               const \fBEVP_PKEY\fP *pkey,                                                                                                                                                                                               int indent,                                                                                                                                                                                               \fBASN1_PCTX\fP *pctx))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_set_param\fP (\fBEVP_PKEY_ASN1_METHOD\fP *ameth, int(*param_decode)(\fBEVP_PKEY\fP *pkey,                                                                                                                                                                                               const unsigned char **pder,                                                                                                                                                                                               int derlen), int(*param_encode)(const \fBEVP_PKEY\fP *pkey,                                                                                                                                                                                               unsigned char **pder), int(*param_missing)(const \fBEVP_PKEY\fP *pk), int(*param_copy)(\fBEVP_PKEY\fP *to,                                                                                                                                                                                       const \fBEVP_PKEY\fP *from), int(*param_cmp)(const \fBEVP_PKEY\fP *\fBa\fP,                                                                                                                                                                                   const \fBEVP_PKEY\fP *b), int(*param_print)(\fBBIO\fP *out,                                                                                                                                                                                           const \fBEVP_PKEY\fP *pkey,                                                                                                                                                                                           int indent,                                                                                                                                                                                           \fBASN1_PCTX\fP *pctx))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_set_free\fP (\fBEVP_PKEY_ASN1_METHOD\fP *ameth, \fBvoid\fP(*pkey_free)(\fBEVP_PKEY\fP *pkey))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_set_ctrl\fP (\fBEVP_PKEY_ASN1_METHOD\fP *ameth, int(*pkey_ctrl)(\fBEVP_PKEY\fP *pkey, int op,                                                                                                                                                                               long arg1, \fBvoid\fP *arg2))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_asn1_set_item\fP (\fBEVP_PKEY_ASN1_METHOD\fP *ameth, int(*item_verify)(\fBEVP_MD_CTX\fP *ctx,                                                                                                                                                                                       const \fBASN1_ITEM\fP *it,                                                                                                                                                                                       \fBvoid\fP *asn,                                                                                                                                                                                       \fBX509_ALGOR\fP *\fBa\fP,                                                                                                                                                                                       \fBASN1_BIT_STRING\fP *sig,                                                                                                                                                                                       \fBEVP_PKEY\fP *pkey), int(*item_sign)(\fBEVP_MD_CTX\fP *ctx,                                                                                                                                                                               const \fBASN1_ITEM\fP *it,                                                                                                                                                                               \fBvoid\fP *asn,                                                                                                                                                                               \fBX509_ALGOR\fP *alg1,                                                                                                                                                                               \fBX509_ALGOR\fP *alg2,                                                                                                                                                                               \fBASN1_BIT_STRING\fP *sig))"
.br
.ti -1c
.RI "const \fBEVP_PKEY_METHOD\fP * \fBEVP_PKEY_meth_find\fP (int \fBtype\fP)"
.br
.ti -1c
.RI "\fBEVP_PKEY_METHOD\fP * \fBEVP_PKEY_meth_new\fP (int id, int \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_get0_info\fP (int *ppkey_id, int *pflags, const \fBEVP_PKEY_METHOD\fP *meth)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_copy\fP (\fBEVP_PKEY_METHOD\fP *dst, const \fBEVP_PKEY_METHOD\fP *src)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_free\fP (\fBEVP_PKEY_METHOD\fP *pmeth)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_meth_add0\fP (const \fBEVP_PKEY_METHOD\fP *pmeth)"
.br
.ti -1c
.RI "\fBEVP_PKEY_CTX\fP * \fBEVP_PKEY_CTX_new\fP (\fBEVP_PKEY\fP *pkey, \fBENGINE\fP *\fBe\fP)"
.br
.ti -1c
.RI "\fBEVP_PKEY_CTX\fP * \fBEVP_PKEY_CTX_new_id\fP (int id, \fBENGINE\fP *\fBe\fP)"
.br
.ti -1c
.RI "\fBEVP_PKEY_CTX\fP * \fBEVP_PKEY_CTX_dup\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_CTX_free\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_CTX_ctrl\fP (\fBEVP_PKEY_CTX\fP *ctx, int keytype, int optype, int cmd, int p1, \fBvoid\fP *p2)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_CTX_ctrl_str\fP (\fBEVP_PKEY_CTX\fP *ctx, const char *\fBtype\fP, const char *value)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_CTX_get_operation\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_CTX_set0_keygen_info\fP (\fBEVP_PKEY_CTX\fP *ctx, int *dat, int datlen)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBEVP_PKEY_new_mac_key\fP (int \fBtype\fP, \fBENGINE\fP *\fBe\fP, const unsigned char *key, int keylen)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_CTX_set_data\fP (\fBEVP_PKEY_CTX\fP *ctx, \fBvoid\fP *data)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEVP_PKEY_CTX_get_data\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBEVP_PKEY_CTX_get0_pkey\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBEVP_PKEY\fP * \fBEVP_PKEY_CTX_get0_peerkey\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_CTX_set_app_data\fP (\fBEVP_PKEY_CTX\fP *ctx, \fBvoid\fP *data)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEVP_PKEY_CTX_get_app_data\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_sign_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_sign\fP (\fBEVP_PKEY_CTX\fP *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_verify_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_verify\fP (\fBEVP_PKEY_CTX\fP *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_verify_recover_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_verify_recover\fP (\fBEVP_PKEY_CTX\fP *ctx, unsigned char *rout, size_t *routlen, const unsigned char *sig, size_t siglen)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_encrypt_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_encrypt\fP (\fBEVP_PKEY_CTX\fP *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_decrypt_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_decrypt\fP (\fBEVP_PKEY_CTX\fP *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_derive_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_derive_set_peer\fP (\fBEVP_PKEY_CTX\fP *ctx, \fBEVP_PKEY\fP *peer)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_derive\fP (\fBEVP_PKEY_CTX\fP *ctx, unsigned char *key, size_t *keylen)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_paramgen_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_paramgen\fP (\fBEVP_PKEY_CTX\fP *ctx, \fBEVP_PKEY\fP **ppkey)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_keygen_init\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_keygen\fP (\fBEVP_PKEY_CTX\fP *ctx, \fBEVP_PKEY\fP **ppkey)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_CTX_set_cb\fP (\fBEVP_PKEY_CTX\fP *ctx, \fBEVP_PKEY_gen_cb\fP *\fBcb\fP)"
.br
.ti -1c
.RI "\fBEVP_PKEY_gen_cb\fP * \fBEVP_PKEY_CTX_get_cb\fP (\fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEVP_PKEY_CTX_get_keygen_info\fP (\fBEVP_PKEY_CTX\fP *ctx, int idx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_init\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*init)(\fBEVP_PKEY_CTX\fP *ctx))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_copy\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*copy)(\fBEVP_PKEY_CTX\fP *dst,                                                                                                                                                           \fBEVP_PKEY_CTX\fP *src))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_cleanup\fP (\fBEVP_PKEY_METHOD\fP *pmeth, \fBvoid\fP(*cleanup)(\fBEVP_PKEY_CTX\fP *ctx))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_paramgen\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*paramgen_init)(\fBEVP_PKEY_CTX\fP *ctx), int(*paramgen)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                           \fBEVP_PKEY\fP *pkey))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_keygen\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*keygen_init)(\fBEVP_PKEY_CTX\fP *ctx), int(*keygen)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                           \fBEVP_PKEY\fP *pkey))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_sign\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*sign_init)(\fBEVP_PKEY_CTX\fP *ctx), int(*sign)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                           unsigned char *sig, size_t *siglen,                                                                                                                                                           const unsigned char *tbs,                                                                                                                                                           size_t tbslen))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_verify\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*verify_init)(\fBEVP_PKEY_CTX\fP *ctx), int(*verify)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                           const unsigned char *sig,                                                                                                                                                                           size_t siglen,                                                                                                                                                                           const unsigned char *tbs,                                                                                                                                                                           size_t tbslen))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_verify_recover\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*verify_recover_init)(\fBEVP_PKEY_CTX\fP                                                                                                                                                                                                                                                               *ctx), int(*verify_recover)(\fBEVP_PKEY_CTX\fP                                                                                                                                                                                                                                           *ctx,                                                                                                                                                                                                                                           unsigned char                                                                                                                                                                                                                                           *sig,                                                                                                                                                                                                                                           size_t *siglen,                                                                                                                                                                                                                                           const unsigned                                                                                                                                                                                                                                           char *tbs,                                                                                                                                                                                                                                           size_t tbslen))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_signctx\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*signctx_init)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                                       \fBEVP_MD_CTX\fP *mctx), int(*signctx)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                   unsigned char *sig,                                                                                                                                                                                   size_t *siglen,                                                                                                                                                                                   \fBEVP_MD_CTX\fP *mctx))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_verifyctx\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*verifyctx_init)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                                                       \fBEVP_MD_CTX\fP *mctx), int(*verifyctx)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                                   const unsigned char *sig,                                                                                                                                                                                                   int siglen,                                                                                                                                                                                                   \fBEVP_MD_CTX\fP *mctx))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_encrypt\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*encrypt_init)(\fBEVP_PKEY_CTX\fP *ctx), int(*encryptfn)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                           unsigned char *out,                                                                                                                                                                                           size_t *outlen,                                                                                                                                                                                           const unsigned char *in,                                                                                                                                                                                           size_t inlen))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_decrypt\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*decrypt_init)(\fBEVP_PKEY_CTX\fP *ctx), int(*decrypt)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                   unsigned char *out,                                                                                                                                                                                   size_t *outlen,                                                                                                                                                                                   const unsigned char *in,                                                                                                                                                                                   size_t inlen))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_derive\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*derive_init)(\fBEVP_PKEY_CTX\fP *ctx), int(*derive)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                           unsigned char *key,                                                                                                                                                                           size_t *keylen))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_PKEY_meth_set_ctrl\fP (\fBEVP_PKEY_METHOD\fP *pmeth, int(*ctrl)(\fBEVP_PKEY_CTX\fP *ctx, int \fBtype\fP, int p1,                                                                                                                                                           \fBvoid\fP *p2), int(*ctrl_str)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                           const char *\fBtype\fP,                                                                                                                                                                           const char *value))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEVP_add_alg_module\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBERR_load_EVP_strings\fP (\fBvoid\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define OPENSSL_ALGORITHM_DEFINES"

.PP
Definition at line 65 of file evp\&.h\&.
.SS "#define EVP_MAX_MD_SIZE   64/* longest known is \fBSHA512\fP */"

.PP
Definition at line 85 of file evp\&.h\&.
.SS "#define EVP_MAX_KEY_LENGTH   64"

.PP
Definition at line 86 of file evp\&.h\&.
.SS "#define EVP_MAX_IV_LENGTH   16"

.PP
Definition at line 87 of file evp\&.h\&.
.SS "#define EVP_MAX_BLOCK_LENGTH   32"

.PP
Definition at line 88 of file evp\&.h\&.
.SS "#define PKCS5_SALT_LEN   8"

.PP
Definition at line 90 of file evp\&.h\&.
.SS "#define PKCS5_DEFAULT_ITER   2048"

.PP
Definition at line 92 of file evp\&.h\&.
.SS "#define EVP_PK_RSA   0x0001"

.PP
Definition at line 96 of file evp\&.h\&.
.SS "#define EVP_PK_DSA   0x0002"

.PP
Definition at line 97 of file evp\&.h\&.
.SS "#define EVP_PK_DH   0x0004"

.PP
Definition at line 98 of file evp\&.h\&.
.SS "#define EVP_PK_EC   0x0008"

.PP
Definition at line 99 of file evp\&.h\&.
.SS "#define EVP_PKT_SIGN   0x0010"

.PP
Definition at line 100 of file evp\&.h\&.
.SS "#define EVP_PKT_ENC   0x0020"

.PP
Definition at line 101 of file evp\&.h\&.
.SS "#define EVP_PKT_EXCH   0x0040"

.PP
Definition at line 102 of file evp\&.h\&.
.SS "#define EVP_PKS_RSA   0x0100"

.PP
Definition at line 103 of file evp\&.h\&.
.SS "#define EVP_PKS_DSA   0x0200"

.PP
Definition at line 104 of file evp\&.h\&.
.SS "#define EVP_PKS_EC   0x0400"

.PP
Definition at line 105 of file evp\&.h\&.
.SS "#define EVP_PKEY_NONE   \fBNID_undef\fP"

.PP
Definition at line 107 of file evp\&.h\&.
.SS "#define EVP_PKEY_RSA   \fBNID_rsaEncryption\fP"

.PP
Definition at line 108 of file evp\&.h\&.
.SS "#define EVP_PKEY_RSA2   \fBNID_rsa\fP"

.PP
Definition at line 109 of file evp\&.h\&.
.SS "#define EVP_PKEY_DSA   \fBNID_dsa\fP"

.PP
Definition at line 110 of file evp\&.h\&.
.SS "#define EVP_PKEY_DSA1   \fBNID_dsa_2\fP"

.PP
Definition at line 111 of file evp\&.h\&.
.SS "#define EVP_PKEY_DSA2   \fBNID_dsaWithSHA\fP"

.PP
Definition at line 112 of file evp\&.h\&.
.SS "#define EVP_PKEY_DSA3   \fBNID_dsaWithSHA1\fP"

.PP
Definition at line 113 of file evp\&.h\&.
.SS "#define EVP_PKEY_DSA4   \fBNID_dsaWithSHA1_2\fP"

.PP
Definition at line 114 of file evp\&.h\&.
.SS "#define EVP_PKEY_DH   \fBNID_dhKeyAgreement\fP"

.PP
Definition at line 115 of file evp\&.h\&.
.SS "#define EVP_PKEY_DHX   \fBNID_dhpublicnumber\fP"

.PP
Definition at line 116 of file evp\&.h\&.
.SS "#define EVP_PKEY_EC   \fBNID_X9_62_id_ecPublicKey\fP"

.PP
Definition at line 117 of file evp\&.h\&.
.SS "#define EVP_PKEY_HMAC   \fBNID_hmac\fP"

.PP
Definition at line 118 of file evp\&.h\&.
.SS "#define EVP_PKEY_CMAC   \fBNID_cmac\fP"

.PP
Definition at line 119 of file evp\&.h\&.
.SS "#define EVP_PKEY_MO_SIGN   0x0001"

.PP
Definition at line 154 of file evp\&.h\&.
.SS "#define EVP_PKEY_MO_VERIFY   0x0002"

.PP
Definition at line 155 of file evp\&.h\&.
.SS "#define EVP_PKEY_MO_ENCRYPT   0x0004"

.PP
Definition at line 156 of file evp\&.h\&.
.SS "#define EVP_PKEY_MO_DECRYPT   0x0008"

.PP
Definition at line 157 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_ONESHOT   0x0001"

.PP
Definition at line 192 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_PKEY_DIGEST   0x0002"

.PP
Definition at line 200 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_PKEY_METHOD_SIGNATURE   0x0004"

.PP
Definition at line 204 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_DIGALGID_MASK   0x0018"

.PP
Definition at line 208 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_DIGALGID_NULL   0x0000"

.PP
Definition at line 212 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_DIGALGID_ABSENT   0x0008"

.PP
Definition at line 216 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_DIGALGID_CUSTOM   0x0018"

.PP
Definition at line 220 of file evp\&.h\&.
.SS "#define EVP_MD_FLAG_FIPS   0x0400"

.PP
Definition at line 223 of file evp\&.h\&.
.SS "#define EVP_MD_CTRL_DIGALGID   0x1"

.PP
Definition at line 227 of file evp\&.h\&.
.SS "#define EVP_MD_CTRL_MICALG   0x2"

.PP
Definition at line 228 of file evp\&.h\&.
.SS "#define EVP_MD_CTRL_ALG_CTRL   0x1000"

.PP
Definition at line 232 of file evp\&.h\&.
.SS "#define EVP_PKEY_NULL_method   NULL,NULL,{0,0,0,0}"

.PP
Definition at line 234 of file evp\&.h\&.
.SS "#define EVP_PKEY_DSA_method"
\fBValue:\fP
.PP
.nf
(evp_sign_method *)DSA_sign, \
                                (evp_verify_method *)DSA_verify, \
                                {EVP_PKEY_DSA,EVP_PKEY_DSA2,EVP_PKEY_DSA3, \
                                        EVP_PKEY_DSA4,0}
.fi
.PP
Definition at line 237 of file evp\&.h\&.
.SS "#define EVP_PKEY_ECDSA_method"
\fBValue:\fP
.PP
.nf
(evp_sign_method *)ECDSA_sign, \
                                (evp_verify_method *)ECDSA_verify, \
                                 {EVP_PKEY_EC,0,0,0}
.fi
.PP
Definition at line 246 of file evp\&.h\&.
.SS "#define EVP_PKEY_RSA_method"
\fBValue:\fP
.PP
.nf
(evp_sign_method *)RSA_sign, \
                                (evp_verify_method *)RSA_verify, \
                                {EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}
.fi
.PP
Definition at line 254 of file evp\&.h\&.
.SS "#define EVP_PKEY_RSA_ASN1_OCTET_STRING_method"
\fBValue:\fP
.PP
.nf
(evp_sign_method *)RSA_sign_ASN1_OCTET_STRING, \
                                (evp_verify_method *)RSA_verify_ASN1_OCTET_STRING, \
                                {EVP_PKEY_RSA,EVP_PKEY_RSA2,0,0}
.fi
.PP
Definition at line 257 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_ONESHOT"
\fBValue:\fP
.PP
.nf
0x0001/* digest update will be
                                                * called once only */
.fi
.PP
Definition at line 282 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_CLEANED"
\fBValue:\fP
.PP
.nf
0x0002/* context has already been
                                                * cleaned */
.fi
.PP
Definition at line 284 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_REUSE"
\fBValue:\fP
.PP
.nf
0x0004/* Don't free up ctx->md_data
                                                * in EVP_MD_CTX_cleanup */
.fi
.PP
Definition at line 286 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_NON_FIPS_ALLOW"
\fBValue:\fP
.PP
.nf
0x0008/* Allow use of non FIPS
                                                * digest in FIPS mode */
.fi
.PP
Definition at line 293 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_PAD_MASK   0xF0/* RSA mode to use */"

.PP
Definition at line 301 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_PAD_PKCS1   0x00/* PKCS#1 v1\&.5 mode */"

.PP
Definition at line 302 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_PAD_X931   0x10/* X9\&.31 mode */"

.PP
Definition at line 303 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_PAD_PSS   0x20/* PSS mode */"

.PP
Definition at line 304 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_FLAG_NO_INIT   0x0100/* Don't initialize md_data */"

.PP
Definition at line 306 of file evp\&.h\&.
.SS "#define EVP_CIPH_STREAM_CIPHER   0x0"

.PP
Definition at line 340 of file evp\&.h\&.
.SS "#define EVP_CIPH_ECB_MODE   0x1"

.PP
Definition at line 341 of file evp\&.h\&.
.SS "#define EVP_CIPH_CBC_MODE   0x2"

.PP
Definition at line 342 of file evp\&.h\&.
.SS "#define EVP_CIPH_CFB_MODE   0x3"

.PP
Definition at line 343 of file evp\&.h\&.
.SS "#define EVP_CIPH_OFB_MODE   0x4"

.PP
Definition at line 344 of file evp\&.h\&.
.SS "#define EVP_CIPH_CTR_MODE   0x5"

.PP
Definition at line 345 of file evp\&.h\&.
.SS "#define EVP_CIPH_GCM_MODE   0x6"

.PP
Definition at line 346 of file evp\&.h\&.
.SS "#define EVP_CIPH_CCM_MODE   0x7"

.PP
Definition at line 347 of file evp\&.h\&.
.SS "#define EVP_CIPH_XTS_MODE   0x10001"

.PP
Definition at line 348 of file evp\&.h\&.
.SS "#define EVP_CIPH_WRAP_MODE   0x10002"

.PP
Definition at line 349 of file evp\&.h\&.
.SS "#define EVP_CIPH_MODE   0xF0007"

.PP
Definition at line 350 of file evp\&.h\&.
.SS "#define EVP_CIPH_VARIABLE_LENGTH   0x8"

.PP
Definition at line 352 of file evp\&.h\&.
.SS "#define EVP_CIPH_CUSTOM_IV   0x10"

.PP
Definition at line 354 of file evp\&.h\&.
.SS "#define EVP_CIPH_ALWAYS_CALL_INIT   0x20"

.PP
Definition at line 356 of file evp\&.h\&.
.SS "#define EVP_CIPH_CTRL_INIT   0x40"

.PP
Definition at line 358 of file evp\&.h\&.
.SS "#define EVP_CIPH_CUSTOM_KEY_LENGTH   0x80"

.PP
Definition at line 360 of file evp\&.h\&.
.SS "#define EVP_CIPH_NO_PADDING   0x100"

.PP
Definition at line 362 of file evp\&.h\&.
.SS "#define EVP_CIPH_RAND_KEY   0x200"

.PP
Definition at line 364 of file evp\&.h\&.
.SS "#define EVP_CIPH_CUSTOM_COPY   0x400"

.PP
Definition at line 366 of file evp\&.h\&.
.SS "#define EVP_CIPH_FLAG_DEFAULT_ASN1   0x1000"

.PP
Definition at line 368 of file evp\&.h\&.
.SS "#define EVP_CIPH_FLAG_LENGTH_BITS   0x2000"

.PP
Definition at line 370 of file evp\&.h\&.
.SS "#define EVP_CIPH_FLAG_FIPS   0x4000"

.PP
Definition at line 372 of file evp\&.h\&.
.SS "#define EVP_CIPH_FLAG_NON_FIPS_ALLOW   0x8000"

.PP
Definition at line 374 of file evp\&.h\&.
.SS "#define EVP_CIPH_FLAG_CUSTOM_CIPHER   0x100000"

.PP
Definition at line 378 of file evp\&.h\&.
.SS "#define EVP_CIPH_FLAG_AEAD_CIPHER   0x200000"

.PP
Definition at line 379 of file evp\&.h\&.
.SS "#define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK   0x400000"

.PP
Definition at line 380 of file evp\&.h\&.
.SS "#define EVP_CIPHER_CTX_FLAG_WRAP_ALLOW   0x1"

.PP
Definition at line 387 of file evp\&.h\&.
.SS "#define EVP_CTRL_INIT   0x0"

.PP
Definition at line 391 of file evp\&.h\&.
.SS "#define EVP_CTRL_SET_KEY_LENGTH   0x1"

.PP
Definition at line 392 of file evp\&.h\&.
.SS "#define EVP_CTRL_GET_RC2_KEY_BITS   0x2"

.PP
Definition at line 393 of file evp\&.h\&.
.SS "#define EVP_CTRL_SET_RC2_KEY_BITS   0x3"

.PP
Definition at line 394 of file evp\&.h\&.
.SS "#define EVP_CTRL_GET_RC5_ROUNDS   0x4"

.PP
Definition at line 395 of file evp\&.h\&.
.SS "#define EVP_CTRL_SET_RC5_ROUNDS   0x5"

.PP
Definition at line 396 of file evp\&.h\&.
.SS "#define EVP_CTRL_RAND_KEY   0x6"

.PP
Definition at line 397 of file evp\&.h\&.
.SS "#define EVP_CTRL_PBE_PRF_NID   0x7"

.PP
Definition at line 398 of file evp\&.h\&.
.SS "#define EVP_CTRL_COPY   0x8"

.PP
Definition at line 399 of file evp\&.h\&.
.SS "#define EVP_CTRL_GCM_SET_IVLEN   0x9"

.PP
Definition at line 400 of file evp\&.h\&.
.SS "#define EVP_CTRL_GCM_GET_TAG   0x10"

.PP
Definition at line 401 of file evp\&.h\&.
.SS "#define EVP_CTRL_GCM_SET_TAG   0x11"

.PP
Definition at line 402 of file evp\&.h\&.
.SS "#define EVP_CTRL_GCM_SET_IV_FIXED   0x12"

.PP
Definition at line 403 of file evp\&.h\&.
.SS "#define EVP_CTRL_GCM_IV_GEN   0x13"

.PP
Definition at line 404 of file evp\&.h\&.
.SS "#define EVP_CTRL_CCM_SET_IVLEN   \fBEVP_CTRL_GCM_SET_IVLEN\fP"

.PP
Definition at line 405 of file evp\&.h\&.
.SS "#define EVP_CTRL_CCM_GET_TAG   \fBEVP_CTRL_GCM_GET_TAG\fP"

.PP
Definition at line 406 of file evp\&.h\&.
.SS "#define EVP_CTRL_CCM_SET_TAG   \fBEVP_CTRL_GCM_SET_TAG\fP"

.PP
Definition at line 407 of file evp\&.h\&.
.SS "#define EVP_CTRL_CCM_SET_L   0x14"

.PP
Definition at line 408 of file evp\&.h\&.
.SS "#define EVP_CTRL_CCM_SET_MSGLEN   0x15"

.PP
Definition at line 409 of file evp\&.h\&.
.SS "#define EVP_CTRL_AEAD_TLS1_AAD   0x16"

.PP
Definition at line 415 of file evp\&.h\&.
.SS "#define EVP_CTRL_AEAD_SET_MAC_KEY   0x17"

.PP
Definition at line 417 of file evp\&.h\&.
.SS "#define EVP_CTRL_GCM_SET_IV_INV   0x18"

.PP
Definition at line 419 of file evp\&.h\&.
.SS "#define EVP_CTRL_TLS1_1_MULTIBLOCK_AAD   0x19"

.PP
Definition at line 421 of file evp\&.h\&.
.SS "#define EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT   0x1a"

.PP
Definition at line 422 of file evp\&.h\&.
.SS "#define EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT   0x1b"

.PP
Definition at line 423 of file evp\&.h\&.
.SS "#define EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE   0x1c"

.PP
Definition at line 424 of file evp\&.h\&.
.SS "#define EVP_AEAD_TLS1_AAD_LEN   13"

.PP
Definition at line 427 of file evp\&.h\&.
.SS "#define EVP_GCM_TLS_FIXED_IV_LEN   4"

.PP
Definition at line 438 of file evp\&.h\&.
.SS "#define EVP_GCM_TLS_EXPLICIT_IV_LEN   8"

.PP
Definition at line 440 of file evp\&.h\&.
.SS "#define EVP_GCM_TLS_TAG_LEN   16"

.PP
Definition at line 442 of file evp\&.h\&.
.SS "#define EVP_PKEY_assign_RSA(pkey, rsa)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_assign((pkey),EVP_PKEY_RSA,\
                                        (char *)(rsa))
.fi
.PP
Definition at line 491 of file evp\&.h\&.
.SS "#define EVP_PKEY_assign_DSA(pkey, dsa)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_assign((pkey),EVP_PKEY_DSA,\
                                        (char *)(dsa))
.fi
.PP
Definition at line 496 of file evp\&.h\&.
.SS "#define EVP_PKEY_assign_DH(pkey, dh)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_assign((pkey),EVP_PKEY_DH,\
                                        (char *)(dh))
.fi
.PP
Definition at line 501 of file evp\&.h\&.
.SS "#define EVP_PKEY_assign_EC_KEY(pkey, eckey)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_assign((pkey),EVP_PKEY_EC,\
                                        (char *)(eckey))
.fi
.PP
Definition at line 506 of file evp\&.h\&.
.SS "#define EVP_get_digestbynid(\fBa\fP)   \fBEVP_get_digestbyname\fP(\fBOBJ_nid2sn\fP(\fBa\fP))"

.PP
Definition at line 511 of file evp\&.h\&.
.SS "#define EVP_get_digestbyobj(\fBa\fP)   \fBEVP_get_digestbynid\fP(\fBOBJ_obj2nid\fP(\fBa\fP))"

.PP
Definition at line 512 of file evp\&.h\&.
.SS "#define EVP_get_cipherbynid(\fBa\fP)   \fBEVP_get_cipherbyname\fP(\fBOBJ_nid2sn\fP(\fBa\fP))"

.PP
Definition at line 513 of file evp\&.h\&.
.SS "#define EVP_get_cipherbyobj(\fBa\fP)   \fBEVP_get_cipherbynid\fP(\fBOBJ_obj2nid\fP(\fBa\fP))"

.PP
Definition at line 514 of file evp\&.h\&.
.SS "#define EVP_MD_nid(\fBe\fP)   \fBEVP_MD_type\fP(\fBe\fP)"

.PP
Definition at line 517 of file evp\&.h\&.
.SS "#define EVP_MD_name(\fBe\fP)   \fBOBJ_nid2sn\fP(\fBEVP_MD_nid\fP(\fBe\fP))"

.PP
Definition at line 518 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_size(\fBe\fP)   \fBEVP_MD_size\fP(\fBEVP_MD_CTX_md\fP(\fBe\fP))"

.PP
Definition at line 525 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_block_size(\fBe\fP)   \fBEVP_MD_block_size\fP(\fBEVP_MD_CTX_md\fP(\fBe\fP))"

.PP
Definition at line 526 of file evp\&.h\&.
.SS "#define EVP_MD_CTX_type(\fBe\fP)   \fBEVP_MD_type\fP(\fBEVP_MD_CTX_md\fP(\fBe\fP))"

.PP
Definition at line 527 of file evp\&.h\&.
.SS "#define EVP_CIPHER_name(\fBe\fP)   \fBOBJ_nid2sn\fP(\fBEVP_CIPHER_nid\fP(\fBe\fP))"

.PP
Definition at line 530 of file evp\&.h\&.
.SS "#define EVP_CIPHER_mode(\fBe\fP)   (\fBEVP_CIPHER_flags\fP(\fBe\fP) & \fBEVP_CIPH_MODE\fP)"

.PP
Definition at line 535 of file evp\&.h\&.
.SS "#define EVP_CIPHER_CTX_type(\fBc\fP)   \fBEVP_CIPHER_type\fP(\fBEVP_CIPHER_CTX_cipher\fP(\fBc\fP))"

.PP
Definition at line 545 of file evp\&.h\&.
.SS "#define EVP_CIPHER_CTX_mode(\fBe\fP)   (\fBEVP_CIPHER_CTX_flags\fP(\fBe\fP) & \fBEVP_CIPH_MODE\fP)"

.PP
Definition at line 547 of file evp\&.h\&.
.SS "#define EVP_ENCODE_LENGTH(l)   (((l+2)/3*4)+(l/48+1)*2+80)"

.PP
Definition at line 549 of file evp\&.h\&.
.SS "#define EVP_DECODE_LENGTH(l)   ((l+3)/4*3+80)"

.PP
Definition at line 550 of file evp\&.h\&.
.SS "#define EVP_SignInit_ex(\fBa\fP, b, \fBc\fP)   \fBEVP_DigestInit_ex\fP(\fBa\fP,b,\fBc\fP)"

.PP
Definition at line 552 of file evp\&.h\&.
.SS "#define EVP_SignInit(\fBa\fP, b)   \fBEVP_DigestInit\fP(\fBa\fP,b)"

.PP
Definition at line 553 of file evp\&.h\&.
.SS "#define EVP_SignUpdate(\fBa\fP, b, \fBc\fP)   \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"

.PP
Definition at line 554 of file evp\&.h\&.
.SS "#define EVP_VerifyInit_ex(\fBa\fP, b, \fBc\fP)   \fBEVP_DigestInit_ex\fP(\fBa\fP,b,\fBc\fP)"

.PP
Definition at line 555 of file evp\&.h\&.
.SS "#define EVP_VerifyInit(\fBa\fP, b)   \fBEVP_DigestInit\fP(\fBa\fP,b)"

.PP
Definition at line 556 of file evp\&.h\&.
.SS "#define EVP_VerifyUpdate(\fBa\fP, b, \fBc\fP)   \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"

.PP
Definition at line 557 of file evp\&.h\&.
.SS "#define EVP_OpenUpdate(\fBa\fP, b, \fBc\fP, d, \fBe\fP)   \fBEVP_DecryptUpdate\fP(\fBa\fP,b,\fBc\fP,d,\fBe\fP)"

.PP
Definition at line 558 of file evp\&.h\&.
.SS "#define EVP_SealUpdate(\fBa\fP, b, \fBc\fP, d, \fBe\fP)   \fBEVP_EncryptUpdate\fP(\fBa\fP,b,\fBc\fP,d,\fBe\fP)"

.PP
Definition at line 559 of file evp\&.h\&.
.SS "#define EVP_DigestSignUpdate(\fBa\fP, b, \fBc\fP)   \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"

.PP
Definition at line 560 of file evp\&.h\&.
.SS "#define EVP_DigestVerifyUpdate(\fBa\fP, b, \fBc\fP)   \fBEVP_DigestUpdate\fP(\fBa\fP,b,\fBc\fP)"

.PP
Definition at line 561 of file evp\&.h\&.
.SS "#define BIO_set_md(b, md)   \fBBIO_ctrl\fP(b,\fBBIO_C_SET_MD\fP,0,(char *)md)"

.PP
Definition at line 566 of file evp\&.h\&.
.SS "#define BIO_get_md(b, mdp)   \fBBIO_ctrl\fP(b,\fBBIO_C_GET_MD\fP,0,(char *)mdp)"

.PP
Definition at line 568 of file evp\&.h\&.
.SS "#define BIO_get_md_ctx(b, mdcp)   \fBBIO_ctrl\fP(b,\fBBIO_C_GET_MD_CTX\fP,0,(char *)mdcp)"

.PP
Definition at line 569 of file evp\&.h\&.
.SS "#define BIO_set_md_ctx(b, mdcp)   \fBBIO_ctrl\fP(b,\fBBIO_C_SET_MD_CTX\fP,0,(char *)mdcp)"

.PP
Definition at line 570 of file evp\&.h\&.
.SS "#define BIO_get_cipher_status(b)   \fBBIO_ctrl\fP(b,\fBBIO_C_GET_CIPHER_STATUS\fP,0,NULL)"

.PP
Definition at line 571 of file evp\&.h\&.
.SS "#define BIO_get_cipher_ctx(b, c_pp)   \fBBIO_ctrl\fP(b,\fBBIO_C_GET_CIPHER_CTX\fP,0,(char *)c_pp)"

.PP
Definition at line 572 of file evp\&.h\&.
.SS "#define EVP_add_cipher_alias(n, alias)   \fBOBJ_NAME_add\fP((alias),\fBOBJ_NAME_TYPE_CIPHER_METH\fP|\fBOBJ_NAME_ALIAS\fP,(n))"

.PP
Definition at line 577 of file evp\&.h\&.
.SS "#define EVP_add_digest_alias(n, alias)   \fBOBJ_NAME_add\fP((alias),\fBOBJ_NAME_TYPE_MD_METH\fP|\fBOBJ_NAME_ALIAS\fP,(n))"

.PP
Definition at line 579 of file evp\&.h\&.
.SS "#define EVP_delete_cipher_alias(alias)   \fBOBJ_NAME_remove\fP(alias,\fBOBJ_NAME_TYPE_CIPHER_METH\fP|\fBOBJ_NAME_ALIAS\fP);"

.PP
Definition at line 581 of file evp\&.h\&.
.SS "#define EVP_delete_digest_alias(alias)   \fBOBJ_NAME_remove\fP(alias,\fBOBJ_NAME_TYPE_MD_METH\fP|\fBOBJ_NAME_ALIAS\fP);"

.PP
Definition at line 583 of file evp\&.h\&.
.SS "#define EVP_des_cfb   \fBEVP_des_cfb64\fP"

.PP
Definition at line 750 of file evp\&.h\&.
.SS "#define EVP_des_ede_cfb   \fBEVP_des_ede_cfb64\fP"

.PP
Definition at line 754 of file evp\&.h\&.
.SS "#define EVP_des_ede3_cfb   \fBEVP_des_ede3_cfb64\fP"

.PP
Definition at line 760 of file evp\&.h\&.
.SS "#define EVP_idea_cfb   \fBEVP_idea_cfb64\fP"

.PP
Definition at line 794 of file evp\&.h\&.
.SS "#define EVP_rc2_cfb   \fBEVP_rc2_cfb64\fP"

.PP
Definition at line 804 of file evp\&.h\&.
.SS "#define EVP_bf_cfb   \fBEVP_bf_cfb64\fP"

.PP
Definition at line 811 of file evp\&.h\&.
.SS "#define EVP_cast5_cfb   \fBEVP_cast5_cfb64\fP"

.PP
Definition at line 818 of file evp\&.h\&.
.SS "#define EVP_rc5_32_12_16_cfb   \fBEVP_rc5_32_12_16_cfb64\fP"

.PP
Definition at line 825 of file evp\&.h\&.
.SS "#define EVP_aes_128_cfb   \fBEVP_aes_128_cfb128\fP"

.PP
Definition at line 834 of file evp\&.h\&.
.SS "#define EVP_aes_192_cfb   \fBEVP_aes_192_cfb128\fP"

.PP
Definition at line 846 of file evp\&.h\&.
.SS "#define EVP_aes_256_cfb   \fBEVP_aes_256_cfb128\fP"

.PP
Definition at line 857 of file evp\&.h\&.
.SS "#define EVP_camellia_128_cfb   \fBEVP_camellia_128_cfb128\fP"

.PP
Definition at line 879 of file evp\&.h\&.
.SS "#define EVP_camellia_192_cfb   \fBEVP_camellia_192_cfb128\fP"

.PP
Definition at line 886 of file evp\&.h\&.
.SS "#define EVP_camellia_256_cfb   \fBEVP_camellia_256_cfb128\fP"

.PP
Definition at line 893 of file evp\&.h\&.
.SS "#define EVP_seed_cfb   \fBEVP_seed_cfb128\fP"

.PP
Definition at line 901 of file evp\&.h\&.
.SS "#define OpenSSL_add_all_algorithms()   \fBOPENSSL_add_all_algorithms_noconf\fP()"

.PP
Definition at line 912 of file evp\&.h\&.
.SS "#define SSLeay_add_all_algorithms()   \fBOpenSSL_add_all_algorithms\fP()"

.PP
Definition at line 918 of file evp\&.h\&.
.SS "#define SSLeay_add_all_ciphers()   \fBOpenSSL_add_all_ciphers\fP()"

.PP
Definition at line 919 of file evp\&.h\&.
.SS "#define SSLeay_add_all_digests()   \fBOpenSSL_add_all_digests\fP()"

.PP
Definition at line 920 of file evp\&.h\&.
.SS "#define EVP_PBE_TYPE_OUTER   0x0"

.PP
Definition at line 1041 of file evp\&.h\&.
.SS "#define EVP_PBE_TYPE_PRF   0x1"

.PP
Definition at line 1043 of file evp\&.h\&.
.SS "#define ASN1_PKEY_ALIAS   0x1"

.PP
Definition at line 1053 of file evp\&.h\&.
.SS "#define ASN1_PKEY_DYNAMIC   0x2"

.PP
Definition at line 1054 of file evp\&.h\&.
.SS "#define ASN1_PKEY_SIGPARAM_NULL   0x4"

.PP
Definition at line 1055 of file evp\&.h\&.
.SS "#define ASN1_PKEY_CTRL_PKCS7_SIGN   0x1"

.PP
Definition at line 1057 of file evp\&.h\&.
.SS "#define ASN1_PKEY_CTRL_PKCS7_ENCRYPT   0x2"

.PP
Definition at line 1058 of file evp\&.h\&.
.SS "#define ASN1_PKEY_CTRL_DEFAULT_MD_NID   0x3"

.PP
Definition at line 1059 of file evp\&.h\&.
.SS "#define ASN1_PKEY_CTRL_CMS_SIGN   0x5"

.PP
Definition at line 1060 of file evp\&.h\&.
.SS "#define ASN1_PKEY_CTRL_CMS_ENVELOPE   0x7"

.PP
Definition at line 1061 of file evp\&.h\&.
.SS "#define ASN1_PKEY_CTRL_CMS_RI_TYPE   0x8"

.PP
Definition at line 1062 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_UNDEFINED   0"

.PP
Definition at line 1140 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_PARAMGEN   (1<<1)"

.PP
Definition at line 1141 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_KEYGEN   (1<<2)"

.PP
Definition at line 1142 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_SIGN   (1<<3)"

.PP
Definition at line 1143 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_VERIFY   (1<<4)"

.PP
Definition at line 1144 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_VERIFYRECOVER   (1<<5)"

.PP
Definition at line 1145 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_SIGNCTX   (1<<6)"

.PP
Definition at line 1146 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_VERIFYCTX   (1<<7)"

.PP
Definition at line 1147 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_ENCRYPT   (1<<8)"

.PP
Definition at line 1148 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_DECRYPT   (1<<9)"

.PP
Definition at line 1149 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_DERIVE   (1<<10)"

.PP
Definition at line 1150 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_TYPE_SIG"
\fBValue:\fP
.PP
.nf
(EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY | EVP_PKEY_OP_VERIFYRECOVER \
                | EVP_PKEY_OP_SIGNCTX | EVP_PKEY_OP_VERIFYCTX)
.fi
.PP
Definition at line 1152 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_TYPE_CRYPT   (\fBEVP_PKEY_OP_ENCRYPT\fP | \fBEVP_PKEY_OP_DECRYPT\fP)"

.PP
Definition at line 1156 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_TYPE_NOGEN   (EVP_PKEY_OP_SIG | EVP_PKEY_OP_CRYPT | \fBEVP_PKEY_OP_DERIVE\fP)"

.PP
Definition at line 1159 of file evp\&.h\&.
.SS "#define EVP_PKEY_OP_TYPE_GEN   (\fBEVP_PKEY_OP_PARAMGEN\fP | \fBEVP_PKEY_OP_KEYGEN\fP)"

.PP
Definition at line 1162 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTX_set_signature_md(ctx, md)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG,  \
                                        EVP_PKEY_CTRL_MD, 0, (void *)md)
.fi
.PP
Definition at line 1165 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTX_get_signature_md(ctx, pmd)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG,  \
                                        EVP_PKEY_CTRL_GET_MD, 0, (void *)pmd)
.fi
.PP
Definition at line 1169 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_MD   1"

.PP
Definition at line 1173 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_PEER_KEY   2"

.PP
Definition at line 1174 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_PKCS7_ENCRYPT   3"

.PP
Definition at line 1176 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_PKCS7_DECRYPT   4"

.PP
Definition at line 1177 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_PKCS7_SIGN   5"

.PP
Definition at line 1179 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_SET_MAC_KEY   6"

.PP
Definition at line 1181 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_DIGESTINIT   7"

.PP
Definition at line 1183 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_SET_IV   8"

.PP
Definition at line 1186 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_CMS_ENCRYPT   9"

.PP
Definition at line 1188 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_CMS_DECRYPT   10"

.PP
Definition at line 1189 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_CMS_SIGN   11"

.PP
Definition at line 1190 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_CIPHER   12"

.PP
Definition at line 1192 of file evp\&.h\&.
.SS "#define EVP_PKEY_CTRL_GET_MD   13"

.PP
Definition at line 1194 of file evp\&.h\&.
.SS "#define EVP_PKEY_ALG_CTRL   0x1000"

.PP
Definition at line 1196 of file evp\&.h\&.
.SS "#define EVP_PKEY_FLAG_AUTOARGLEN   2"

.PP
Definition at line 1198 of file evp\&.h\&.
.SS "#define EVP_PKEY_FLAG_SIGCTX_CUSTOM   4"

.PP
Definition at line 1202 of file evp\&.h\&.
.SS "#define EVP_F_AESNI_INIT_KEY   165"

.PP
Definition at line 1378 of file evp\&.h\&.
.SS "#define EVP_F_AESNI_XTS_CIPHER   176"

.PP
Definition at line 1379 of file evp\&.h\&.
.SS "#define EVP_F_AES_INIT_KEY   133"

.PP
Definition at line 1380 of file evp\&.h\&.
.SS "#define EVP_F_AES_T4_INIT_KEY   178"

.PP
Definition at line 1381 of file evp\&.h\&.
.SS "#define EVP_F_AES_XTS   172"

.PP
Definition at line 1382 of file evp\&.h\&.
.SS "#define EVP_F_AES_XTS_CIPHER   175"

.PP
Definition at line 1383 of file evp\&.h\&.
.SS "#define EVP_F_ALG_MODULE_INIT   177"

.PP
Definition at line 1384 of file evp\&.h\&.
.SS "#define EVP_F_CAMELLIA_INIT_KEY   159"

.PP
Definition at line 1385 of file evp\&.h\&.
.SS "#define EVP_F_CMAC_INIT   173"

.PP
Definition at line 1386 of file evp\&.h\&.
.SS "#define EVP_F_CMLL_T4_INIT_KEY   179"

.PP
Definition at line 1387 of file evp\&.h\&.
.SS "#define EVP_F_D2I_PKEY   100"

.PP
Definition at line 1388 of file evp\&.h\&.
.SS "#define EVP_F_DO_SIGVER_INIT   161"

.PP
Definition at line 1389 of file evp\&.h\&.
.SS "#define EVP_F_DSAPKEY2PKCS8   134"

.PP
Definition at line 1390 of file evp\&.h\&.
.SS "#define EVP_F_DSA_PKEY2PKCS8   135"

.PP
Definition at line 1391 of file evp\&.h\&.
.SS "#define EVP_F_ECDSA_PKEY2PKCS8   129"

.PP
Definition at line 1392 of file evp\&.h\&.
.SS "#define EVP_F_ECKEY_PKEY2PKCS8   132"

.PP
Definition at line 1393 of file evp\&.h\&.
.SS "#define EVP_F_EVP_CIPHERINIT_EX   123"

.PP
Definition at line 1394 of file evp\&.h\&.
.SS "#define EVP_F_EVP_CIPHER_CTX_COPY   163"

.PP
Definition at line 1395 of file evp\&.h\&.
.SS "#define EVP_F_EVP_CIPHER_CTX_CTRL   124"

.PP
Definition at line 1396 of file evp\&.h\&.
.SS "#define EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH   122"

.PP
Definition at line 1397 of file evp\&.h\&.
.SS "#define EVP_F_EVP_DECRYPTFINAL_EX   101"

.PP
Definition at line 1398 of file evp\&.h\&.
.SS "#define EVP_F_EVP_DIGESTINIT_EX   128"

.PP
Definition at line 1399 of file evp\&.h\&.
.SS "#define EVP_F_EVP_ENCRYPTFINAL_EX   127"

.PP
Definition at line 1400 of file evp\&.h\&.
.SS "#define EVP_F_EVP_MD_CTX_COPY_EX   110"

.PP
Definition at line 1401 of file evp\&.h\&.
.SS "#define EVP_F_EVP_MD_SIZE   162"

.PP
Definition at line 1402 of file evp\&.h\&.
.SS "#define EVP_F_EVP_OPENINIT   102"

.PP
Definition at line 1403 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PBE_ALG_ADD   115"

.PP
Definition at line 1404 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PBE_ALG_ADD_TYPE   160"

.PP
Definition at line 1405 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PBE_CIPHERINIT   116"

.PP
Definition at line 1406 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKCS82PKEY   111"

.PP
Definition at line 1407 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKCS82PKEY_BROKEN   136"

.PP
Definition at line 1408 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY2PKCS8_BROKEN   113"

.PP
Definition at line 1409 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_COPY_PARAMETERS   103"

.PP
Definition at line 1410 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_CTX_CTRL   137"

.PP
Definition at line 1411 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_CTX_CTRL_STR   150"

.PP
Definition at line 1412 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_CTX_DUP   156"

.PP
Definition at line 1413 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_DECRYPT   104"

.PP
Definition at line 1414 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_DECRYPT_INIT   138"

.PP
Definition at line 1415 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_DECRYPT_OLD   151"

.PP
Definition at line 1416 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_DERIVE   153"

.PP
Definition at line 1417 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_DERIVE_INIT   154"

.PP
Definition at line 1418 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_DERIVE_SET_PEER   155"

.PP
Definition at line 1419 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_ENCRYPT   105"

.PP
Definition at line 1420 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_ENCRYPT_INIT   139"

.PP
Definition at line 1421 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_ENCRYPT_OLD   152"

.PP
Definition at line 1422 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_GET1_DH   119"

.PP
Definition at line 1423 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_GET1_DSA   120"

.PP
Definition at line 1424 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_GET1_ECDSA   130"

.PP
Definition at line 1425 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_GET1_EC_KEY   131"

.PP
Definition at line 1426 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_GET1_RSA   121"

.PP
Definition at line 1427 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_KEYGEN   146"

.PP
Definition at line 1428 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_KEYGEN_INIT   147"

.PP
Definition at line 1429 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_NEW   106"

.PP
Definition at line 1430 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_PARAMGEN   148"

.PP
Definition at line 1431 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_PARAMGEN_INIT   149"

.PP
Definition at line 1432 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_SIGN   140"

.PP
Definition at line 1433 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_SIGN_INIT   141"

.PP
Definition at line 1434 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_VERIFY   142"

.PP
Definition at line 1435 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_VERIFY_INIT   143"

.PP
Definition at line 1436 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_VERIFY_RECOVER   144"

.PP
Definition at line 1437 of file evp\&.h\&.
.SS "#define EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT   145"

.PP
Definition at line 1438 of file evp\&.h\&.
.SS "#define EVP_F_EVP_RIJNDAEL   126"

.PP
Definition at line 1439 of file evp\&.h\&.
.SS "#define EVP_F_EVP_SIGNFINAL   107"

.PP
Definition at line 1440 of file evp\&.h\&.
.SS "#define EVP_F_EVP_VERIFYFINAL   108"

.PP
Definition at line 1441 of file evp\&.h\&.
.SS "#define EVP_F_FIPS_CIPHERINIT   166"

.PP
Definition at line 1442 of file evp\&.h\&.
.SS "#define EVP_F_FIPS_CIPHER_CTX_COPY   170"

.PP
Definition at line 1443 of file evp\&.h\&.
.SS "#define EVP_F_FIPS_CIPHER_CTX_CTRL   167"

.PP
Definition at line 1444 of file evp\&.h\&.
.SS "#define EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH   171"

.PP
Definition at line 1445 of file evp\&.h\&.
.SS "#define EVP_F_FIPS_DIGESTINIT   168"

.PP
Definition at line 1446 of file evp\&.h\&.
.SS "#define EVP_F_FIPS_MD_CTX_COPY   169"

.PP
Definition at line 1447 of file evp\&.h\&.
.SS "#define EVP_F_HMAC_INIT_EX   174"

.PP
Definition at line 1448 of file evp\&.h\&.
.SS "#define EVP_F_INT_CTX_NEW   157"

.PP
Definition at line 1449 of file evp\&.h\&.
.SS "#define EVP_F_PKCS5_PBE_KEYIVGEN   117"

.PP
Definition at line 1450 of file evp\&.h\&.
.SS "#define EVP_F_PKCS5_V2_PBE_KEYIVGEN   118"

.PP
Definition at line 1451 of file evp\&.h\&.
.SS "#define EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN   164"

.PP
Definition at line 1452 of file evp\&.h\&.
.SS "#define EVP_F_PKCS8_SET_BROKEN   112"

.PP
Definition at line 1453 of file evp\&.h\&.
.SS "#define EVP_F_PKEY_SET_TYPE   158"

.PP
Definition at line 1454 of file evp\&.h\&.
.SS "#define EVP_F_RC2_MAGIC_TO_METH   109"

.PP
Definition at line 1455 of file evp\&.h\&.
.SS "#define EVP_F_RC5_CTRL   125"

.PP
Definition at line 1456 of file evp\&.h\&.
.SS "#define EVP_R_AES_IV_SETUP_FAILED   162"

.PP
Definition at line 1459 of file evp\&.h\&.
.SS "#define EVP_R_AES_KEY_SETUP_FAILED   143"

.PP
Definition at line 1460 of file evp\&.h\&.
.SS "#define EVP_R_ASN1_LIB   140"

.PP
Definition at line 1461 of file evp\&.h\&.
.SS "#define EVP_R_BAD_BLOCK_LENGTH   136"

.PP
Definition at line 1462 of file evp\&.h\&.
.SS "#define EVP_R_BAD_DECRYPT   100"

.PP
Definition at line 1463 of file evp\&.h\&.
.SS "#define EVP_R_BAD_KEY_LENGTH   137"

.PP
Definition at line 1464 of file evp\&.h\&.
.SS "#define EVP_R_BN_DECODE_ERROR   112"

.PP
Definition at line 1465 of file evp\&.h\&.
.SS "#define EVP_R_BN_PUBKEY_ERROR   113"

.PP
Definition at line 1466 of file evp\&.h\&.
.SS "#define EVP_R_BUFFER_TOO_SMALL   155"

.PP
Definition at line 1467 of file evp\&.h\&.
.SS "#define EVP_R_CAMELLIA_KEY_SETUP_FAILED   157"

.PP
Definition at line 1468 of file evp\&.h\&.
.SS "#define EVP_R_CIPHER_PARAMETER_ERROR   122"

.PP
Definition at line 1469 of file evp\&.h\&.
.SS "#define EVP_R_COMMAND_NOT_SUPPORTED   147"

.PP
Definition at line 1470 of file evp\&.h\&.
.SS "#define EVP_R_CTRL_NOT_IMPLEMENTED   132"

.PP
Definition at line 1471 of file evp\&.h\&.
.SS "#define EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED   133"

.PP
Definition at line 1472 of file evp\&.h\&.
.SS "#define EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH   138"

.PP
Definition at line 1473 of file evp\&.h\&.
.SS "#define EVP_R_DECODE_ERROR   114"

.PP
Definition at line 1474 of file evp\&.h\&.
.SS "#define EVP_R_DIFFERENT_KEY_TYPES   101"

.PP
Definition at line 1475 of file evp\&.h\&.
.SS "#define EVP_R_DIFFERENT_PARAMETERS   153"

.PP
Definition at line 1476 of file evp\&.h\&.
.SS "#define EVP_R_DISABLED_FOR_FIPS   163"

.PP
Definition at line 1477 of file evp\&.h\&.
.SS "#define EVP_R_ENCODE_ERROR   115"

.PP
Definition at line 1478 of file evp\&.h\&.
.SS "#define EVP_R_ERROR_LOADING_SECTION   165"

.PP
Definition at line 1479 of file evp\&.h\&.
.SS "#define EVP_R_ERROR_SETTING_FIPS_MODE   166"

.PP
Definition at line 1480 of file evp\&.h\&.
.SS "#define EVP_R_EVP_PBE_CIPHERINIT_ERROR   119"

.PP
Definition at line 1481 of file evp\&.h\&.
.SS "#define EVP_R_EXPECTING_AN_RSA_KEY   127"

.PP
Definition at line 1482 of file evp\&.h\&.
.SS "#define EVP_R_EXPECTING_A_DH_KEY   128"

.PP
Definition at line 1483 of file evp\&.h\&.
.SS "#define EVP_R_EXPECTING_A_DSA_KEY   129"

.PP
Definition at line 1484 of file evp\&.h\&.
.SS "#define EVP_R_EXPECTING_A_ECDSA_KEY   141"

.PP
Definition at line 1485 of file evp\&.h\&.
.SS "#define EVP_R_EXPECTING_A_EC_KEY   142"

.PP
Definition at line 1486 of file evp\&.h\&.
.SS "#define EVP_R_FIPS_MODE_NOT_SUPPORTED   167"

.PP
Definition at line 1487 of file evp\&.h\&.
.SS "#define EVP_R_INITIALIZATION_ERROR   134"

.PP
Definition at line 1488 of file evp\&.h\&.
.SS "#define EVP_R_INPUT_NOT_INITIALIZED   111"

.PP
Definition at line 1489 of file evp\&.h\&.
.SS "#define EVP_R_INVALID_DIGEST   152"

.PP
Definition at line 1490 of file evp\&.h\&.
.SS "#define EVP_R_INVALID_FIPS_MODE   168"

.PP
Definition at line 1491 of file evp\&.h\&.
.SS "#define EVP_R_INVALID_KEY_LENGTH   130"

.PP
Definition at line 1492 of file evp\&.h\&.
.SS "#define EVP_R_INVALID_OPERATION   148"

.PP
Definition at line 1493 of file evp\&.h\&.
.SS "#define EVP_R_IV_TOO_LARGE   102"

.PP
Definition at line 1494 of file evp\&.h\&.
.SS "#define EVP_R_KEYGEN_FAILURE   120"

.PP
Definition at line 1495 of file evp\&.h\&.
.SS "#define EVP_R_MESSAGE_DIGEST_IS_NULL   159"

.PP
Definition at line 1496 of file evp\&.h\&.
.SS "#define EVP_R_METHOD_NOT_SUPPORTED   144"

.PP
Definition at line 1497 of file evp\&.h\&.
.SS "#define EVP_R_MISSING_PARAMETERS   103"

.PP
Definition at line 1498 of file evp\&.h\&.
.SS "#define EVP_R_NO_CIPHER_SET   131"

.PP
Definition at line 1499 of file evp\&.h\&.
.SS "#define EVP_R_NO_DEFAULT_DIGEST   158"

.PP
Definition at line 1500 of file evp\&.h\&.
.SS "#define EVP_R_NO_DIGEST_SET   139"

.PP
Definition at line 1501 of file evp\&.h\&.
.SS "#define EVP_R_NO_DSA_PARAMETERS   116"

.PP
Definition at line 1502 of file evp\&.h\&.
.SS "#define EVP_R_NO_KEY_SET   154"

.PP
Definition at line 1503 of file evp\&.h\&.
.SS "#define EVP_R_NO_OPERATION_SET   149"

.PP
Definition at line 1504 of file evp\&.h\&.
.SS "#define EVP_R_NO_SIGN_FUNCTION_CONFIGURED   104"

.PP
Definition at line 1505 of file evp\&.h\&.
.SS "#define EVP_R_NO_VERIFY_FUNCTION_CONFIGURED   105"

.PP
Definition at line 1506 of file evp\&.h\&.
.SS "#define EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE   150"

.PP
Definition at line 1507 of file evp\&.h\&.
.SS "#define EVP_R_OPERATON_NOT_INITIALIZED   151"

.PP
Definition at line 1508 of file evp\&.h\&.
.SS "#define EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE   117"

.PP
Definition at line 1509 of file evp\&.h\&.
.SS "#define EVP_R_PRIVATE_KEY_DECODE_ERROR   145"

.PP
Definition at line 1510 of file evp\&.h\&.
.SS "#define EVP_R_PRIVATE_KEY_ENCODE_ERROR   146"

.PP
Definition at line 1511 of file evp\&.h\&.
.SS "#define EVP_R_PUBLIC_KEY_NOT_RSA   106"

.PP
Definition at line 1512 of file evp\&.h\&.
.SS "#define EVP_R_TOO_LARGE   164"

.PP
Definition at line 1513 of file evp\&.h\&.
.SS "#define EVP_R_UNKNOWN_CIPHER   160"

.PP
Definition at line 1514 of file evp\&.h\&.
.SS "#define EVP_R_UNKNOWN_DIGEST   161"

.PP
Definition at line 1515 of file evp\&.h\&.
.SS "#define EVP_R_UNKNOWN_OPTION   169"

.PP
Definition at line 1516 of file evp\&.h\&.
.SS "#define EVP_R_UNKNOWN_PBE_ALGORITHM   121"

.PP
Definition at line 1517 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS   135"

.PP
Definition at line 1518 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_ALGORITHM   156"

.PP
Definition at line 1519 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_CIPHER   107"

.PP
Definition at line 1520 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_KEYLENGTH   123"

.PP
Definition at line 1521 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION   124"

.PP
Definition at line 1522 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_KEY_SIZE   108"

.PP
Definition at line 1523 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_PRF   125"

.PP
Definition at line 1524 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM   118"

.PP
Definition at line 1525 of file evp\&.h\&.
.SS "#define EVP_R_UNSUPPORTED_SALT_TYPE   126"

.PP
Definition at line 1526 of file evp\&.h\&.
.SS "#define EVP_R_WRAP_MODE_NOT_ALLOWED   170"

.PP
Definition at line 1527 of file evp\&.h\&.
.SS "#define EVP_R_WRONG_FINAL_BLOCK_LENGTH   109"

.PP
Definition at line 1528 of file evp\&.h\&.
.SS "#define EVP_R_WRONG_PUBLIC_KEY_TYPE   110"

.PP
Definition at line 1529 of file evp\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef int evp_sign_method(int \fBtype\fP, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, \fBvoid\fP *key)"

.PP
Definition at line 183 of file evp\&.h\&.
.SS "typedef int evp_verify_method(int \fBtype\fP, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, \fBvoid\fP *key)"

.PP
Definition at line 186 of file evp\&.h\&.
.SS "typedef struct \fBevp_cipher_info_st\fP  \fBEVP_CIPHER_INFO\fP"

.SS "typedef struct \fBevp_Encode_Ctx_st\fP  \fBEVP_ENCODE_CTX\fP"

.SS "typedef int( EVP_PBE_KEYGEN) (\fBEVP_CIPHER_CTX\fP *ctx, const char *\fBpass\fP, int \fBpasslen\fP, \fBASN1_TYPE\fP *param, const \fBEVP_CIPHER\fP *cipher, const \fBEVP_MD\fP *md, int en_de)"

.PP
Definition at line 485 of file evp\&.h\&.
.SS "typedef int EVP_PKEY_gen_cb(\fBEVP_PKEY_CTX\fP *ctx)"

.PP
Definition at line 1262 of file evp\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int EVP_MD_type (const \fBEVP_MD\fP * md)"

.SS "int EVP_MD_pkey_type (const \fBEVP_MD\fP * md)"

.SS "int EVP_MD_size (const \fBEVP_MD\fP * md)"

.SS "int EVP_MD_block_size (const \fBEVP_MD\fP * md)"

.SS "unsigned long EVP_MD_flags (const \fBEVP_MD\fP * md)"

.SS "const \fBEVP_MD\fP* EVP_MD_CTX_md (const \fBEVP_MD_CTX\fP * ctx)"

.SS "int EVP_CIPHER_nid (const \fBEVP_CIPHER\fP * cipher)"

.SS "int EVP_CIPHER_block_size (const \fBEVP_CIPHER\fP * cipher)"

.SS "int EVP_CIPHER_key_length (const \fBEVP_CIPHER\fP * cipher)"

.SS "int EVP_CIPHER_iv_length (const \fBEVP_CIPHER\fP * cipher)"

.SS "unsigned long EVP_CIPHER_flags (const \fBEVP_CIPHER\fP * cipher)"

.SS "const \fBEVP_CIPHER\fP* EVP_CIPHER_CTX_cipher (const \fBEVP_CIPHER_CTX\fP * ctx)"

.SS "int EVP_CIPHER_CTX_nid (const \fBEVP_CIPHER_CTX\fP * ctx)"

.SS "int EVP_CIPHER_CTX_block_size (const \fBEVP_CIPHER_CTX\fP * ctx)"

.SS "int EVP_CIPHER_CTX_key_length (const \fBEVP_CIPHER_CTX\fP * ctx)"

.SS "int EVP_CIPHER_CTX_iv_length (const \fBEVP_CIPHER_CTX\fP * ctx)"

.SS "int EVP_CIPHER_CTX_copy (\fBEVP_CIPHER_CTX\fP * out, const \fBEVP_CIPHER_CTX\fP * in)"

.SS "\fBvoid\fP* EVP_CIPHER_CTX_get_app_data (const \fBEVP_CIPHER_CTX\fP * ctx)"

.SS "\fBvoid\fP EVP_CIPHER_CTX_set_app_data (\fBEVP_CIPHER_CTX\fP * ctx, \fBvoid\fP * data)"

.SS "unsigned long EVP_CIPHER_CTX_flags (const \fBEVP_CIPHER_CTX\fP * ctx)"

.SS "int EVP_Cipher (\fBEVP_CIPHER_CTX\fP * c, unsigned char * out, const unsigned char * in, unsigned int inl)"

.SS "\fBvoid\fP EVP_MD_CTX_init (\fBEVP_MD_CTX\fP * ctx)"

.SS "int EVP_MD_CTX_cleanup (\fBEVP_MD_CTX\fP * ctx)"

.SS "\fBEVP_MD_CTX\fP* EVP_MD_CTX_create (\fBvoid\fP)"

.SS "\fBvoid\fP EVP_MD_CTX_destroy (\fBEVP_MD_CTX\fP * ctx)"

.SS "int EVP_MD_CTX_copy_ex (\fBEVP_MD_CTX\fP * out, const \fBEVP_MD_CTX\fP * in)"

.SS "\fBvoid\fP EVP_MD_CTX_set_flags (\fBEVP_MD_CTX\fP * ctx, int flags)"

.SS "\fBvoid\fP EVP_MD_CTX_clear_flags (\fBEVP_MD_CTX\fP * ctx, int flags)"

.SS "int EVP_MD_CTX_test_flags (const \fBEVP_MD_CTX\fP * ctx, int flags)"

.SS "int EVP_DigestInit_ex (\fBEVP_MD_CTX\fP * ctx, const \fBEVP_MD\fP * type, \fBENGINE\fP * impl)"

.SS "int EVP_DigestUpdate (\fBEVP_MD_CTX\fP * ctx, const \fBvoid\fP * d, size_t cnt)"

.SS "int EVP_DigestFinal_ex (\fBEVP_MD_CTX\fP * ctx, unsigned char * md, unsigned int * s)"

.SS "int EVP_Digest (const \fBvoid\fP * data, size_t count, unsigned char * md, unsigned int * size, const \fBEVP_MD\fP * type, \fBENGINE\fP * impl)"

.SS "int EVP_MD_CTX_copy (\fBEVP_MD_CTX\fP * out, const \fBEVP_MD_CTX\fP * in)"

.SS "int EVP_DigestInit (\fBEVP_MD_CTX\fP * ctx, const \fBEVP_MD\fP * type)"

.SS "int EVP_DigestFinal (\fBEVP_MD_CTX\fP * ctx, unsigned char * md, unsigned int * s)"

.SS "int EVP_read_pw_string (char * buf, int length, const char * prompt, int verify)"

.SS "int EVP_read_pw_string_min (char * buf, int minlen, int maxlen, const char * prompt, int verify)"

.SS "\fBvoid\fP EVP_set_pw_prompt (const char * prompt)"

.SS "char* EVP_get_pw_prompt (\fBvoid\fP)"

.SS "int EVP_BytesToKey (const \fBEVP_CIPHER\fP * type, const \fBEVP_MD\fP * md, const unsigned char * salt, const unsigned char * data, int datal, int count, unsigned char * key, unsigned char * iv)"

.SS "\fBvoid\fP EVP_CIPHER_CTX_set_flags (\fBEVP_CIPHER_CTX\fP * ctx, int flags)"

.SS "\fBvoid\fP EVP_CIPHER_CTX_clear_flags (\fBEVP_CIPHER_CTX\fP * ctx, int flags)"

.SS "int EVP_CIPHER_CTX_test_flags (const \fBEVP_CIPHER_CTX\fP * ctx, int flags)"

.SS "int EVP_EncryptInit (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * cipher, const unsigned char * key, const unsigned char * iv)"

.SS "int EVP_EncryptInit_ex (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * cipher, \fBENGINE\fP * impl, const unsigned char * key, const unsigned char * iv)"

.SS "int EVP_EncryptUpdate (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl)"

.SS "int EVP_EncryptFinal_ex (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * out, int * outl)"

.SS "int EVP_EncryptFinal (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * out, int * outl)"

.SS "int EVP_DecryptInit (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * cipher, const unsigned char * key, const unsigned char * iv)"

.SS "int EVP_DecryptInit_ex (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * cipher, \fBENGINE\fP * impl, const unsigned char * key, const unsigned char * iv)"

.SS "int EVP_DecryptUpdate (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl)"

.SS "int EVP_DecryptFinal (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * outm, int * outl)"

.SS "int EVP_DecryptFinal_ex (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * outm, int * outl)"

.SS "int EVP_CipherInit (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * cipher, const unsigned char * key, const unsigned char * iv, int enc)"

.SS "int EVP_CipherInit_ex (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * cipher, \fBENGINE\fP * impl, const unsigned char * key, const unsigned char * iv, int enc)"

.SS "int EVP_CipherUpdate (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl)"

.SS "int EVP_CipherFinal (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * outm, int * outl)"

.SS "int EVP_CipherFinal_ex (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * outm, int * outl)"

.SS "int EVP_SignFinal (\fBEVP_MD_CTX\fP * ctx, unsigned char * md, unsigned int * s, \fBEVP_PKEY\fP * pkey)"

.SS "int EVP_VerifyFinal (\fBEVP_MD_CTX\fP * ctx, const unsigned char * sigbuf, unsigned int siglen, \fBEVP_PKEY\fP * pkey)"

.SS "int EVP_DigestSignInit (\fBEVP_MD_CTX\fP * ctx, \fBEVP_PKEY_CTX\fP ** pctx, const \fBEVP_MD\fP * type, \fBENGINE\fP * e, \fBEVP_PKEY\fP * pkey)"

.SS "int EVP_DigestSignFinal (\fBEVP_MD_CTX\fP * ctx, unsigned char * sigret, size_t * siglen)"

.SS "int EVP_DigestVerifyInit (\fBEVP_MD_CTX\fP * ctx, \fBEVP_PKEY_CTX\fP ** pctx, const \fBEVP_MD\fP * type, \fBENGINE\fP * e, \fBEVP_PKEY\fP * pkey)"

.SS "int EVP_DigestVerifyFinal (\fBEVP_MD_CTX\fP * ctx, const unsigned char * sig, size_t siglen)"

.SS "int EVP_OpenInit (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * type, const unsigned char * ek, int ekl, const unsigned char * iv, \fBEVP_PKEY\fP * priv)"

.SS "int EVP_OpenFinal (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * out, int * outl)"

.SS "int EVP_SealInit (\fBEVP_CIPHER_CTX\fP * ctx, const \fBEVP_CIPHER\fP * type, unsigned char ** ek, int * ekl, unsigned char * iv, \fBEVP_PKEY\fP ** pubk, int npubk)"

.SS "int EVP_SealFinal (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * out, int * outl)"

.SS "\fBvoid\fP EVP_EncodeInit (\fBEVP_ENCODE_CTX\fP * ctx)"

.SS "\fBvoid\fP EVP_EncodeUpdate (\fBEVP_ENCODE_CTX\fP * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl)"

.SS "\fBvoid\fP EVP_EncodeFinal (\fBEVP_ENCODE_CTX\fP * ctx, unsigned char * out, int * outl)"

.SS "int EVP_EncodeBlock (unsigned char * t, const unsigned char * f, int n)"

.SS "\fBvoid\fP EVP_DecodeInit (\fBEVP_ENCODE_CTX\fP * ctx)"

.SS "int EVP_DecodeUpdate (\fBEVP_ENCODE_CTX\fP * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl)"

.SS "int EVP_DecodeFinal (\fBEVP_ENCODE_CTX\fP * ctx, unsigned char * out, int * outl)"

.SS "int EVP_DecodeBlock (unsigned char * t, const unsigned char * f, int n)"

.SS "\fBvoid\fP EVP_CIPHER_CTX_init (\fBEVP_CIPHER_CTX\fP * a)"

.SS "int EVP_CIPHER_CTX_cleanup (\fBEVP_CIPHER_CTX\fP * a)"

.SS "\fBEVP_CIPHER_CTX\fP* EVP_CIPHER_CTX_new (\fBvoid\fP)"

.SS "\fBvoid\fP EVP_CIPHER_CTX_free (\fBEVP_CIPHER_CTX\fP * a)"

.SS "int EVP_CIPHER_CTX_set_key_length (\fBEVP_CIPHER_CTX\fP * x, int keylen)"

.SS "int EVP_CIPHER_CTX_set_padding (\fBEVP_CIPHER_CTX\fP * c, int pad)"

.SS "int EVP_CIPHER_CTX_ctrl (\fBEVP_CIPHER_CTX\fP * ctx, int type, int arg, \fBvoid\fP * ptr)"

.SS "int EVP_CIPHER_CTX_rand_key (\fBEVP_CIPHER_CTX\fP * ctx, unsigned char * key)"

.SS "\fBBIO_METHOD\fP* BIO_f_md (\fBvoid\fP)"

.SS "\fBBIO_METHOD\fP* BIO_f_base64 (\fBvoid\fP)"

.SS "\fBBIO_METHOD\fP* BIO_f_cipher (\fBvoid\fP)"

.SS "\fBBIO_METHOD\fP* BIO_f_reliable (\fBvoid\fP)"

.SS "\fBvoid\fP BIO_set_cipher (\fBBIO\fP * b, const \fBEVP_CIPHER\fP * c, const unsigned char * k, const unsigned char * i, int enc)"

.SS "const \fBEVP_MD\fP* EVP_md_null (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_md2 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_md4 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_md5 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_sha (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_sha1 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_dss (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_dss1 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_ecdsa (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_sha224 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_sha256 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_sha384 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_sha512 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_mdc2 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_ripemd160 (\fBvoid\fP)"

.SS "const \fBEVP_MD\fP* EVP_whirlpool (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_enc_null (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_desx_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_des_ede3_wrap (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc4 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc4_40 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc4_hmac_md5 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_idea_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_idea_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_idea_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_idea_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc2_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc2_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc2_40_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc2_64_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc2_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc2_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_bf_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_bf_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_bf_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_bf_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_cast5_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_cast5_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_cast5_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_cast5_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc5_32_12_16_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc5_32_12_16_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc5_32_12_16_cfb64 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_rc5_32_12_16_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_cfb128 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_ctr (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_ccm (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_gcm (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_xts (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_wrap (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_cfb128 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_ctr (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_ccm (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_gcm (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_192_wrap (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_cfb128 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_ctr (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_ccm (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_gcm (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_xts (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_wrap (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_cbc_hmac_sha1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_cbc_hmac_sha1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_128_cbc_hmac_sha256 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_aes_256_cbc_hmac_sha256 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_128_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_128_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_128_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_128_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_128_cfb128 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_128_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_192_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_192_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_192_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_192_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_192_cfb128 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_192_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_256_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_256_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_256_cfb1 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_256_cfb8 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_256_cfb128 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_camellia_256_ofb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_seed_ecb (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_seed_cbc (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_seed_cfb128 (\fBvoid\fP)"

.SS "const \fBEVP_CIPHER\fP* EVP_seed_ofb (\fBvoid\fP)"

.SS "\fBvoid\fP OPENSSL_add_all_algorithms_noconf (\fBvoid\fP)"

.SS "\fBvoid\fP OPENSSL_add_all_algorithms_conf (\fBvoid\fP)"

.SS "\fBvoid\fP OpenSSL_add_all_ciphers (\fBvoid\fP)"

.SS "\fBvoid\fP OpenSSL_add_all_digests (\fBvoid\fP)"

.SS "int EVP_add_cipher (const \fBEVP_CIPHER\fP * cipher)"

.SS "int EVP_add_digest (const \fBEVP_MD\fP * digest)"

.SS "const \fBEVP_CIPHER\fP* EVP_get_cipherbyname (const char * name)"

.SS "const \fBEVP_MD\fP* EVP_get_digestbyname (const char * name)"

.SS "\fBvoid\fP EVP_cleanup (\fBvoid\fP)"

.SS "\fBvoid\fP EVP_CIPHER_do_all (\fBvoid\fP(*)(const \fBEVP_CIPHER\fP *ciphconst char *from, const char *to, \fBvoid\fP *\fBx\fP) fn, \fBvoid\fP * arg)"

.SS "\fBvoid\fP EVP_CIPHER_do_all_sorted (\fBvoid\fP(*)(const \fBEVP_CIPHER\fP *ciph, const char *from,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   const char *to, \fBvoid\fP *\fBx\fP) fn, \fBvoid\fP * arg)"

.SS "\fBvoid\fP EVP_MD_do_all (\fBvoid\fP(*)(const \fBEVP_MD\fP *ciph,                                                                                                                                                                                                                                                                                                                                                                                                                                                                   const char *from, const char *to, \fBvoid\fP *\fBx\fP) fn, \fBvoid\fP * arg)"

.SS "\fBvoid\fP EVP_MD_do_all_sorted (\fBvoid\fP(*)(const \fBEVP_MD\fP *ciph, const char *from,                                                                                                                                                                                                                                                                                                                                                                                                                   const char *to, \fBvoid\fP *\fBx\fP) fn, \fBvoid\fP * arg)"

.SS "int EVP_PKEY_decrypt_old (unsigned char * dec_key, const unsigned char * enc_key, int enc_key_len, \fBEVP_PKEY\fP * private_key)"

.SS "int EVP_PKEY_encrypt_old (unsigned char * enc_key, const unsigned char * key, int key_len, \fBEVP_PKEY\fP * pub_key)"

.SS "int EVP_PKEY_type (int type)"

.SS "int EVP_PKEY_id (const \fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_base_id (const \fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_bits (\fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_size (\fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_set_type (\fBEVP_PKEY\fP * pkey, int type)"

.SS "int EVP_PKEY_set_type_str (\fBEVP_PKEY\fP * pkey, const char * str, int len)"

.SS "int EVP_PKEY_assign (\fBEVP_PKEY\fP * pkey, int type, \fBvoid\fP * key)"

.SS "\fBvoid\fP* EVP_PKEY_get0 (\fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_set1_RSA (\fBEVP_PKEY\fP * pkey, struct \fBrsa_st\fP * key)"

.SS "struct \fBrsa_st\fP* EVP_PKEY_get1_RSA (\fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_set1_DSA (\fBEVP_PKEY\fP * pkey, struct \fBdsa_st\fP * key)"

.SS "struct \fBdsa_st\fP* EVP_PKEY_get1_DSA (\fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_set1_DH (\fBEVP_PKEY\fP * pkey, struct \fBdh_st\fP * key)"

.SS "struct \fBdh_st\fP* EVP_PKEY_get1_DH (\fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_set1_EC_KEY (\fBEVP_PKEY\fP * pkey, struct \fBec_key_st\fP * key)"

.SS "struct \fBec_key_st\fP* EVP_PKEY_get1_EC_KEY (\fBEVP_PKEY\fP * pkey)"

.SS "\fBEVP_PKEY\fP* EVP_PKEY_new (\fBvoid\fP)"

.SS "\fBvoid\fP EVP_PKEY_free (\fBEVP_PKEY\fP * pkey)"

.SS "\fBEVP_PKEY\fP* d2i_PublicKey (int type, \fBEVP_PKEY\fP ** a, const unsigned char ** pp, long length)"

.SS "int i2d_PublicKey (\fBEVP_PKEY\fP * a, unsigned char ** pp)"

.SS "\fBEVP_PKEY\fP* d2i_PrivateKey (int type, \fBEVP_PKEY\fP ** a, const unsigned char ** pp, long length)"

.SS "\fBEVP_PKEY\fP* d2i_AutoPrivateKey (\fBEVP_PKEY\fP ** a, const unsigned char ** pp, long length)"

.SS "int i2d_PrivateKey (\fBEVP_PKEY\fP * a, unsigned char ** pp)"

.SS "int EVP_PKEY_copy_parameters (\fBEVP_PKEY\fP * to, const \fBEVP_PKEY\fP * from)"

.SS "int EVP_PKEY_missing_parameters (const \fBEVP_PKEY\fP * pkey)"

.SS "int EVP_PKEY_save_parameters (\fBEVP_PKEY\fP * pkey, int mode)"

.SS "int EVP_PKEY_cmp_parameters (const \fBEVP_PKEY\fP * a, const \fBEVP_PKEY\fP * b)"

.SS "int EVP_PKEY_cmp (const \fBEVP_PKEY\fP * a, const \fBEVP_PKEY\fP * b)"

.SS "int EVP_PKEY_print_public (\fBBIO\fP * out, const \fBEVP_PKEY\fP * pkey, int indent, \fBASN1_PCTX\fP * pctx)"

.SS "int EVP_PKEY_print_private (\fBBIO\fP * out, const \fBEVP_PKEY\fP * pkey, int indent, \fBASN1_PCTX\fP * pctx)"

.SS "int EVP_PKEY_print_params (\fBBIO\fP * out, const \fBEVP_PKEY\fP * pkey, int indent, \fBASN1_PCTX\fP * pctx)"

.SS "int EVP_PKEY_get_default_digest_nid (\fBEVP_PKEY\fP * pkey, int * pnid)"

.SS "int EVP_CIPHER_type (const \fBEVP_CIPHER\fP * ctx)"

.SS "int EVP_CIPHER_param_to_asn1 (\fBEVP_CIPHER_CTX\fP * c, \fBASN1_TYPE\fP * type)"

.SS "int EVP_CIPHER_asn1_to_param (\fBEVP_CIPHER_CTX\fP * c, \fBASN1_TYPE\fP * type)"

.SS "int EVP_CIPHER_set_asn1_iv (\fBEVP_CIPHER_CTX\fP * c, \fBASN1_TYPE\fP * type)"

.SS "int EVP_CIPHER_get_asn1_iv (\fBEVP_CIPHER_CTX\fP * c, \fBASN1_TYPE\fP * type)"

.SS "int PKCS5_PBE_keyivgen (\fBEVP_CIPHER_CTX\fP * ctx, const char * pass, int passlen, \fBASN1_TYPE\fP * param, const \fBEVP_CIPHER\fP * cipher, const \fBEVP_MD\fP * md, int en_de)"

.SS "int PKCS5_PBKDF2_HMAC_SHA1 (const char * pass, int passlen, const unsigned char * salt, int saltlen, int iter, int keylen, unsigned char * out)"

.SS "int PKCS5_PBKDF2_HMAC (const char * pass, int passlen, const unsigned char * salt, int saltlen, int iter, const \fBEVP_MD\fP * digest, int keylen, unsigned char * out)"

.SS "int PKCS5_v2_PBE_keyivgen (\fBEVP_CIPHER_CTX\fP * ctx, const char * pass, int passlen, \fBASN1_TYPE\fP * param, const \fBEVP_CIPHER\fP * cipher, const \fBEVP_MD\fP * md, int en_de)"

.SS "\fBvoid\fP PKCS5_PBE_add (\fBvoid\fP)"

.SS "int EVP_PBE_CipherInit (\fBASN1_OBJECT\fP * pbe_obj, const char * pass, int passlen, \fBASN1_TYPE\fP * param, \fBEVP_CIPHER_CTX\fP * ctx, int en_de)"

.SS "int EVP_PBE_alg_add_type (int pbe_type, int pbe_nid, int cipher_nid, int md_nid, \fBEVP_PBE_KEYGEN\fP * keygen)"

.SS "int EVP_PBE_alg_add (int nid, const \fBEVP_CIPHER\fP * cipher, const \fBEVP_MD\fP * md, \fBEVP_PBE_KEYGEN\fP * keygen)"

.SS "int EVP_PBE_find (int type, int pbe_nid, int * pcnid, int * pmnid, \fBEVP_PBE_KEYGEN\fP ** pkeygen)"

.SS "\fBvoid\fP EVP_PBE_cleanup (\fBvoid\fP)"

.SS "int EVP_PKEY_asn1_get_count (\fBvoid\fP)"

.SS "const \fBEVP_PKEY_ASN1_METHOD\fP* EVP_PKEY_asn1_get0 (int idx)"

.SS "const \fBEVP_PKEY_ASN1_METHOD\fP* EVP_PKEY_asn1_find (\fBENGINE\fP ** pe, int type)"

.SS "const \fBEVP_PKEY_ASN1_METHOD\fP* EVP_PKEY_asn1_find_str (\fBENGINE\fP ** pe, const char * str, int len)"

.SS "int EVP_PKEY_asn1_add0 (const \fBEVP_PKEY_ASN1_METHOD\fP * ameth)"

.SS "int EVP_PKEY_asn1_add_alias (int to, int from)"

.SS "int EVP_PKEY_asn1_get0_info (int * ppkey_id, int * pkey_base_id, int * ppkey_flags, const char ** pinfo, const char ** ppem_str, const \fBEVP_PKEY_ASN1_METHOD\fP * ameth)"

.SS "const \fBEVP_PKEY_ASN1_METHOD\fP* EVP_PKEY_get0_asn1 (\fBEVP_PKEY\fP * pkey)"

.SS "\fBEVP_PKEY_ASN1_METHOD\fP* EVP_PKEY_asn1_new (int id, int flags, const char * pem_str, const char * info)"

.SS "\fBvoid\fP EVP_PKEY_asn1_copy (\fBEVP_PKEY_ASN1_METHOD\fP * dst, const \fBEVP_PKEY_ASN1_METHOD\fP * src)"

.SS "\fBvoid\fP EVP_PKEY_asn1_free (\fBEVP_PKEY_ASN1_METHOD\fP * ameth)"

.SS "\fBvoid\fP EVP_PKEY_asn1_set_public (\fBEVP_PKEY_ASN1_METHOD\fP * ameth, int(*)(\fBEVP_PKEY\fP *pkfBX509_PUBKEY\fP *pub) pub_decode, int(*)(\fBX509_PUBKEY\fP *pubconst \fBEVP_PKEY\fP *pk) pub_encode, int(*)(const \fBEVP_PKEY\fP *\fBa\fconst \fBEVP_PKEY\fP *b) pub_cmp, int(*)(\fBBIO\fP *outconst \fBEVP_PKEY\fP *pkeyint indent, \fBASN1_PCTX\fP *pctx) pub_print, int(*)(const \fBEVP_PKEY\fP *pk) pkey_size, int(*)(const \fBEVP_PKEY\fP *pk) pkey_bits)"

.SS "\fBvoid\fP EVP_PKEY_asn1_set_private (\fBEVP_PKEY_ASN1_METHOD\fP * ameth, int(*)(\fBEVP_PKEY\fP *pkfBPKCS8_PRIV_KEY_INFO\fp8inf) priv_decode, int(*)(\fBPKCS8_PRIV_KEY_INFO\fP *pconst \fBEVP_PKEY\fP *pk) priv_encode, int(*)(\fBBIO\fP *outconst \fBEVP_PKEY\fP *pkeyint indentfBASN1_PCTX\fP *pctx) priv_print)"

.SS "\fBvoid\fP EVP_PKEY_asn1_set_param (\fBEVP_PKEY_ASN1_METHOD\fP * ameth, int(*)(\fBEVP_PKEY\fP *pkeyconst unsigned char **pderint derlen) param_decode, int(*)(const \fBEVP_PKEY\fP *pkeyunsigned char **pder) param_encode, int(*)(const \fBEVP_PKEY\fP *pk) param_missing, int(*)(\fBEVP_PKEY\fP *toconst \fBEVP_PKEY\fP *from) param_copy, int(*)(const \fBEVP_PKEY\fP *\fBa\fconst \fBEVP_PKEY\fP *b) param_cmp, int(*)(\fBBIO\fP *outconst \fBEVP_PKEY\fP *pkeyint indentfBASN1_PCTX\fP *pctx) param_print)"

.SS "\fBvoid\fP EVP_PKEY_asn1_set_free (\fBEVP_PKEY_ASN1_METHOD\fP * ameth, \fBvoid\fP(*)(\fBEVP_PKEY\fP *pkey) pkey_free)"

.SS "\fBvoid\fP EVP_PKEY_asn1_set_ctrl (\fBEVP_PKEY_ASN1_METHOD\fP * ameth, int(*)(\fBEVP_PKEY\fP *pkey, int oplong arg1, \fBvoid\fP *arg2) pkey_ctrl)"

.SS "\fBvoid\fP EVP_PKEY_asn1_set_item (\fBEVP_PKEY_ASN1_METHOD\fP * ameth, int(*)(\fBEVP_MD_CTX\fP *ctxconst \fBASN1_ITEM\fP *itfBvoid\fP *asnfBX509_ALGOR\fP *\fBa\ffBASN1_BIT_STRING\fP *sigfBEVP_PKEY\fP *pkey) item_verify, int(*)(\fBEVP_MD_CTX\fP *ctxconst \fBASN1_ITEM\fP *itfBvoid\fP *asnfBX509_ALGOR\fP *alg1,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \fBX509_ALGOR\fP *algfBASN1_BIT_STRING\fP *sig) item_sign)"

.SS "const \fBEVP_PKEY_METHOD\fP* EVP_PKEY_meth_find (int type)"

.SS "\fBEVP_PKEY_METHOD\fP* EVP_PKEY_meth_new (int id, int flags)"

.SS "\fBvoid\fP EVP_PKEY_meth_get0_info (int * ppkey_id, int * pflags, const \fBEVP_PKEY_METHOD\fP * meth)"

.SS "\fBvoid\fP EVP_PKEY_meth_copy (\fBEVP_PKEY_METHOD\fP * dst, const \fBEVP_PKEY_METHOD\fP * src)"

.SS "\fBvoid\fP EVP_PKEY_meth_free (\fBEVP_PKEY_METHOD\fP * pmeth)"

.SS "int EVP_PKEY_meth_add0 (const \fBEVP_PKEY_METHOD\fP * pmeth)"

.SS "\fBEVP_PKEY_CTX\fP* EVP_PKEY_CTX_new (\fBEVP_PKEY\fP * pkey, \fBENGINE\fP * e)"

.SS "\fBEVP_PKEY_CTX\fP* EVP_PKEY_CTX_new_id (int id, \fBENGINE\fP * e)"

.SS "\fBEVP_PKEY_CTX\fP* EVP_PKEY_CTX_dup (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "\fBvoid\fP EVP_PKEY_CTX_free (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_CTX_ctrl (\fBEVP_PKEY_CTX\fP * ctx, int keytype, int optype, int cmd, int p1, \fBvoid\fP * p2)"

.SS "int EVP_PKEY_CTX_ctrl_str (\fBEVP_PKEY_CTX\fP * ctx, const char * type, const char * value)"

.SS "int EVP_PKEY_CTX_get_operation (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "\fBvoid\fP EVP_PKEY_CTX_set0_keygen_info (\fBEVP_PKEY_CTX\fP * ctx, int * dat, int datlen)"

.SS "\fBEVP_PKEY\fP* EVP_PKEY_new_mac_key (int type, \fBENGINE\fP * e, const unsigned char * key, int keylen)"

.SS "\fBvoid\fP EVP_PKEY_CTX_set_data (\fBEVP_PKEY_CTX\fP * ctx, \fBvoid\fP * data)"

.SS "\fBvoid\fP* EVP_PKEY_CTX_get_data (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "\fBEVP_PKEY\fP* EVP_PKEY_CTX_get0_pkey (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "\fBEVP_PKEY\fP* EVP_PKEY_CTX_get0_peerkey (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "\fBvoid\fP EVP_PKEY_CTX_set_app_data (\fBEVP_PKEY_CTX\fP * ctx, \fBvoid\fP * data)"

.SS "\fBvoid\fP* EVP_PKEY_CTX_get_app_data (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_sign_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_sign (\fBEVP_PKEY_CTX\fP * ctx, unsigned char * sig, size_t * siglen, const unsigned char * tbs, size_t tbslen)"

.SS "int EVP_PKEY_verify_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_verify (\fBEVP_PKEY_CTX\fP * ctx, const unsigned char * sig, size_t siglen, const unsigned char * tbs, size_t tbslen)"

.SS "int EVP_PKEY_verify_recover_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_verify_recover (\fBEVP_PKEY_CTX\fP * ctx, unsigned char * rout, size_t * routlen, const unsigned char * sig, size_t siglen)"

.SS "int EVP_PKEY_encrypt_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_encrypt (\fBEVP_PKEY_CTX\fP * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen)"

.SS "int EVP_PKEY_decrypt_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_decrypt (\fBEVP_PKEY_CTX\fP * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen)"

.SS "int EVP_PKEY_derive_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_derive_set_peer (\fBEVP_PKEY_CTX\fP * ctx, \fBEVP_PKEY\fP * peer)"

.SS "int EVP_PKEY_derive (\fBEVP_PKEY_CTX\fP * ctx, unsigned char * key, size_t * keylen)"

.SS "int EVP_PKEY_paramgen_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_paramgen (\fBEVP_PKEY_CTX\fP * ctx, \fBEVP_PKEY\fP ** ppkey)"

.SS "int EVP_PKEY_keygen_init (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_keygen (\fBEVP_PKEY_CTX\fP * ctx, \fBEVP_PKEY\fP ** ppkey)"

.SS "\fBvoid\fP EVP_PKEY_CTX_set_cb (\fBEVP_PKEY_CTX\fP * ctx, \fBEVP_PKEY_gen_cb\fP * cb)"

.SS "\fBEVP_PKEY_gen_cb\fP* EVP_PKEY_CTX_get_cb (\fBEVP_PKEY_CTX\fP * ctx)"

.SS "int EVP_PKEY_CTX_get_keygen_info (\fBEVP_PKEY_CTX\fP * ctx, int idx)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_init (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) init)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_copy (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *dstfBEVP_PKEY_CTX\fP *src) copy)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_cleanup (\fBEVP_PKEY_METHOD\fP * pmeth, \fBvoid\fP(*)(\fBEVP_PKEY_CTX\fP *ctx) cleanup)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_paramgen (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) paramgen_init, int(*)(\fBEVP_PKEY_CTX\fP *ctxfBEVP_PKEY\fP *pkey) paramgen)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_keygen (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) keygen_init, int(*)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \fBEVP_PKEY\fP *pkey) keygen)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_sign (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) sign_init, int(*)(\fBEVP_PKEY_CTX\fP *ctxunsigned char *sig, size_t *siglenconst unsigned char *tbssize_t tbslen) sign)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_verify (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) verify_init, int(*)(\fBEVP_PKEY_CTX\fP *ctxconst unsigned char *sigsize_t siglenconst unsigned char *tbssize_t tbslen) verify)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_verify_recover (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fctx) verify_recover_init, int(*)(\fBEVP_PKEY_CTX\fP                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *ctxunsigned char                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *sig,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   size_t *siglenconst unsignedchar *tbssize_t tbslen) verify_recover)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_signctx (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \fBEVP_MD_CTX\fP *mctx) signctx_init, int(*)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   unsigned char *sigsize_t *siglenfBEVP_MD_CTX\fP *mctx) signctx)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_verifyctx (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctxfBEVP_MD_CTX\fP *mctx) verifyctx_init, int(*)(\fBEVP_PKEY_CTX\fP *ctxconst unsigned char *sigint siglenfBEVP_MD_CTX\fP *mctx) verifyctx)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_encrypt (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) encrypt_init, int(*)(\fBEVP_PKEY_CTX\fP *ctxunsigned char *outsize_t *outlenconst unsigned char *insize_t inlen) encryptfn)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_decrypt (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) decrypt_init, int(*)(\fBEVP_PKEY_CTX\fP *ctx,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   unsigned char *outsize_t *outlen,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   const unsigned char *insize_t inlen) decrypt)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_derive (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx) derive_init, int(*)(\fBEVP_PKEY_CTX\fP *ctxunsigned char *keysize_t *keylen) derive)"

.SS "\fBvoid\fP EVP_PKEY_meth_set_ctrl (\fBEVP_PKEY_METHOD\fP * pmeth, int(*)(\fBEVP_PKEY_CTX\fP *ctx, int \fBtype\fP, int pfBvoid\fP *p2) ctrl, int(*)(\fBEVP_PKEY_CTX\fP *ctxconst char *\fBtype\fconst char *value) ctrl_str)"

.SS "\fBvoid\fP EVP_add_alg_module (\fBvoid\fP)"

.SS "\fBvoid\fP ERR_load_EVP_strings (\fBvoid\fP)"

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
