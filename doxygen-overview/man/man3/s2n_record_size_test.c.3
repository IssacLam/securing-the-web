.TH "s2n-master/tests/unit/s2n_record_size_test.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tests/unit/s2n_record_size_test.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 's2n_test\&.h'\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <s2n\&.h>\fP
.br
\fC#include 'testlib/s2n_testlib\&.h'\fP
.br
\fC#include 'tls/s2n_cipher_suites\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'crypto/s2n_cipher\&.h'\fP
.br
\fC#include 'utils/s2n_random\&.h'\fP
.br
\fC#include 'crypto/s2n_hmac\&.h'\fP
.br
\fC#include 'tls/s2n_record\&.h'\fP
.br
\fC#include 'tls/s2n_prf\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char ** argv)"

.PP
Definition at line 33 of file s2n_record_size_test\&.c\&.
.PP
.nf
34 {
35     struct s2n_connection *conn;
36     uint8_t mac_key[] = "sample mac key";
37     uint8_t aes128_key[] = "123456789012345";
38     struct s2n_blob aes128 = {\&.data = aes128_key,\&.size = sizeof(aes128_key) };
39     uint8_t random_data[S2N_LARGE_RECORD_LENGTH + 1];
40     struct s2n_blob r = {\&.data = random_data, \&.size = sizeof(random_data)};
41 
42     BEGIN_TEST();
43 
44     EXPECT_NOT_NULL(conn = s2n_connection_new(S2N_SERVER));
45     EXPECT_SUCCESS(s2n_get_urandom_data(&r));
46 
47     /* Peer and we are in sync */
48     conn->server = &conn->secure;
49     conn->client = &conn->secure;
50 
51     /* test the AES128 cipher with a SHA1 hash */
52     conn->secure\&.cipher_suite->cipher = &s2n_aes128;
53     conn->secure\&.cipher_suite->hmac_alg = S2N_HMAC_SHA1;
54     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->get_encryption_key(&conn->secure\&.server_key, &aes128));
55     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->get_decryption_key(&conn->secure\&.client_key, &aes128));
56     EXPECT_SUCCESS(s2n_hmac_init(&conn->secure\&.client_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
57     EXPECT_SUCCESS(s2n_hmac_init(&conn->secure\&.server_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
58     conn->actual_protocol_version = S2N_TLS11;
59 
60     /* Align the record size, then subtract 20 bytes for the HMAC, 16 bytes for the explicit IV, and one byte
61      * for the padding length byte\&.
62      */
63     int small_aligned_payload = S2N_SMALL_FRAGMENT_LENGTH - (S2N_SMALL_FRAGMENT_LENGTH % 16) - 20 - 16 - 1;
64     int large_aligned_payload = S2N_LARGE_FRAGMENT_LENGTH - (S2N_LARGE_FRAGMENT_LENGTH % 16) - 20 - 16 - 1;
65 
66     int bytes_written;
67 
68     /* Check the default: small record */
69     EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
70     EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &r));
71     EXPECT_EQUAL(bytes_written, small_aligned_payload);
72 
73     /* Check explicitly small records */
74     EXPECT_SUCCESS(s2n_connection_prefer_low_latency(conn));
75     EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
76     EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &r));
77     EXPECT_EQUAL(bytes_written, small_aligned_payload);
78 
79     /* Check explicitly large records */
80     EXPECT_SUCCESS(s2n_connection_prefer_throughput(conn));
81     EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
82     EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &r));
83     EXPECT_EQUAL(bytes_written, large_aligned_payload);
84 
85     /* Clean up */
86     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->destroy_key(&conn->secure\&.server_key));
87     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->destroy_key(&conn->secure\&.client_key));
88     EXPECT_SUCCESS(s2n_connection_free(conn));
89     EXPECT_SUCCESS(s2n_hmac_init(&conn->secure\&.server_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
90     
91     END_TEST();
92 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
