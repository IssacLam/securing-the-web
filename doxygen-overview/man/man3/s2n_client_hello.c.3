.TH "s2n-master/tls/s2n_client_hello.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tls/s2n_client_hello.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/param\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'error/s2n_errno\&.h'\fP
.br
\fC#include 'tls/s2n_cipher_suites\&.h'\fP
.br
\fC#include 'tls/s2n_connection\&.h'\fP
.br
\fC#include 'tls/s2n_alerts\&.h'\fP
.br
\fC#include 'tls/s2n_tls\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'utils/s2n_random\&.h'\fP
.br
\fC#include 'utils/s2n_safety\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBS2N_TLS_CLIENT_HELLO\fP   1"
.br
.ti -1c
.RI "#define \fBS2N_SSL_CLIENT_HELLO\fP   1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBs2n_client_hello_recv\fP (struct \fBs2n_connection\fP *conn)"
.br
.ti -1c
.RI "int \fBs2n_client_hello_send\fP (struct \fBs2n_connection\fP *conn)"
.br
.ti -1c
.RI "int \fBs2n_sslv2_client_hello_recv\fP (struct \fBs2n_connection\fP *conn)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define S2N_TLS_CLIENT_HELLO   1"

.PP
Definition at line 33 of file s2n_client_hello\&.c\&.
.SS "#define S2N_SSL_CLIENT_HELLO   1"

.PP
Definition at line 37 of file s2n_client_hello\&.c\&.
.SH "Function Documentation"
.PP 
.SS "int s2n_client_hello_recv (struct \fBs2n_connection\fP * conn)"

.PP
Definition at line 39 of file s2n_client_hello\&.c\&.
.PP
.nf
40 {
41     struct s2n_stuffer *in = &conn->handshake\&.io;
42     uint8_t compression_methods;
43     uint16_t extensions_size;
44     uint16_t cipher_suites_length;
45     uint8_t *cipher_suites;
46     uint8_t client_protocol_version[S2N_TLS_PROTOCOL_VERSION_LEN];
47 
48     GUARD(s2n_stuffer_read_bytes(in, client_protocol_version, S2N_TLS_PROTOCOL_VERSION_LEN));
49     GUARD(s2n_stuffer_read_bytes(in, conn->secure\&.client_random, S2N_TLS_RANDOM_DATA_LEN));
50     GUARD(s2n_stuffer_read_uint8(in, &conn->session_id_len));
51 
52     conn->client_protocol_version = (client_protocol_version[0] * 10) + client_protocol_version[1];
53     if (conn->client_protocol_version < conn->config->cipher_preferences->minimum_protocol_version || conn->client_protocol_version > S2N_TLS12) {
54         GUARD(s2n_queue_reader_unsupported_protocol_version_alert(conn));
55         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
56     }
57     conn->client_hello_version = conn->client_protocol_version;
58     conn->actual_protocol_version = MIN(conn->client_protocol_version, conn->server_protocol_version);
59 
60     if (conn->session_id_len > S2N_TLS_SESSION_ID_MAX_LEN || conn->session_id_len > s2n_stuffer_data_available(in)) {
61         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
62     }
63 
64     GUARD(s2n_stuffer_read_bytes(in, conn->session_id, conn->session_id_len));
65 
66     GUARD(s2n_stuffer_read_uint16(in, &cipher_suites_length));
67     if (cipher_suites_length % S2N_TLS_CIPHER_SUITE_LEN) {
68         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
69     }
70     cipher_suites = s2n_stuffer_raw_read(in, cipher_suites_length);
71     notnull_check(cipher_suites);
72     /* Don't choose the cipher yet, read the extensions first */
73 
74     GUARD(s2n_stuffer_read_uint8(in, &compression_methods));
75     GUARD(s2n_stuffer_skip_read(in, compression_methods));
76 
77     /* This is going to be our default if the client has no preference\&. */
78     conn->secure\&.server_ecc_params\&.negotiated_curve = &s2n_ecc_supported_curves[0];
79 
80     if (s2n_stuffer_data_available(in) >= 2) {
81         /* Read extensions if they are present */
82         GUARD(s2n_stuffer_read_uint16(in, &extensions_size));
83 
84         if (extensions_size > s2n_stuffer_data_available(in)) {
85             S2N_ERROR(S2N_ERR_BAD_MESSAGE);
86         }
87 
88         struct s2n_blob extensions;
89         extensions\&.size = extensions_size;
90         extensions\&.data = s2n_stuffer_raw_read(in, extensions\&.size);
91         notnull_check(extensions\&.data);
92 
93         GUARD(s2n_client_extensions_recv(conn, &extensions));
94     }
95 
96     /* Now choose the ciphers and the cert chain\&. */
97     GUARD(s2n_set_cipher_as_tls_server(conn, cipher_suites, cipher_suites_length / 2));
98     conn->server->chosen_cert_chain = conn->config->cert_and_key_pairs;
99 
100     /* Set the handshake type */
101     GUARD(s2n_conn_set_handshake_type(conn));
102 
103     return 0;
104 }
.fi
.SS "int s2n_client_hello_send (struct \fBs2n_connection\fP * conn)"

.PP
Definition at line 106 of file s2n_client_hello\&.c\&.
.PP
.nf
107 {
108     uint32_t gmt_unix_time = time(NULL);
109     struct s2n_stuffer *out = &conn->handshake\&.io;
110     struct s2n_stuffer client_random;
111     struct s2n_blob b, r;
112     uint8_t session_id_len = 0;
113     uint8_t client_protocol_version[S2N_TLS_PROTOCOL_VERSION_LEN];
114 
115     b\&.data = conn->secure\&.client_random;
116     b\&.size = S2N_TLS_RANDOM_DATA_LEN;
117 
118     /* Create the client random data */
119     GUARD(s2n_stuffer_init(&client_random, &b));
120     GUARD(s2n_stuffer_write_uint32(&client_random, gmt_unix_time));
121 
122     r\&.data = s2n_stuffer_raw_write(&client_random, S2N_TLS_RANDOM_DATA_LEN - 4);
123     r\&.size = S2N_TLS_RANDOM_DATA_LEN - 4;
124     notnull_check(r\&.data);
125     GUARD(s2n_get_public_random_data(&r));
126 
127     client_protocol_version[0] = conn->client_protocol_version / 10;
128     client_protocol_version[1] = conn->client_protocol_version % 10;
129     conn->client_hello_version = conn->client_protocol_version;
130 
131     GUARD(s2n_stuffer_write_bytes(out, client_protocol_version, S2N_TLS_PROTOCOL_VERSION_LEN));
132     GUARD(s2n_stuffer_copy(&client_random, out, S2N_TLS_RANDOM_DATA_LEN));
133     GUARD(s2n_stuffer_write_uint8(out, session_id_len));
134     GUARD(s2n_stuffer_write_uint16(out, conn->config->cipher_preferences->count * S2N_TLS_CIPHER_SUITE_LEN));
135     GUARD(s2n_stuffer_write_bytes(out, conn->config->cipher_preferences->wire_format, conn->config->cipher_preferences->count * S2N_TLS_CIPHER_SUITE_LEN));
136 
137     /* Zero compression methods */
138     GUARD(s2n_stuffer_write_uint8(out, 1));
139     GUARD(s2n_stuffer_write_uint8(out, 0));
140 
141     /* Write the extensions */
142     GUARD(s2n_client_extensions_send(conn, out));
143 
144     return 0;
145 }
.fi
.SS "int s2n_sslv2_client_hello_recv (struct \fBs2n_connection\fP * conn)"

.PP
Definition at line 148 of file s2n_client_hello\&.c\&.
.PP
.nf
149 {
150     struct s2n_stuffer *in = &conn->handshake\&.io;
151     uint16_t session_id_length;
152     uint16_t cipher_suites_length;
153     uint16_t challenge_length;
154     uint8_t *cipher_suites;
155 
156     if (conn->client_protocol_version < conn->config->cipher_preferences->minimum_protocol_version || conn->client_protocol_version > S2N_TLS12) {
157         GUARD(s2n_queue_reader_unsupported_protocol_version_alert(conn));
158         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
159     }
160     conn->actual_protocol_version = MIN(conn->client_protocol_version, conn->server_protocol_version);
161     conn->client_hello_version = S2N_SSLv2;
162 
163     /* We start 5 bytes into the record */
164     GUARD(s2n_stuffer_read_uint16(in, &cipher_suites_length));
165 
166     if (cipher_suites_length % S2N_SSLv2_CIPHER_SUITE_LEN) {
167         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
168     }
169 
170     GUARD(s2n_stuffer_read_uint16(in, &session_id_length));
171 
172     GUARD(s2n_stuffer_read_uint16(in, &challenge_length));
173 
174     if (challenge_length > S2N_TLS_RANDOM_DATA_LEN) {
175         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
176     }
177 
178     cipher_suites = s2n_stuffer_raw_read(in, cipher_suites_length);
179     notnull_check(cipher_suites);
180     GUARD(s2n_set_cipher_as_sslv2_server(conn, cipher_suites, cipher_suites_length / S2N_SSLv2_CIPHER_SUITE_LEN));
181 
182     if (session_id_length > s2n_stuffer_data_available(in)) {
183         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
184     }
185     if (session_id_length > 0 && session_id_length <= S2N_TLS_SESSION_ID_MAX_LEN) {
186         GUARD(s2n_stuffer_read_bytes(in, conn->session_id, session_id_length));
187         conn->session_id_len = (uint8_t) session_id_length;
188     } else {
189         GUARD(s2n_stuffer_skip_read(in, session_id_length));
190     }
191 
192     struct s2n_blob b;
193     b\&.data = conn->secure\&.client_random;
194     b\&.size = S2N_TLS_RANDOM_DATA_LEN;
195 
196     b\&.data += S2N_TLS_RANDOM_DATA_LEN - challenge_length;
197     b\&.size -= S2N_TLS_RANDOM_DATA_LEN - challenge_length;
198 
199     GUARD(s2n_stuffer_read(in, &b));
200 
201     conn->server->chosen_cert_chain = conn->config->cert_and_key_pairs;
202     GUARD(s2n_conn_set_handshake_type(conn));
203 
204     return 0;
205 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
