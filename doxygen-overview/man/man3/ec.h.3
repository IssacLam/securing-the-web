.TH "s2n-master/libcrypto-build/openssl/include/openssl/ec.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/include/openssl/ec.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/opensslconf\&.h>\fP
.br
\fC#include <openssl/asn1\&.h>\fP
.br
\fC#include <openssl/symhacks\&.h>\fP
.br
\fC#include <openssl/bn\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBEC_builtin_curve\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBOPENSSL_ECC_MAX_FIELD_BITS\fP   661"
.br
.ti -1c
.RI "#define \fBOPENSSL_EC_NAMED_CURVE\fP   0x001"
.br
.ti -1c
.RI "#define \fBd2i_ECPKParameters_bio\fP(\fBbp\fP,  \fBx\fP)   \fBASN1_d2i_bio_of\fP(\fBEC_GROUP\fP,NULL,\fBd2i_ECPKParameters\fP,\fBbp\fP,\fBx\fP)"
.br
.ti -1c
.RI "#define \fBi2d_ECPKParameters_bio\fP(\fBbp\fP,  \fBx\fP)   \fBASN1_i2d_bio_of_const\fP(\fBEC_GROUP\fP,\fBi2d_ECPKParameters\fP,\fBbp\fP,\fBx\fP)"
.br
.ti -1c
.RI "#define \fBd2i_ECPKParameters_fp\fP(\fBfp\fP,  \fBx\fP)"
.br
.ti -1c
.RI "#define \fBi2d_ECPKParameters_fp\fP(\fBfp\fP,  \fBx\fP)"
.br
.ti -1c
.RI "#define \fBEC_PKEY_NO_PARAMETERS\fP   0x001"
.br
.ti -1c
.RI "#define \fBEC_PKEY_NO_PUBKEY\fP   0x002"
.br
.ti -1c
.RI "#define \fBEC_FLAG_NON_FIPS_ALLOW\fP   0x1"
.br
.ti -1c
.RI "#define \fBEC_FLAG_FIPS_CHECKED\fP   0x2"
.br
.ti -1c
.RI "#define \fBECParameters_dup\fP(\fBx\fP)   \fBASN1_dup_of\fP(\fBEC_KEY\fP,\fBi2d_ECParameters\fP,\fBd2i_ECParameters\fP,\fBx\fP)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set_ec_paramgen_curve_nid\fP(ctx,  \fBnid\fP)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set_ec_param_enc\fP(ctx,  flag)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set_ecdh_cofactor_mode\fP(ctx,  flag)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_get_ecdh_cofactor_mode\fP(ctx)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set_ecdh_kdf_type\fP(ctx,  kdf)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_get_ecdh_kdf_type\fP(ctx)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set_ecdh_kdf_md\fP(ctx,  md)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_get_ecdh_kdf_md\fP(ctx,  pmd)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set_ecdh_kdf_outlen\fP(ctx,  \fBlen\fP)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_get_ecdh_kdf_outlen\fP(ctx,  plen)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_set0_ecdh_kdf_ukm\fP(ctx,  \fBp\fP,  plen)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTX_get0_ecdh_kdf_ukm\fP(ctx,  \fBp\fP)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 1)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_EC_PARAM_ENC\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 2)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_EC_ECDH_COFACTOR\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 3)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_EC_KDF_TYPE\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 4)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_EC_KDF_MD\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 5)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_GET_EC_KDF_MD\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 6)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_EC_KDF_OUTLEN\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 7)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_GET_EC_KDF_OUTLEN\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 8)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_EC_KDF_UKM\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 9)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_CTRL_GET_EC_KDF_UKM\fP   (\fBEVP_PKEY_ALG_CTRL\fP + 10)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_ECDH_KDF_NONE\fP   1"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_ECDH_KDF_X9_62\fP   2"
.br
.ti -1c
.RI "#define \fBEC_F_BN_TO_FELEM\fP   224"
.br
.ti -1c
.RI "#define \fBEC_F_COMPUTE_WNAF\fP   143"
.br
.ti -1c
.RI "#define \fBEC_F_D2I_ECPARAMETERS\fP   144"
.br
.ti -1c
.RI "#define \fBEC_F_D2I_ECPKPARAMETERS\fP   145"
.br
.ti -1c
.RI "#define \fBEC_F_D2I_ECPRIVATEKEY\fP   146"
.br
.ti -1c
.RI "#define \fBEC_F_DO_EC_KEY_PRINT\fP   221"
.br
.ti -1c
.RI "#define \fBEC_F_ECDH_CMS_DECRYPT\fP   238"
.br
.ti -1c
.RI "#define \fBEC_F_ECDH_CMS_SET_SHARED_INFO\fP   239"
.br
.ti -1c
.RI "#define \fBEC_F_ECKEY_PARAM2TYPE\fP   223"
.br
.ti -1c
.RI "#define \fBEC_F_ECKEY_PARAM_DECODE\fP   212"
.br
.ti -1c
.RI "#define \fBEC_F_ECKEY_PRIV_DECODE\fP   213"
.br
.ti -1c
.RI "#define \fBEC_F_ECKEY_PRIV_ENCODE\fP   214"
.br
.ti -1c
.RI "#define \fBEC_F_ECKEY_PUB_DECODE\fP   215"
.br
.ti -1c
.RI "#define \fBEC_F_ECKEY_PUB_ENCODE\fP   216"
.br
.ti -1c
.RI "#define \fBEC_F_ECKEY_TYPE2PARAM\fP   220"
.br
.ti -1c
.RI "#define \fBEC_F_ECPARAMETERS_PRINT\fP   147"
.br
.ti -1c
.RI "#define \fBEC_F_ECPARAMETERS_PRINT_FP\fP   148"
.br
.ti -1c
.RI "#define \fBEC_F_ECPKPARAMETERS_PRINT\fP   149"
.br
.ti -1c
.RI "#define \fBEC_F_ECPKPARAMETERS_PRINT_FP\fP   150"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NISTZ256_GET_AFFINE\fP   240"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NISTZ256_MULT_PRECOMPUTE\fP   243"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NISTZ256_POINTS_MUL\fP   241"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NISTZ256_PRE_COMP_NEW\fP   244"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NISTZ256_SET_WORDS\fP   245"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NISTZ256_WINDOWED_MUL\fP   242"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NIST_MOD_192\fP   203"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NIST_MOD_224\fP   204"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NIST_MOD_256\fP   205"
.br
.ti -1c
.RI "#define \fBEC_F_ECP_NIST_MOD_521\fP   206"
.br
.ti -1c
.RI "#define \fBEC_F_EC_ASN1_GROUP2CURVE\fP   153"
.br
.ti -1c
.RI "#define \fBEC_F_EC_ASN1_GROUP2FIELDID\fP   154"
.br
.ti -1c
.RI "#define \fBEC_F_EC_ASN1_GROUP2PARAMETERS\fP   155"
.br
.ti -1c
.RI "#define \fBEC_F_EC_ASN1_GROUP2PKPARAMETERS\fP   156"
.br
.ti -1c
.RI "#define \fBEC_F_EC_ASN1_PARAMETERS2GROUP\fP   157"
.br
.ti -1c
.RI "#define \fBEC_F_EC_ASN1_PKPARAMETERS2GROUP\fP   158"
.br
.ti -1c
.RI "#define \fBEC_F_EC_EX_DATA_SET_DATA\fP   211"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY\fP   208"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT\fP   159"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE\fP   195"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_SIMPLE_OCT2POINT\fP   160"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_SIMPLE_POINT2OCT\fP   161"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES\fP   162"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES\fP   163"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES\fP   164"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_MONT_FIELD_DECODE\fP   133"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_MONT_FIELD_ENCODE\fP   134"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_MONT_FIELD_MUL\fP   131"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_MONT_FIELD_SET_TO_ONE\fP   209"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_MONT_FIELD_SQR\fP   132"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_MONT_GROUP_SET_CURVE\fP   189"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP\fP   135"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP224_GROUP_SET_CURVE\fP   225"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP224_POINTS_MUL\fP   228"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES\fP   226"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP256_GROUP_SET_CURVE\fP   230"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP256_POINTS_MUL\fP   231"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES\fP   232"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP521_GROUP_SET_CURVE\fP   233"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP521_POINTS_MUL\fP   234"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES\fP   235"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NIST_FIELD_MUL\fP   200"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NIST_FIELD_SQR\fP   201"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_NIST_GROUP_SET_CURVE\fP   202"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT\fP   165"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE\fP   166"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP\fP   100"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR\fP   101"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_MAKE_AFFINE\fP   102"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_OCT2POINT\fP   103"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_POINT2OCT\fP   104"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE\fP   137"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES\fP   167"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP\fP   105"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES\fP   168"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP\fP   128"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES\fP   169"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP\fP   129"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_CHECK\fP   170"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_CHECK_DISCRIMINANT\fP   171"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_COPY\fP   106"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET0_GENERATOR\fP   139"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET_COFACTOR\fP   140"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET_CURVE_GF2M\fP   172"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET_CURVE_GFP\fP   130"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET_DEGREE\fP   173"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET_ORDER\fP   141"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET_PENTANOMIAL_BASIS\fP   193"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_GET_TRINOMIAL_BASIS\fP   194"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_NEW\fP   108"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_NEW_BY_CURVE_NAME\fP   174"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_NEW_FROM_DATA\fP   175"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_PRECOMPUTE_MULT\fP   142"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_SET_CURVE_GF2M\fP   176"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_SET_CURVE_GFP\fP   109"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_SET_EXTRA_DATA\fP   110"
.br
.ti -1c
.RI "#define \fBEC_F_EC_GROUP_SET_GENERATOR\fP   111"
.br
.ti -1c
.RI "#define \fBEC_F_EC_KEY_CHECK_KEY\fP   177"
.br
.ti -1c
.RI "#define \fBEC_F_EC_KEY_COPY\fP   178"
.br
.ti -1c
.RI "#define \fBEC_F_EC_KEY_GENERATE_KEY\fP   179"
.br
.ti -1c
.RI "#define \fBEC_F_EC_KEY_NEW\fP   182"
.br
.ti -1c
.RI "#define \fBEC_F_EC_KEY_PRINT\fP   180"
.br
.ti -1c
.RI "#define \fBEC_F_EC_KEY_PRINT_FP\fP   181"
.br
.ti -1c
.RI "#define \fBEC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES\fP   229"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINTS_MAKE_AFFINE\fP   136"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_ADD\fP   112"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_CMP\fP   113"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_COPY\fP   114"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_DBL\fP   115"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M\fP   183"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP\fP   116"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP\fP   117"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_INVERT\fP   210"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_IS_AT_INFINITY\fP   118"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_IS_ON_CURVE\fP   119"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_MAKE_AFFINE\fP   120"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_MUL\fP   184"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_NEW\fP   121"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_OCT2POINT\fP   122"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_POINT2OCT\fP   123"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M\fP   185"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP\fP   124"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M\fP   186"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP\fP   125"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP\fP   126"
.br
.ti -1c
.RI "#define \fBEC_F_EC_POINT_SET_TO_INFINITY\fP   127"
.br
.ti -1c
.RI "#define \fBEC_F_EC_PRE_COMP_DUP\fP   207"
.br
.ti -1c
.RI "#define \fBEC_F_EC_PRE_COMP_NEW\fP   196"
.br
.ti -1c
.RI "#define \fBEC_F_EC_WNAF_MUL\fP   187"
.br
.ti -1c
.RI "#define \fBEC_F_EC_WNAF_PRECOMPUTE_MULT\fP   188"
.br
.ti -1c
.RI "#define \fBEC_F_I2D_ECPARAMETERS\fP   190"
.br
.ti -1c
.RI "#define \fBEC_F_I2D_ECPKPARAMETERS\fP   191"
.br
.ti -1c
.RI "#define \fBEC_F_I2D_ECPRIVATEKEY\fP   192"
.br
.ti -1c
.RI "#define \fBEC_F_I2O_ECPUBLICKEY\fP   151"
.br
.ti -1c
.RI "#define \fBEC_F_NISTP224_PRE_COMP_NEW\fP   227"
.br
.ti -1c
.RI "#define \fBEC_F_NISTP256_PRE_COMP_NEW\fP   236"
.br
.ti -1c
.RI "#define \fBEC_F_NISTP521_PRE_COMP_NEW\fP   237"
.br
.ti -1c
.RI "#define \fBEC_F_O2I_ECPUBLICKEY\fP   152"
.br
.ti -1c
.RI "#define \fBEC_F_OLD_EC_PRIV_DECODE\fP   222"
.br
.ti -1c
.RI "#define \fBEC_F_PKEY_EC_CTRL\fP   197"
.br
.ti -1c
.RI "#define \fBEC_F_PKEY_EC_CTRL_STR\fP   198"
.br
.ti -1c
.RI "#define \fBEC_F_PKEY_EC_DERIVE\fP   217"
.br
.ti -1c
.RI "#define \fBEC_F_PKEY_EC_KEYGEN\fP   199"
.br
.ti -1c
.RI "#define \fBEC_F_PKEY_EC_PARAMGEN\fP   219"
.br
.ti -1c
.RI "#define \fBEC_F_PKEY_EC_SIGN\fP   218"
.br
.ti -1c
.RI "#define \fBEC_R_ASN1_ERROR\fP   115"
.br
.ti -1c
.RI "#define \fBEC_R_ASN1_UNKNOWN_FIELD\fP   116"
.br
.ti -1c
.RI "#define \fBEC_R_BIGNUM_OUT_OF_RANGE\fP   144"
.br
.ti -1c
.RI "#define \fBEC_R_BUFFER_TOO_SMALL\fP   100"
.br
.ti -1c
.RI "#define \fBEC_R_COORDINATES_OUT_OF_RANGE\fP   146"
.br
.ti -1c
.RI "#define \fBEC_R_D2I_ECPKPARAMETERS_FAILURE\fP   117"
.br
.ti -1c
.RI "#define \fBEC_R_DECODE_ERROR\fP   142"
.br
.ti -1c
.RI "#define \fBEC_R_DISCRIMINANT_IS_ZERO\fP   118"
.br
.ti -1c
.RI "#define \fBEC_R_EC_GROUP_NEW_BY_NAME_FAILURE\fP   119"
.br
.ti -1c
.RI "#define \fBEC_R_FIELD_TOO_LARGE\fP   143"
.br
.ti -1c
.RI "#define \fBEC_R_GF2M_NOT_SUPPORTED\fP   147"
.br
.ti -1c
.RI "#define \fBEC_R_GROUP2PKPARAMETERS_FAILURE\fP   120"
.br
.ti -1c
.RI "#define \fBEC_R_I2D_ECPKPARAMETERS_FAILURE\fP   121"
.br
.ti -1c
.RI "#define \fBEC_R_INCOMPATIBLE_OBJECTS\fP   101"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_ARGUMENT\fP   112"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_COMPRESSED_POINT\fP   110"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_COMPRESSION_BIT\fP   109"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_CURVE\fP   141"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_DIGEST\fP   151"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_DIGEST_TYPE\fP   138"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_ENCODING\fP   102"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_FIELD\fP   103"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_FORM\fP   104"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_GROUP_ORDER\fP   122"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_PENTANOMIAL_BASIS\fP   132"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_PRIVATE_KEY\fP   123"
.br
.ti -1c
.RI "#define \fBEC_R_INVALID_TRINOMIAL_BASIS\fP   137"
.br
.ti -1c
.RI "#define \fBEC_R_KDF_PARAMETER_ERROR\fP   148"
.br
.ti -1c
.RI "#define \fBEC_R_KEYS_NOT_SET\fP   140"
.br
.ti -1c
.RI "#define \fBEC_R_MISSING_PARAMETERS\fP   124"
.br
.ti -1c
.RI "#define \fBEC_R_MISSING_PRIVATE_KEY\fP   125"
.br
.ti -1c
.RI "#define \fBEC_R_NOT_A_NIST_PRIME\fP   135"
.br
.ti -1c
.RI "#define \fBEC_R_NOT_A_SUPPORTED_NIST_PRIME\fP   136"
.br
.ti -1c
.RI "#define \fBEC_R_NOT_IMPLEMENTED\fP   126"
.br
.ti -1c
.RI "#define \fBEC_R_NOT_INITIALIZED\fP   111"
.br
.ti -1c
.RI "#define \fBEC_R_NO_FIELD_MOD\fP   133"
.br
.ti -1c
.RI "#define \fBEC_R_NO_PARAMETERS_SET\fP   139"
.br
.ti -1c
.RI "#define \fBEC_R_PASSED_NULL_PARAMETER\fP   134"
.br
.ti -1c
.RI "#define \fBEC_R_PEER_KEY_ERROR\fP   149"
.br
.ti -1c
.RI "#define \fBEC_R_PKPARAMETERS2GROUP_FAILURE\fP   127"
.br
.ti -1c
.RI "#define \fBEC_R_POINT_AT_INFINITY\fP   106"
.br
.ti -1c
.RI "#define \fBEC_R_POINT_IS_NOT_ON_CURVE\fP   107"
.br
.ti -1c
.RI "#define \fBEC_R_SHARED_INFO_ERROR\fP   150"
.br
.ti -1c
.RI "#define \fBEC_R_SLOT_FULL\fP   108"
.br
.ti -1c
.RI "#define \fBEC_R_UNDEFINED_GENERATOR\fP   113"
.br
.ti -1c
.RI "#define \fBEC_R_UNDEFINED_ORDER\fP   128"
.br
.ti -1c
.RI "#define \fBEC_R_UNKNOWN_GROUP\fP   129"
.br
.ti -1c
.RI "#define \fBEC_R_UNKNOWN_ORDER\fP   114"
.br
.ti -1c
.RI "#define \fBEC_R_UNSUPPORTED_FIELD\fP   131"
.br
.ti -1c
.RI "#define \fBEC_R_WRONG_CURVE_PARAMETERS\fP   145"
.br
.ti -1c
.RI "#define \fBEC_R_WRONG_ORDER\fP   130"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBec_method_st\fP \fBEC_METHOD\fP"
.br
.ti -1c
.RI "typedef struct \fBec_group_st\fP \fBEC_GROUP\fP"
.br
.ti -1c
.RI "typedef struct \fBec_point_st\fP \fBEC_POINT\fP"
.br
.ti -1c
.RI "typedef struct ecpk_parameters_st \fBECPKPARAMETERS\fP"
.br
.ti -1c
.RI "typedef struct \fBec_key_st\fP \fBEC_KEY\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBpoint_conversion_form_t\fP { \fBPOINT_CONVERSION_COMPRESSED\fP = 2, \fBPOINT_CONVERSION_UNCOMPRESSED\fP = 4, \fBPOINT_CONVERSION_HYBRID\fP = 6, \fBPOINT_CONVERSION_COMPRESSED\fP = 2, \fBPOINT_CONVERSION_UNCOMPRESSED\fP = 4, \fBPOINT_CONVERSION_HYBRID\fP = 6 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GFp_simple_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GFp_mont_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GFp_nist_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GFp_nistp224_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GFp_nistp256_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GFp_nistp521_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GF2m_simple_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBEC_GROUP\fP * \fBEC_GROUP_new\fP (const \fBEC_METHOD\fP *meth)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_GROUP_free\fP (\fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_GROUP_clear_free\fP (\fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBEC_GROUP_copy\fP (\fBEC_GROUP\fP *dst, const \fBEC_GROUP\fP *src)"
.br
.ti -1c
.RI "\fBEC_GROUP\fP * \fBEC_GROUP_dup\fP (const \fBEC_GROUP\fP *src)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_GROUP_method_of\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBEC_METHOD_get_field_type\fP (const \fBEC_METHOD\fP *meth)"
.br
.ti -1c
.RI "int \fBEC_GROUP_set_generator\fP (\fBEC_GROUP\fP *group, const \fBEC_POINT\fP *generator, const \fBBIGNUM\fP *order, const \fBBIGNUM\fP *cofactor)"
.br
.ti -1c
.RI "const \fBEC_POINT\fP * \fBEC_GROUP_get0_generator\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "\fBBN_MONT_CTX\fP * \fBEC_GROUP_get_mont_data\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_order\fP (const \fBEC_GROUP\fP *group, \fBBIGNUM\fP *order, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_cofactor\fP (const \fBEC_GROUP\fP *group, \fBBIGNUM\fP *cofactor, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_GROUP_set_curve_name\fP (\fBEC_GROUP\fP *group, int \fBnid\fP)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_curve_name\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_GROUP_set_asn1_flag\fP (\fBEC_GROUP\fP *group, int flag)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_asn1_flag\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_GROUP_set_point_conversion_form\fP (\fBEC_GROUP\fP *group, \fBpoint_conversion_form_t\fP \fBform\fP)"
.br
.ti -1c
.RI "\fBpoint_conversion_form_t\fP \fBEC_GROUP_get_point_conversion_form\fP (const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "unsigned char * \fBEC_GROUP_get0_seed\fP (const \fBEC_GROUP\fP *\fBx\fP)"
.br
.ti -1c
.RI "size_t \fBEC_GROUP_get_seed_len\fP (const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "size_t \fBEC_GROUP_set_seed\fP (\fBEC_GROUP\fP *, const unsigned char *, size_t \fBlen\fP)"
.br
.ti -1c
.RI "int \fBEC_GROUP_set_curve_GFp\fP (\fBEC_GROUP\fP *group, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_curve_GFp\fP (const \fBEC_GROUP\fP *group, \fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_set_curve_GF2m\fP (\fBEC_GROUP\fP *group, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_curve_GF2m\fP (const \fBEC_GROUP\fP *group, \fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_degree\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBEC_GROUP_check\fP (const \fBEC_GROUP\fP *group, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_check_discriminant\fP (const \fBEC_GROUP\fP *group, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_cmp\fP (const \fBEC_GROUP\fP *\fBa\fP, const \fBEC_GROUP\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBEC_GROUP\fP * \fBEC_GROUP_new_curve_GFp\fP (const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBEC_GROUP\fP * \fBEC_GROUP_new_curve_GF2m\fP (const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBEC_GROUP\fP * \fBEC_GROUP_new_by_curve_name\fP (int \fBnid\fP)"
.br
.ti -1c
.RI "size_t \fBEC_get_builtin_curves\fP (\fBEC_builtin_curve\fP *r, size_t nitems)"
.br
.ti -1c
.RI "const char * \fBEC_curve_nid2nist\fP (int \fBnid\fP)"
.br
.ti -1c
.RI "int \fBEC_curve_nist2nid\fP (const char *name)"
.br
.ti -1c
.RI "\fBEC_POINT\fP * \fBEC_POINT_new\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_POINT_free\fP (\fBEC_POINT\fP *point)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_POINT_clear_free\fP (\fBEC_POINT\fP *point)"
.br
.ti -1c
.RI "int \fBEC_POINT_copy\fP (\fBEC_POINT\fP *dst, const \fBEC_POINT\fP *src)"
.br
.ti -1c
.RI "\fBEC_POINT\fP * \fBEC_POINT_dup\fP (const \fBEC_POINT\fP *src, const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "const \fBEC_METHOD\fP * \fBEC_POINT_method_of\fP (const \fBEC_POINT\fP *point)"
.br
.ti -1c
.RI "int \fBEC_POINT_set_to_infinity\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *point)"
.br
.ti -1c
.RI "int \fBEC_POINT_set_Jprojective_coordinates_GFp\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *\fBp\fP, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, const \fBBIGNUM\fP *z, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_get_Jprojective_coordinates_GFp\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *\fBp\fP, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBIGNUM\fP *z, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_set_affine_coordinates_GFp\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *\fBp\fP, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_get_affine_coordinates_GFp\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *\fBp\fP, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_set_compressed_coordinates_GFp\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *\fBp\fP, const \fBBIGNUM\fP *\fBx\fP, int y_bit, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_set_affine_coordinates_GF2m\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *\fBp\fP, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_get_affine_coordinates_GF2m\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *\fBp\fP, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_set_compressed_coordinates_GF2m\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *\fBp\fP, const \fBBIGNUM\fP *\fBx\fP, int y_bit, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "size_t \fBEC_POINT_point2oct\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *\fBp\fP, \fBpoint_conversion_form_t\fP \fBform\fP, unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_oct2point\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *\fBp\fP, const unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBEC_POINT_point2bn\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP \fBform\fP, \fBBIGNUM\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "\fBEC_POINT\fP * \fBEC_POINT_bn2point\fP (const \fBEC_GROUP\fP *, const \fBBIGNUM\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "char * \fBEC_POINT_point2hex\fP (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP \fBform\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "\fBEC_POINT\fP * \fBEC_POINT_hex2point\fP (const \fBEC_GROUP\fP *, const char *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBEC_POINT_add\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_dbl\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_invert\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *\fBa\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_is_at_infinity\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *\fBp\fP)"
.br
.ti -1c
.RI "int \fBEC_POINT_is_on_curve\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *point, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_cmp\fP (const \fBEC_GROUP\fP *group, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_make_affine\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *point, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINTs_make_affine\fP (const \fBEC_GROUP\fP *group, size_t \fBnum\fP, \fBEC_POINT\fP *points[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINTs_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *n, size_t \fBnum\fP, const \fBEC_POINT\fP *\fBp\fP[], const \fBBIGNUM\fP *m[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_POINT_mul\fP (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *n, const \fBEC_POINT\fP *q, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_precompute_mult\fP (\fBEC_GROUP\fP *group, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_GROUP_have_precompute_mult\fP (const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_basis_type\fP (const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_trinomial_basis\fP (const \fBEC_GROUP\fP *, unsigned int *k)"
.br
.ti -1c
.RI "int \fBEC_GROUP_get_pentanomial_basis\fP (const \fBEC_GROUP\fP *, unsigned int *k1, unsigned int *k2, unsigned int *k3)"
.br
.ti -1c
.RI "\fBEC_GROUP\fP * \fBd2i_ECPKParameters\fP (\fBEC_GROUP\fP **, const unsigned char **in, long \fBlen\fP)"
.br
.ti -1c
.RI "int \fBi2d_ECPKParameters\fP (const \fBEC_GROUP\fP *, unsigned char **out)"
.br
.ti -1c
.RI "int \fBECPKParameters_print\fP (\fBBIO\fP *\fBbp\fP, const \fBEC_GROUP\fP *\fBx\fP, int off)"
.br
.ti -1c
.RI "int \fBECPKParameters_print_fp\fP (FILE *\fBfp\fP, const \fBEC_GROUP\fP *\fBx\fP, int off)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBEC_KEY_get_flags\fP (const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_flags\fP (\fBEC_KEY\fP *key, int \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_clear_flags\fP (\fBEC_KEY\fP *key, int \fBflags\fP)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_new_by_curve_name\fP (int \fBnid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_free\fP (\fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_copy\fP (\fBEC_KEY\fP *dst, const \fBEC_KEY\fP *src)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBEC_KEY_dup\fP (const \fBEC_KEY\fP *src)"
.br
.ti -1c
.RI "int \fBEC_KEY_up_ref\fP (\fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "const \fBEC_GROUP\fP * \fBEC_KEY_get0_group\fP (const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_group\fP (\fBEC_KEY\fP *key, const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBEC_KEY_get0_private_key\fP (const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_private_key\fP (\fBEC_KEY\fP *key, const \fBBIGNUM\fP *prv)"
.br
.ti -1c
.RI "const \fBEC_POINT\fP * \fBEC_KEY_get0_public_key\fP (const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_public_key\fP (\fBEC_KEY\fP *key, const \fBEC_POINT\fP *pub)"
.br
.ti -1c
.RI "unsigned \fBEC_KEY_get_enc_flags\fP (const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_enc_flags\fP (\fBEC_KEY\fP *eckey, unsigned int \fBflags\fP)"
.br
.ti -1c
.RI "\fBpoint_conversion_form_t\fP \fBEC_KEY_get_conv_form\fP (const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_conv_form\fP (\fBEC_KEY\fP *eckey, \fBpoint_conversion_form_t\fP cform)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEC_KEY_get_key_method_data\fP (\fBEC_KEY\fP *key, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP * \fBEC_KEY_insert_key_method_data\fP (\fBEC_KEY\fP *key, \fBvoid\fP *data, \fBvoid\fP *(*dup_func)(\fBvoid\fP *), \fBvoid\fP(*\fBfree_func\fP)(\fBvoid\fP *), \fBvoid\fP(*clear_free_func)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBEC_KEY_set_asn1_flag\fP (\fBEC_KEY\fP *eckey, int asn1_flag)"
.br
.ti -1c
.RI "int \fBEC_KEY_precompute_mult\fP (\fBEC_KEY\fP *key, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBEC_KEY_generate_key\fP (\fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "int \fBEC_KEY_check_key\fP (const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "int \fBEC_KEY_set_public_key_affine_coordinates\fP (\fBEC_KEY\fP *key, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBd2i_ECPrivateKey\fP (\fBEC_KEY\fP **key, const unsigned char **in, long \fBlen\fP)"
.br
.ti -1c
.RI "int \fBi2d_ECPrivateKey\fP (\fBEC_KEY\fP *key, unsigned char **out)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBd2i_ECParameters\fP (\fBEC_KEY\fP **key, const unsigned char **in, long \fBlen\fP)"
.br
.ti -1c
.RI "int \fBi2d_ECParameters\fP (\fBEC_KEY\fP *key, unsigned char **out)"
.br
.ti -1c
.RI "\fBEC_KEY\fP * \fBo2i_ECPublicKey\fP (\fBEC_KEY\fP **key, const unsigned char **in, long \fBlen\fP)"
.br
.ti -1c
.RI "int \fBi2o_ECPublicKey\fP (\fBEC_KEY\fP *key, unsigned char **out)"
.br
.ti -1c
.RI "int \fBECParameters_print\fP (\fBBIO\fP *\fBbp\fP, const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "int \fBEC_KEY_print\fP (\fBBIO\fP *\fBbp\fP, const \fBEC_KEY\fP *key, int off)"
.br
.ti -1c
.RI "int \fBECParameters_print_fp\fP (FILE *\fBfp\fP, const \fBEC_KEY\fP *key)"
.br
.ti -1c
.RI "int \fBEC_KEY_print_fp\fP (FILE *\fBfp\fP, const \fBEC_KEY\fP *key, int off)"
.br
.ti -1c
.RI "\fBvoid\fP \fBERR_load_EC_strings\fP (\fBvoid\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define OPENSSL_ECC_MAX_FIELD_BITS   661"

.PP
Definition at line 100 of file ec\&.h\&.
.SS "#define OPENSSL_EC_NAMED_CURVE   0x001"

.PP
Definition at line 716 of file ec\&.h\&.
.SS "#define d2i_ECPKParameters_bio(\fBbp\fP, \fBx\fP)   \fBASN1_d2i_bio_of\fP(\fBEC_GROUP\fP,NULL,\fBd2i_ECPKParameters\fP,\fBbp\fP,\fBx\fP)"

.PP
Definition at line 723 of file ec\&.h\&.
.SS "#define i2d_ECPKParameters_bio(\fBbp\fP, \fBx\fP)   \fBASN1_i2d_bio_of_const\fP(\fBEC_GROUP\fP,\fBi2d_ECPKParameters\fP,\fBbp\fP,\fBx\fP)"

.PP
Definition at line 724 of file ec\&.h\&.
.SS "#define d2i_ECPKParameters_fp(\fBfp\fP, \fBx\fP)"
\fBValue:\fP
.PP
.nf
(EC_GROUP *)ASN1_d2i_fp(NULL, \
                (char *(*)())d2i_ECPKParameters,(fp),(unsigned char **)(x))
.fi
.PP
Definition at line 725 of file ec\&.h\&.
.SS "#define i2d_ECPKParameters_fp(\fBfp\fP, \fBx\fP)"
\fBValue:\fP
.PP
.nf
ASN1_i2d_fp(i2d_ECPKParameters,(fp), \
                (unsigned char *)(x))
.fi
.PP
Definition at line 727 of file ec\&.h\&.
.SS "#define EC_PKEY_NO_PARAMETERS   0x001"

.PP
Definition at line 744 of file ec\&.h\&.
.SS "#define EC_PKEY_NO_PUBKEY   0x002"

.PP
Definition at line 745 of file ec\&.h\&.
.SS "#define EC_FLAG_NON_FIPS_ALLOW   0x1"

.PP
Definition at line 748 of file ec\&.h\&.
.SS "#define EC_FLAG_FIPS_CHECKED   0x2"

.PP
Definition at line 749 of file ec\&.h\&.
.SS "#define ECParameters_dup(\fBx\fP)   \fBASN1_dup_of\fP(\fBEC_KEY\fP,\fBi2d_ECParameters\fP,\fBd2i_ECParameters\fP,\fBx\fP)"

.PP
Definition at line 987 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx, \fBnid\fP)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_PARAMGEN|EVP_PKEY_OP_KEYGEN, \
                                EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID, nid, NULL)
.fi
.PP
Definition at line 997 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_set_ec_param_enc(ctx, flag)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_PARAMGEN|EVP_PKEY_OP_KEYGEN, \
                                EVP_PKEY_CTRL_EC_PARAM_ENC, flag, NULL)
.fi
.PP
Definition at line 1002 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_set_ecdh_cofactor_mode(ctx, flag)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_EC_ECDH_COFACTOR, flag, NULL)
.fi
.PP
Definition at line 1007 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_get_ecdh_cofactor_mode(ctx)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_EC_ECDH_COFACTOR, -2, NULL)
.fi
.PP
Definition at line 1012 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_set_ecdh_kdf_type(ctx, kdf)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_EC_KDF_TYPE, kdf, NULL)
.fi
.PP
Definition at line 1017 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_get_ecdh_kdf_type(ctx)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_EC_KDF_TYPE, -2, NULL)
.fi
.PP
Definition at line 1022 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_set_ecdh_kdf_md(ctx, md)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_EC_KDF_MD, 0, (void *)md)
.fi
.PP
Definition at line 1027 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_get_ecdh_kdf_md(ctx, pmd)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_GET_EC_KDF_MD, 0, (void *)pmd)
.fi
.PP
Definition at line 1032 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_set_ecdh_kdf_outlen(ctx, \fBlen\fP)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_EC_KDF_OUTLEN, len, NULL)
.fi
.PP
Definition at line 1037 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_get_ecdh_kdf_outlen(ctx, plen)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                        EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN, 0, (void *)plen)
.fi
.PP
Definition at line 1042 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_set0_ecdh_kdf_ukm(ctx, \fBp\fP, plen)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_EC_KDF_UKM, plen, (void *)p)
.fi
.PP
Definition at line 1047 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTX_get0_ecdh_kdf_ukm(ctx, \fBp\fP)"
\fBValue:\fP
.PP
.nf
EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, \
                                EVP_PKEY_OP_DERIVE, \
                                EVP_PKEY_CTRL_GET_EC_KDF_UKM, 0, (void *)p)
.fi
.PP
Definition at line 1052 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID   (\fBEVP_PKEY_ALG_CTRL\fP + 1)"

.PP
Definition at line 1057 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_EC_PARAM_ENC   (\fBEVP_PKEY_ALG_CTRL\fP + 2)"

.PP
Definition at line 1058 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_EC_ECDH_COFACTOR   (\fBEVP_PKEY_ALG_CTRL\fP + 3)"

.PP
Definition at line 1059 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_EC_KDF_TYPE   (\fBEVP_PKEY_ALG_CTRL\fP + 4)"

.PP
Definition at line 1060 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_EC_KDF_MD   (\fBEVP_PKEY_ALG_CTRL\fP + 5)"

.PP
Definition at line 1061 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_GET_EC_KDF_MD   (\fBEVP_PKEY_ALG_CTRL\fP + 6)"

.PP
Definition at line 1062 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_EC_KDF_OUTLEN   (\fBEVP_PKEY_ALG_CTRL\fP + 7)"

.PP
Definition at line 1063 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN   (\fBEVP_PKEY_ALG_CTRL\fP + 8)"

.PP
Definition at line 1064 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_EC_KDF_UKM   (\fBEVP_PKEY_ALG_CTRL\fP + 9)"

.PP
Definition at line 1065 of file ec\&.h\&.
.SS "#define EVP_PKEY_CTRL_GET_EC_KDF_UKM   (\fBEVP_PKEY_ALG_CTRL\fP + 10)"

.PP
Definition at line 1066 of file ec\&.h\&.
.SS "#define EVP_PKEY_ECDH_KDF_NONE   1"

.PP
Definition at line 1068 of file ec\&.h\&.
.SS "#define EVP_PKEY_ECDH_KDF_X9_62   2"

.PP
Definition at line 1069 of file ec\&.h\&.
.SS "#define EC_F_BN_TO_FELEM   224"

.PP
Definition at line 1081 of file ec\&.h\&.
.SS "#define EC_F_COMPUTE_WNAF   143"

.PP
Definition at line 1082 of file ec\&.h\&.
.SS "#define EC_F_D2I_ECPARAMETERS   144"

.PP
Definition at line 1083 of file ec\&.h\&.
.SS "#define EC_F_D2I_ECPKPARAMETERS   145"

.PP
Definition at line 1084 of file ec\&.h\&.
.SS "#define EC_F_D2I_ECPRIVATEKEY   146"

.PP
Definition at line 1085 of file ec\&.h\&.
.SS "#define EC_F_DO_EC_KEY_PRINT   221"

.PP
Definition at line 1086 of file ec\&.h\&.
.SS "#define EC_F_ECDH_CMS_DECRYPT   238"

.PP
Definition at line 1087 of file ec\&.h\&.
.SS "#define EC_F_ECDH_CMS_SET_SHARED_INFO   239"

.PP
Definition at line 1088 of file ec\&.h\&.
.SS "#define EC_F_ECKEY_PARAM2TYPE   223"

.PP
Definition at line 1089 of file ec\&.h\&.
.SS "#define EC_F_ECKEY_PARAM_DECODE   212"

.PP
Definition at line 1090 of file ec\&.h\&.
.SS "#define EC_F_ECKEY_PRIV_DECODE   213"

.PP
Definition at line 1091 of file ec\&.h\&.
.SS "#define EC_F_ECKEY_PRIV_ENCODE   214"

.PP
Definition at line 1092 of file ec\&.h\&.
.SS "#define EC_F_ECKEY_PUB_DECODE   215"

.PP
Definition at line 1093 of file ec\&.h\&.
.SS "#define EC_F_ECKEY_PUB_ENCODE   216"

.PP
Definition at line 1094 of file ec\&.h\&.
.SS "#define EC_F_ECKEY_TYPE2PARAM   220"

.PP
Definition at line 1095 of file ec\&.h\&.
.SS "#define EC_F_ECPARAMETERS_PRINT   147"

.PP
Definition at line 1096 of file ec\&.h\&.
.SS "#define EC_F_ECPARAMETERS_PRINT_FP   148"

.PP
Definition at line 1097 of file ec\&.h\&.
.SS "#define EC_F_ECPKPARAMETERS_PRINT   149"

.PP
Definition at line 1098 of file ec\&.h\&.
.SS "#define EC_F_ECPKPARAMETERS_PRINT_FP   150"

.PP
Definition at line 1099 of file ec\&.h\&.
.SS "#define EC_F_ECP_NISTZ256_GET_AFFINE   240"

.PP
Definition at line 1100 of file ec\&.h\&.
.SS "#define EC_F_ECP_NISTZ256_MULT_PRECOMPUTE   243"

.PP
Definition at line 1101 of file ec\&.h\&.
.SS "#define EC_F_ECP_NISTZ256_POINTS_MUL   241"

.PP
Definition at line 1102 of file ec\&.h\&.
.SS "#define EC_F_ECP_NISTZ256_PRE_COMP_NEW   244"

.PP
Definition at line 1103 of file ec\&.h\&.
.SS "#define EC_F_ECP_NISTZ256_SET_WORDS   245"

.PP
Definition at line 1104 of file ec\&.h\&.
.SS "#define EC_F_ECP_NISTZ256_WINDOWED_MUL   242"

.PP
Definition at line 1105 of file ec\&.h\&.
.SS "#define EC_F_ECP_NIST_MOD_192   203"

.PP
Definition at line 1106 of file ec\&.h\&.
.SS "#define EC_F_ECP_NIST_MOD_224   204"

.PP
Definition at line 1107 of file ec\&.h\&.
.SS "#define EC_F_ECP_NIST_MOD_256   205"

.PP
Definition at line 1108 of file ec\&.h\&.
.SS "#define EC_F_ECP_NIST_MOD_521   206"

.PP
Definition at line 1109 of file ec\&.h\&.
.SS "#define EC_F_EC_ASN1_GROUP2CURVE   153"

.PP
Definition at line 1110 of file ec\&.h\&.
.SS "#define EC_F_EC_ASN1_GROUP2FIELDID   154"

.PP
Definition at line 1111 of file ec\&.h\&.
.SS "#define EC_F_EC_ASN1_GROUP2PARAMETERS   155"

.PP
Definition at line 1112 of file ec\&.h\&.
.SS "#define EC_F_EC_ASN1_GROUP2PKPARAMETERS   156"

.PP
Definition at line 1113 of file ec\&.h\&.
.SS "#define EC_F_EC_ASN1_PARAMETERS2GROUP   157"

.PP
Definition at line 1114 of file ec\&.h\&.
.SS "#define EC_F_EC_ASN1_PKPARAMETERS2GROUP   158"

.PP
Definition at line 1115 of file ec\&.h\&.
.SS "#define EC_F_EC_EX_DATA_SET_DATA   211"

.PP
Definition at line 1116 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY   208"

.PP
Definition at line 1117 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT   159"

.PP
Definition at line 1118 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE   195"

.PP
Definition at line 1119 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_SIMPLE_OCT2POINT   160"

.PP
Definition at line 1120 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_SIMPLE_POINT2OCT   161"

.PP
Definition at line 1121 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES   162"

.PP
Definition at line 1122 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES   163"

.PP
Definition at line 1123 of file ec\&.h\&.
.SS "#define EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES   164"

.PP
Definition at line 1124 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_MONT_FIELD_DECODE   133"

.PP
Definition at line 1125 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_MONT_FIELD_ENCODE   134"

.PP
Definition at line 1126 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_MONT_FIELD_MUL   131"

.PP
Definition at line 1127 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE   209"

.PP
Definition at line 1128 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_MONT_FIELD_SQR   132"

.PP
Definition at line 1129 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_MONT_GROUP_SET_CURVE   189"

.PP
Definition at line 1130 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP   135"

.PP
Definition at line 1131 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE   225"

.PP
Definition at line 1132 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP224_POINTS_MUL   228"

.PP
Definition at line 1133 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES   226"

.PP
Definition at line 1134 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE   230"

.PP
Definition at line 1135 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP256_POINTS_MUL   231"

.PP
Definition at line 1136 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES   232"

.PP
Definition at line 1137 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE   233"

.PP
Definition at line 1138 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP521_POINTS_MUL   234"

.PP
Definition at line 1139 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES   235"

.PP
Definition at line 1140 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NIST_FIELD_MUL   200"

.PP
Definition at line 1141 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NIST_FIELD_SQR   201"

.PP
Definition at line 1142 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_NIST_GROUP_SET_CURVE   202"

.PP
Definition at line 1143 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT   165"

.PP
Definition at line 1144 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE   166"

.PP
Definition at line 1145 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP   100"

.PP
Definition at line 1146 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR   101"

.PP
Definition at line 1147 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_MAKE_AFFINE   102"

.PP
Definition at line 1148 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_OCT2POINT   103"

.PP
Definition at line 1149 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_POINT2OCT   104"

.PP
Definition at line 1150 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE   137"

.PP
Definition at line 1151 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES   167"

.PP
Definition at line 1152 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP   105"

.PP
Definition at line 1153 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES   168"

.PP
Definition at line 1154 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP   128"

.PP
Definition at line 1155 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES   169"

.PP
Definition at line 1156 of file ec\&.h\&.
.SS "#define EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP   129"

.PP
Definition at line 1157 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_CHECK   170"

.PP
Definition at line 1158 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_CHECK_DISCRIMINANT   171"

.PP
Definition at line 1159 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_COPY   106"

.PP
Definition at line 1160 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET0_GENERATOR   139"

.PP
Definition at line 1161 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET_COFACTOR   140"

.PP
Definition at line 1162 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET_CURVE_GF2M   172"

.PP
Definition at line 1163 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET_CURVE_GFP   130"

.PP
Definition at line 1164 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET_DEGREE   173"

.PP
Definition at line 1165 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET_ORDER   141"

.PP
Definition at line 1166 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS   193"

.PP
Definition at line 1167 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_GET_TRINOMIAL_BASIS   194"

.PP
Definition at line 1168 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_NEW   108"

.PP
Definition at line 1169 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_NEW_BY_CURVE_NAME   174"

.PP
Definition at line 1170 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_NEW_FROM_DATA   175"

.PP
Definition at line 1171 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_PRECOMPUTE_MULT   142"

.PP
Definition at line 1172 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_SET_CURVE_GF2M   176"

.PP
Definition at line 1173 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_SET_CURVE_GFP   109"

.PP
Definition at line 1174 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_SET_EXTRA_DATA   110"

.PP
Definition at line 1175 of file ec\&.h\&.
.SS "#define EC_F_EC_GROUP_SET_GENERATOR   111"

.PP
Definition at line 1176 of file ec\&.h\&.
.SS "#define EC_F_EC_KEY_CHECK_KEY   177"

.PP
Definition at line 1177 of file ec\&.h\&.
.SS "#define EC_F_EC_KEY_COPY   178"

.PP
Definition at line 1178 of file ec\&.h\&.
.SS "#define EC_F_EC_KEY_GENERATE_KEY   179"

.PP
Definition at line 1179 of file ec\&.h\&.
.SS "#define EC_F_EC_KEY_NEW   182"

.PP
Definition at line 1180 of file ec\&.h\&.
.SS "#define EC_F_EC_KEY_PRINT   180"

.PP
Definition at line 1181 of file ec\&.h\&.
.SS "#define EC_F_EC_KEY_PRINT_FP   181"

.PP
Definition at line 1182 of file ec\&.h\&.
.SS "#define EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES   229"

.PP
Definition at line 1183 of file ec\&.h\&.
.SS "#define EC_F_EC_POINTS_MAKE_AFFINE   136"

.PP
Definition at line 1184 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_ADD   112"

.PP
Definition at line 1185 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_CMP   113"

.PP
Definition at line 1186 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_COPY   114"

.PP
Definition at line 1187 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_DBL   115"

.PP
Definition at line 1188 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M   183"

.PP
Definition at line 1189 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP   116"

.PP
Definition at line 1190 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP   117"

.PP
Definition at line 1191 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_INVERT   210"

.PP
Definition at line 1192 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_IS_AT_INFINITY   118"

.PP
Definition at line 1193 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_IS_ON_CURVE   119"

.PP
Definition at line 1194 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_MAKE_AFFINE   120"

.PP
Definition at line 1195 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_MUL   184"

.PP
Definition at line 1196 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_NEW   121"

.PP
Definition at line 1197 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_OCT2POINT   122"

.PP
Definition at line 1198 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_POINT2OCT   123"

.PP
Definition at line 1199 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M   185"

.PP
Definition at line 1200 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP   124"

.PP
Definition at line 1201 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M   186"

.PP
Definition at line 1202 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP   125"

.PP
Definition at line 1203 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP   126"

.PP
Definition at line 1204 of file ec\&.h\&.
.SS "#define EC_F_EC_POINT_SET_TO_INFINITY   127"

.PP
Definition at line 1205 of file ec\&.h\&.
.SS "#define EC_F_EC_PRE_COMP_DUP   207"

.PP
Definition at line 1206 of file ec\&.h\&.
.SS "#define EC_F_EC_PRE_COMP_NEW   196"

.PP
Definition at line 1207 of file ec\&.h\&.
.SS "#define EC_F_EC_WNAF_MUL   187"

.PP
Definition at line 1208 of file ec\&.h\&.
.SS "#define EC_F_EC_WNAF_PRECOMPUTE_MULT   188"

.PP
Definition at line 1209 of file ec\&.h\&.
.SS "#define EC_F_I2D_ECPARAMETERS   190"

.PP
Definition at line 1210 of file ec\&.h\&.
.SS "#define EC_F_I2D_ECPKPARAMETERS   191"

.PP
Definition at line 1211 of file ec\&.h\&.
.SS "#define EC_F_I2D_ECPRIVATEKEY   192"

.PP
Definition at line 1212 of file ec\&.h\&.
.SS "#define EC_F_I2O_ECPUBLICKEY   151"

.PP
Definition at line 1213 of file ec\&.h\&.
.SS "#define EC_F_NISTP224_PRE_COMP_NEW   227"

.PP
Definition at line 1214 of file ec\&.h\&.
.SS "#define EC_F_NISTP256_PRE_COMP_NEW   236"

.PP
Definition at line 1215 of file ec\&.h\&.
.SS "#define EC_F_NISTP521_PRE_COMP_NEW   237"

.PP
Definition at line 1216 of file ec\&.h\&.
.SS "#define EC_F_O2I_ECPUBLICKEY   152"

.PP
Definition at line 1217 of file ec\&.h\&.
.SS "#define EC_F_OLD_EC_PRIV_DECODE   222"

.PP
Definition at line 1218 of file ec\&.h\&.
.SS "#define EC_F_PKEY_EC_CTRL   197"

.PP
Definition at line 1219 of file ec\&.h\&.
.SS "#define EC_F_PKEY_EC_CTRL_STR   198"

.PP
Definition at line 1220 of file ec\&.h\&.
.SS "#define EC_F_PKEY_EC_DERIVE   217"

.PP
Definition at line 1221 of file ec\&.h\&.
.SS "#define EC_F_PKEY_EC_KEYGEN   199"

.PP
Definition at line 1222 of file ec\&.h\&.
.SS "#define EC_F_PKEY_EC_PARAMGEN   219"

.PP
Definition at line 1223 of file ec\&.h\&.
.SS "#define EC_F_PKEY_EC_SIGN   218"

.PP
Definition at line 1224 of file ec\&.h\&.
.SS "#define EC_R_ASN1_ERROR   115"

.PP
Definition at line 1227 of file ec\&.h\&.
.SS "#define EC_R_ASN1_UNKNOWN_FIELD   116"

.PP
Definition at line 1228 of file ec\&.h\&.
.SS "#define EC_R_BIGNUM_OUT_OF_RANGE   144"

.PP
Definition at line 1229 of file ec\&.h\&.
.SS "#define EC_R_BUFFER_TOO_SMALL   100"

.PP
Definition at line 1230 of file ec\&.h\&.
.SS "#define EC_R_COORDINATES_OUT_OF_RANGE   146"

.PP
Definition at line 1231 of file ec\&.h\&.
.SS "#define EC_R_D2I_ECPKPARAMETERS_FAILURE   117"

.PP
Definition at line 1232 of file ec\&.h\&.
.SS "#define EC_R_DECODE_ERROR   142"

.PP
Definition at line 1233 of file ec\&.h\&.
.SS "#define EC_R_DISCRIMINANT_IS_ZERO   118"

.PP
Definition at line 1234 of file ec\&.h\&.
.SS "#define EC_R_EC_GROUP_NEW_BY_NAME_FAILURE   119"

.PP
Definition at line 1235 of file ec\&.h\&.
.SS "#define EC_R_FIELD_TOO_LARGE   143"

.PP
Definition at line 1236 of file ec\&.h\&.
.SS "#define EC_R_GF2M_NOT_SUPPORTED   147"

.PP
Definition at line 1237 of file ec\&.h\&.
.SS "#define EC_R_GROUP2PKPARAMETERS_FAILURE   120"

.PP
Definition at line 1238 of file ec\&.h\&.
.SS "#define EC_R_I2D_ECPKPARAMETERS_FAILURE   121"

.PP
Definition at line 1239 of file ec\&.h\&.
.SS "#define EC_R_INCOMPATIBLE_OBJECTS   101"

.PP
Definition at line 1240 of file ec\&.h\&.
.SS "#define EC_R_INVALID_ARGUMENT   112"

.PP
Definition at line 1241 of file ec\&.h\&.
.SS "#define EC_R_INVALID_COMPRESSED_POINT   110"

.PP
Definition at line 1242 of file ec\&.h\&.
.SS "#define EC_R_INVALID_COMPRESSION_BIT   109"

.PP
Definition at line 1243 of file ec\&.h\&.
.SS "#define EC_R_INVALID_CURVE   141"

.PP
Definition at line 1244 of file ec\&.h\&.
.SS "#define EC_R_INVALID_DIGEST   151"

.PP
Definition at line 1245 of file ec\&.h\&.
.SS "#define EC_R_INVALID_DIGEST_TYPE   138"

.PP
Definition at line 1246 of file ec\&.h\&.
.SS "#define EC_R_INVALID_ENCODING   102"

.PP
Definition at line 1247 of file ec\&.h\&.
.SS "#define EC_R_INVALID_FIELD   103"

.PP
Definition at line 1248 of file ec\&.h\&.
.SS "#define EC_R_INVALID_FORM   104"

.PP
Definition at line 1249 of file ec\&.h\&.
.SS "#define EC_R_INVALID_GROUP_ORDER   122"

.PP
Definition at line 1250 of file ec\&.h\&.
.SS "#define EC_R_INVALID_PENTANOMIAL_BASIS   132"

.PP
Definition at line 1251 of file ec\&.h\&.
.SS "#define EC_R_INVALID_PRIVATE_KEY   123"

.PP
Definition at line 1252 of file ec\&.h\&.
.SS "#define EC_R_INVALID_TRINOMIAL_BASIS   137"

.PP
Definition at line 1253 of file ec\&.h\&.
.SS "#define EC_R_KDF_PARAMETER_ERROR   148"

.PP
Definition at line 1254 of file ec\&.h\&.
.SS "#define EC_R_KEYS_NOT_SET   140"

.PP
Definition at line 1255 of file ec\&.h\&.
.SS "#define EC_R_MISSING_PARAMETERS   124"

.PP
Definition at line 1256 of file ec\&.h\&.
.SS "#define EC_R_MISSING_PRIVATE_KEY   125"

.PP
Definition at line 1257 of file ec\&.h\&.
.SS "#define EC_R_NOT_A_NIST_PRIME   135"

.PP
Definition at line 1258 of file ec\&.h\&.
.SS "#define EC_R_NOT_A_SUPPORTED_NIST_PRIME   136"

.PP
Definition at line 1259 of file ec\&.h\&.
.SS "#define EC_R_NOT_IMPLEMENTED   126"

.PP
Definition at line 1260 of file ec\&.h\&.
.SS "#define EC_R_NOT_INITIALIZED   111"

.PP
Definition at line 1261 of file ec\&.h\&.
.SS "#define EC_R_NO_FIELD_MOD   133"

.PP
Definition at line 1262 of file ec\&.h\&.
.SS "#define EC_R_NO_PARAMETERS_SET   139"

.PP
Definition at line 1263 of file ec\&.h\&.
.SS "#define EC_R_PASSED_NULL_PARAMETER   134"

.PP
Definition at line 1264 of file ec\&.h\&.
.SS "#define EC_R_PEER_KEY_ERROR   149"

.PP
Definition at line 1265 of file ec\&.h\&.
.SS "#define EC_R_PKPARAMETERS2GROUP_FAILURE   127"

.PP
Definition at line 1266 of file ec\&.h\&.
.SS "#define EC_R_POINT_AT_INFINITY   106"

.PP
Definition at line 1267 of file ec\&.h\&.
.SS "#define EC_R_POINT_IS_NOT_ON_CURVE   107"

.PP
Definition at line 1268 of file ec\&.h\&.
.SS "#define EC_R_SHARED_INFO_ERROR   150"

.PP
Definition at line 1269 of file ec\&.h\&.
.SS "#define EC_R_SLOT_FULL   108"

.PP
Definition at line 1270 of file ec\&.h\&.
.SS "#define EC_R_UNDEFINED_GENERATOR   113"

.PP
Definition at line 1271 of file ec\&.h\&.
.SS "#define EC_R_UNDEFINED_ORDER   128"

.PP
Definition at line 1272 of file ec\&.h\&.
.SS "#define EC_R_UNKNOWN_GROUP   129"

.PP
Definition at line 1273 of file ec\&.h\&.
.SS "#define EC_R_UNKNOWN_ORDER   114"

.PP
Definition at line 1274 of file ec\&.h\&.
.SS "#define EC_R_UNSUPPORTED_FIELD   131"

.PP
Definition at line 1275 of file ec\&.h\&.
.SS "#define EC_R_WRONG_CURVE_PARAMETERS   145"

.PP
Definition at line 1276 of file ec\&.h\&.
.SS "#define EC_R_WRONG_ORDER   130"

.PP
Definition at line 1277 of file ec\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBec_method_st\fP \fBEC_METHOD\fP"

.PP
Definition at line 116 of file ec\&.h\&.
.SS "typedef struct \fBec_group_st\fP \fBEC_GROUP\fP"

.PP
Definition at line 118 of file ec\&.h\&.
.SS "typedef struct \fBec_point_st\fP \fBEC_POINT\fP"

.PP
Definition at line 129 of file ec\&.h\&.
.SS "typedef struct ecpk_parameters_st \fBECPKPARAMETERS\fP"

.PP
Definition at line 718 of file ec\&.h\&.
.SS "typedef struct \fBec_key_st\fP \fBEC_KEY\fP"

.PP
Definition at line 741 of file ec\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBpoint_conversion_form_t\fP"
Enum for the point conversion form as defined in X9\&.62 (ECDSA) for the encoding of a elliptic curve point (x,y) 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPOINT_CONVERSION_COMPRESSED \fP\fP
the point is encoded as z||x, where the octet z specifies which solution of the quadratic equation y is 
.TP
\fB\fIPOINT_CONVERSION_UNCOMPRESSED \fP\fP
the point is encoded as z||x||y, where z is the octet 0x04 
.TP
\fB\fIPOINT_CONVERSION_HYBRID \fP\fP
the point is encoded as z||x||y, where the octet z specifies which solution of the quadratic equation y is 
.TP
\fB\fIPOINT_CONVERSION_COMPRESSED \fP\fP
the point is encoded as z||x, where the octet z specifies which solution of the quadratic equation y is 
.TP
\fB\fIPOINT_CONVERSION_UNCOMPRESSED \fP\fP
the point is encoded as z||x||y, where z is the octet 0x04 
.TP
\fB\fIPOINT_CONVERSION_HYBRID \fP\fP
the point is encoded as z||x||y, where the octet z specifies which solution of the quadratic equation y is 
.PP
Definition at line 105 of file ec\&.h\&.
.PP
.nf
105              {
108     POINT_CONVERSION_COMPRESSED = 2,
110     POINT_CONVERSION_UNCOMPRESSED = 4,
113     POINT_CONVERSION_HYBRID = 6
114 } point_conversion_form_t;
.fi
.SH "Function Documentation"
.PP 
.SS "const \fBEC_METHOD\fP* EC_GFp_simple_method (\fBvoid\fP)"
Returns the basic GFp ec methods which provides the basis for the optimized methods\&. 
.PP
\fBReturns:\fP
.RS 4
EC_METHOD object 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_GFp_mont_method (\fBvoid\fP)"
Returns GFp methods using montgomery multiplication\&. 
.PP
\fBReturns:\fP
.RS 4
EC_METHOD object 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_GFp_nist_method (\fBvoid\fP)"
Returns GFp methods using optimized methods for NIST recommended curves 
.PP
\fBReturns:\fP
.RS 4
EC_METHOD object 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_GFp_nistp224_method (\fBvoid\fP)"
Returns 64-bit optimized methods for nistp224 
.PP
\fBReturns:\fP
.RS 4
EC_METHOD object 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_GFp_nistp256_method (\fBvoid\fP)"
Returns 64-bit optimized methods for nistp256 
.PP
\fBReturns:\fP
.RS 4
EC_METHOD object 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_GFp_nistp521_method (\fBvoid\fP)"
Returns 64-bit optimized methods for nistp521 
.PP
\fBReturns:\fP
.RS 4
EC_METHOD object 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_GF2m_simple_method (\fBvoid\fP)"
Returns the basic GF2m ec method 
.PP
\fBReturns:\fP
.RS 4
EC_METHOD object 
.RE
.PP

.SS "\fBEC_GROUP\fP* EC_GROUP_new (const \fBEC_METHOD\fP * meth)"
Creates a new EC_GROUP object 
.PP
\fBParameters:\fP
.RS 4
\fImeth\fP EC_METHOD to use 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_GROUP object or NULL in case of an error\&. 
.RE
.PP

.SS "\fBvoid\fP EC_GROUP_free (\fBEC_GROUP\fP * group)"
Frees a EC_GROUP object 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object to be freed\&. 
.RE
.PP

.SS "\fBvoid\fP EC_GROUP_clear_free (\fBEC_GROUP\fP * group)"
Clears and frees a EC_GROUP object 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object to be cleared and freed\&. 
.RE
.PP

.SS "int EC_GROUP_copy (\fBEC_GROUP\fP * dst, const \fBEC_GROUP\fP * src)"
Copies EC_GROUP objects\&. Note: both EC_GROUPs must use the same EC_METHOD\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdst\fP destination EC_GROUP object 
.br
\fIsrc\fP source EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "\fBEC_GROUP\fP* EC_GROUP_dup (const \fBEC_GROUP\fP * src)"
Creates a new EC_GROUP object and copies the copies the content form src to the newly created EC_KEY object 
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP source EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_GROUP object or NULL in case of an error\&. 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_GROUP_method_of (const \fBEC_GROUP\fP * group)"
Returns the EC_METHOD of the EC_GROUP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
EC_METHOD used in this EC_GROUP object\&. 
.RE
.PP

.SS "int EC_METHOD_get_field_type (const \fBEC_METHOD\fP * meth)"
Returns the field type of the EC_METHOD\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeth\fP EC_METHOD object 
.RE
.PP
\fBReturns:\fP
.RS 4
NID of the underlying field type OID\&. 
.RE
.PP

.SS "int EC_GROUP_set_generator (\fBEC_GROUP\fP * group, const \fBEC_POINT\fP * generator, const \fBBIGNUM\fP * order, const \fBBIGNUM\fP * cofactor)"
Sets the generator and it's order/cofactor of a EC_GROUP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIgenerator\fP EC_POINT object with the generator\&. 
.br
\fIorder\fP the order of the group generated by the generator\&. 
.br
\fIcofactor\fP the index of the sub-group generated by the generator in the group of all points on the elliptic curve\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "const \fBEC_POINT\fP* EC_GROUP_get0_generator (const \fBEC_GROUP\fP * group)"
Returns the generator of a EC_GROUP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
the currently used generator (possibly NULL)\&. 
.RE
.PP

.SS "\fBBN_MONT_CTX\fP* EC_GROUP_get_mont_data (const \fBEC_GROUP\fP * group)"
Returns the montgomery data for order(Generator) 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
the currently used generator (possibly NULL)\&. 
.RE
.PP

.SS "int EC_GROUP_get_order (const \fBEC_GROUP\fP * group, \fBBIGNUM\fP * order, \fBBN_CTX\fP * ctx)"
Gets the order of a EC_GROUP 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIorder\fP BIGNUM to which the order is copied 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_GROUP_get_cofactor (const \fBEC_GROUP\fP * group, \fBBIGNUM\fP * cofactor, \fBBN_CTX\fP * ctx)"
Gets the cofactor of a EC_GROUP 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIcofactor\fP BIGNUM to which the cofactor is copied 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "\fBvoid\fP EC_GROUP_set_curve_name (\fBEC_GROUP\fP * group, int nid)"
Sets the name of a EC_GROUP object 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fInid\fP NID of the curve name OID 
.RE
.PP

.SS "int EC_GROUP_get_curve_name (const \fBEC_GROUP\fP * group)"
Returns the curve name of a EC_GROUP object 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
NID of the curve name OID or 0 if not set\&. 
.RE
.PP

.SS "\fBvoid\fP EC_GROUP_set_asn1_flag (\fBEC_GROUP\fP * group, int flag)"

.SS "int EC_GROUP_get_asn1_flag (const \fBEC_GROUP\fP * group)"

.SS "\fBvoid\fP EC_GROUP_set_point_conversion_form (\fBEC_GROUP\fP * group, \fBpoint_conversion_form_t\fP form)"

.SS "\fBpoint_conversion_form_t\fP EC_GROUP_get_point_conversion_form (const \fBEC_GROUP\fP *)"

.SS "unsigned char* EC_GROUP_get0_seed (const \fBEC_GROUP\fP * x)"

.SS "size_t EC_GROUP_get_seed_len (const \fBEC_GROUP\fP *)"

.SS "size_t EC_GROUP_set_seed (\fBEC_GROUP\fP *, const unsigned char *, size_t len)"

.SS "int EC_GROUP_set_curve_GFp (\fBEC_GROUP\fP * group, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"
Sets the parameter of a ec over GFp defined by y^2 = x^3 + a*x + b 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIp\fP BIGNUM with the prime number 
.br
\fIa\fP BIGNUM with parameter a of the equation 
.br
\fIb\fP BIGNUM with parameter b of the equation 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_GROUP_get_curve_GFp (const \fBEC_GROUP\fP * group, \fBBIGNUM\fP * p, \fBBIGNUM\fP * a, \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"
Gets the parameter of the ec over GFp defined by y^2 = x^3 + a*x + b 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIp\fP BIGNUM for the prime number 
.br
\fIa\fP BIGNUM for parameter a of the equation 
.br
\fIb\fP BIGNUM for parameter b of the equation 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_GROUP_set_curve_GF2m (\fBEC_GROUP\fP * group, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"
Sets the parameter of a ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIp\fP BIGNUM with the polynomial defining the underlying field 
.br
\fIa\fP BIGNUM with parameter a of the equation 
.br
\fIb\fP BIGNUM with parameter b of the equation 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_GROUP_get_curve_GF2m (const \fBEC_GROUP\fP * group, \fBBIGNUM\fP * p, \fBBIGNUM\fP * a, \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"
Gets the parameter of the ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIp\fP BIGNUM for the polynomial defining the underlying field 
.br
\fIa\fP BIGNUM for parameter a of the equation 
.br
\fIb\fP BIGNUM for parameter b of the equation 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_GROUP_get_degree (const \fBEC_GROUP\fP * group)"
Returns the number of bits needed to represent a field element 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
number of bits needed to represent a field element 
.RE
.PP

.SS "int EC_GROUP_check (const \fBEC_GROUP\fP * group, \fBBN_CTX\fP * ctx)"
Checks whether the parameter in the EC_GROUP define a valid ec group 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if group is a valid ec group and 0 otherwise 
.RE
.PP

.SS "int EC_GROUP_check_discriminant (const \fBEC_GROUP\fP * group, \fBBN_CTX\fP * ctx)"
Checks whether the discriminant of the elliptic curve is zero or not 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if the discriminant is not zero and 0 otherwise 
.RE
.PP

.SS "int EC_GROUP_cmp (const \fBEC_GROUP\fP * a, const \fBEC_GROUP\fP * b, \fBBN_CTX\fP * ctx)"
Compares two EC_GROUP objects 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP first EC_GROUP object 
.br
\fIb\fP second EC_GROUP object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if both groups are equal and 1 otherwise 
.RE
.PP

.SS "\fBEC_GROUP\fP* EC_GROUP_new_curve_GFp (const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"
Creates a new EC_GROUP object with the specified parameters defined over GFp (defined by the equation y^2 = x^3 + a*x + b) 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP BIGNUM with the prime number 
.br
\fIa\fP BIGNUM with the parameter a of the equation 
.br
\fIb\fP BIGNUM with the parameter b of the equation 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_GROUP object with the specified parameters 
.RE
.PP

.SS "\fBEC_GROUP\fP* EC_GROUP_new_curve_GF2m (const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"
Creates a new EC_GROUP object with the specified parameters defined over GF2m (defined by the equation y^2 + x*y = x^3 + a*x^2 + b) 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP BIGNUM with the polynomial defining the underlying field 
.br
\fIa\fP BIGNUM with the parameter a of the equation 
.br
\fIb\fP BIGNUM with the parameter b of the equation 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_GROUP object with the specified parameters 
.RE
.PP

.SS "\fBEC_GROUP\fP* EC_GROUP_new_by_curve_name (int nid)"
Creates a EC_GROUP object with a curve specified by a NID 
.PP
\fBParameters:\fP
.RS 4
\fInid\fP NID of the OID of the curve name 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_GROUP object with specified curve or NULL if an error occurred 
.RE
.PP

.SS "size_t EC_get_builtin_curves (\fBEC_builtin_curve\fP * r, size_t nitems)"

.SS "const char* EC_curve_nid2nist (int nid)"

.SS "int EC_curve_nist2nid (const char * name)"

.SS "\fBEC_POINT\fP* EC_POINT_new (const \fBEC_GROUP\fP * group)"
Creates a new EC_POINT object for the specified EC_GROUP 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP the underlying EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_POINT object or NULL if an error occurred 
.RE
.PP

.SS "\fBvoid\fP EC_POINT_free (\fBEC_POINT\fP * point)"
Frees a EC_POINT object 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP EC_POINT object to be freed 
.RE
.PP

.SS "\fBvoid\fP EC_POINT_clear_free (\fBEC_POINT\fP * point)"
Clears and frees a EC_POINT object 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP EC_POINT object to be cleared and freed 
.RE
.PP

.SS "int EC_POINT_copy (\fBEC_POINT\fP * dst, const \fBEC_POINT\fP * src)"
Copies EC_POINT object 
.PP
\fBParameters:\fP
.RS 4
\fIdst\fP destination EC_POINT object 
.br
\fIsrc\fP source EC_POINT object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "\fBEC_POINT\fP* EC_POINT_dup (const \fBEC_POINT\fP * src, const \fBEC_GROUP\fP * group)"
Creates a new EC_POINT object and copies the content of the supplied EC_POINT 
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP source EC_POINT object 
.br
\fIgroup\fP underlying the EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_POINT object or NULL if an error occurred 
.RE
.PP

.SS "const \fBEC_METHOD\fP* EC_POINT_method_of (const \fBEC_POINT\fP * point)"
Returns the EC_METHOD used in EC_POINT object 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP EC_POINT object 
.RE
.PP
\fBReturns:\fP
.RS 4
the EC_METHOD used 
.RE
.PP

.SS "int EC_POINT_set_to_infinity (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * point)"
Sets a point to infinity (neutral element) 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIpoint\fP EC_POINT to set to infinity 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_set_Jprojective_coordinates_GFp (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * p, const \fBBIGNUM\fP * x, const \fBBIGNUM\fP * y, const \fBBIGNUM\fP * z, \fBBN_CTX\fP * ctx)"
Sets the jacobian projective coordinates of a EC_POINT over GFp 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM with the x-coordinate 
.br
\fIy\fP BIGNUM with the y-coordinate 
.br
\fIz\fP BIGNUM with the z-coordinate 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_get_Jprojective_coordinates_GFp (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * p, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBIGNUM\fP * z, \fBBN_CTX\fP * ctx)"
Gets the jacobian projective coordinates of a EC_POINT over GFp 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM for the x-coordinate 
.br
\fIy\fP BIGNUM for the y-coordinate 
.br
\fIz\fP BIGNUM for the z-coordinate 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_set_affine_coordinates_GFp (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * p, const \fBBIGNUM\fP * x, const \fBBIGNUM\fP * y, \fBBN_CTX\fP * ctx)"
Sets the affine coordinates of a EC_POINT over GFp 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM with the x-coordinate 
.br
\fIy\fP BIGNUM with the y-coordinate 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_get_affine_coordinates_GFp (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * p, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBN_CTX\fP * ctx)"
Gets the affine coordinates of a EC_POINT over GFp 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM for the x-coordinate 
.br
\fIy\fP BIGNUM for the y-coordinate 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_set_compressed_coordinates_GFp (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * p, const \fBBIGNUM\fP * x, int y_bit, \fBBN_CTX\fP * ctx)"
Sets the x9\&.62 compressed coordinates of a EC_POINT over GFp 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM with x-coordinate 
.br
\fIy_bit\fP integer with the y-Bit (either 0 or 1) 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_set_affine_coordinates_GF2m (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * p, const \fBBIGNUM\fP * x, const \fBBIGNUM\fP * y, \fBBN_CTX\fP * ctx)"
Sets the affine coordinates of a EC_POINT over GF2m 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM with the x-coordinate 
.br
\fIy\fP BIGNUM with the y-coordinate 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_get_affine_coordinates_GF2m (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * p, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y, \fBBN_CTX\fP * ctx)"
Gets the affine coordinates of a EC_POINT over GF2m 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM for the x-coordinate 
.br
\fIy\fP BIGNUM for the y-coordinate 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_set_compressed_coordinates_GF2m (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * p, const \fBBIGNUM\fP * x, int y_bit, \fBBN_CTX\fP * ctx)"
Sets the x9\&.62 compressed coordinates of a EC_POINT over GF2m 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIx\fP BIGNUM with x-coordinate 
.br
\fIy_bit\fP integer with the y-Bit (either 0 or 1) 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "size_t EC_POINT_point2oct (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * p, \fBpoint_conversion_form_t\fP form, unsigned char * buf, size_t len, \fBBN_CTX\fP * ctx)"
Encodes a EC_POINT object to a octet string 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIform\fP point conversion form 
.br
\fIbuf\fP memory buffer for the result\&. If NULL the function returns required buffer size\&. 
.br
\fIlen\fP length of the memory buffer 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
the length of the encoded octet string or 0 if an error occurred 
.RE
.PP

.SS "int EC_POINT_oct2point (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * p, const unsigned char * buf, size_t len, \fBBN_CTX\fP * ctx)"
Decodes a EC_POINT from a octet string 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.br
\fIbuf\fP memory buffer with the encoded ec point 
.br
\fIlen\fP length of the encoded ec point 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "\fBBIGNUM\fP* EC_POINT_point2bn (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP form, \fBBIGNUM\fP *, \fBBN_CTX\fP *)"

.SS "\fBEC_POINT\fP* EC_POINT_bn2point (const \fBEC_GROUP\fP *, const \fBBIGNUM\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "char* EC_POINT_point2hex (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP form, \fBBN_CTX\fP *)"

.SS "\fBEC_POINT\fP* EC_POINT_hex2point (const \fBEC_GROUP\fP *, const char *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.SS "int EC_POINT_add (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBEC_POINT\fP * a, const \fBEC_POINT\fP * b, \fBBN_CTX\fP * ctx)"
Computes the sum of two EC_POINT 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIr\fP EC_POINT object for the result (r = a + b) 
.br
\fIa\fP EC_POINT object with the first summand 
.br
\fIb\fP EC_POINT object with the second summand 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_dbl (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBEC_POINT\fP * a, \fBBN_CTX\fP * ctx)"
Computes the double of a EC_POINT 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIr\fP EC_POINT object for the result (r = 2 * a) 
.br
\fIa\fP EC_POINT object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_invert (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * a, \fBBN_CTX\fP * ctx)"
Computes the inverse of a EC_POINT 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIa\fP EC_POINT object to be inverted (it's used for the result as well) 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_is_at_infinity (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * p)"
Checks whether the point is the neutral element of the group 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP the underlying EC_GROUP object 
.br
\fIp\fP EC_POINT object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if the point is the neutral element and 0 otherwise 
.RE
.PP

.SS "int EC_POINT_is_on_curve (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * point, \fBBN_CTX\fP * ctx)"
Checks whether the point is on the curve 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIpoint\fP EC_POINT object to check 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if point if on the curve and 0 otherwise 
.RE
.PP

.SS "int EC_POINT_cmp (const \fBEC_GROUP\fP * group, const \fBEC_POINT\fP * a, const \fBEC_POINT\fP * b, \fBBN_CTX\fP * ctx)"
Compares two EC_POINTs 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIa\fP first EC_POINT object 
.br
\fIb\fP second EC_POINT object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if both points are equal and a value != 0 otherwise 
.RE
.PP

.SS "int EC_POINT_make_affine (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * point, \fBBN_CTX\fP * ctx)"

.SS "int EC_POINTs_make_affine (const \fBEC_GROUP\fP * group, size_t num, \fBEC_POINT\fP * points[], \fBBN_CTX\fP * ctx)"

.SS "int EC_POINTs_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * n, size_t num, const \fBEC_POINT\fP * p[], const \fBBIGNUM\fP * m[], \fBBN_CTX\fP * ctx)"
Computes r = generator * n sum_{i=0}^{num-1} p[i] * m[i] 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIr\fP EC_POINT object for the result 
.br
\fIn\fP BIGNUM with the multiplier for the group generator (optional) 
.br
\fInum\fP number futher summands 
.br
\fIp\fP array of size num of EC_POINT objects 
.br
\fIm\fP array of size num of BIGNUM objects 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_POINT_mul (const \fBEC_GROUP\fP * group, \fBEC_POINT\fP * r, const \fBBIGNUM\fP * n, const \fBEC_POINT\fP * q, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"
Computes r = generator * n + q * m 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP underlying EC_GROUP object 
.br
\fIr\fP EC_POINT object for the result 
.br
\fIn\fP BIGNUM with the multiplier for the group generator (optional) 
.br
\fIq\fP EC_POINT object with the first factor of the second summand 
.br
\fIm\fP BIGNUM with the second factor of the second summand 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_GROUP_precompute_mult (\fBEC_GROUP\fP * group, \fBBN_CTX\fP * ctx)"
Stores multiples of generator for faster point multiplication 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occured 
.RE
.PP

.SS "int EC_GROUP_have_precompute_mult (const \fBEC_GROUP\fP * group)"
Reports whether a precomputation has been done 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP EC_GROUP object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if a pre-computation has been done and 0 otherwise 
.RE
.PP

.SS "int EC_GROUP_get_basis_type (const \fBEC_GROUP\fP *)"

.SS "int EC_GROUP_get_trinomial_basis (const \fBEC_GROUP\fP *, unsigned int * k)"

.SS "int EC_GROUP_get_pentanomial_basis (const \fBEC_GROUP\fP *, unsigned int * k1, unsigned int * k2, unsigned int * k3)"

.SS "\fBEC_GROUP\fP* d2i_ECPKParameters (\fBEC_GROUP\fP **, const unsigned char ** in, long len)"

.SS "int i2d_ECPKParameters (const \fBEC_GROUP\fP *, unsigned char ** out)"

.SS "int ECPKParameters_print (\fBBIO\fP * bp, const \fBEC_GROUP\fP * x, int off)"

.SS "int ECPKParameters_print_fp (FILE * fp, const \fBEC_GROUP\fP * x, int off)"

.SS "\fBEC_KEY\fP* EC_KEY_new (\fBvoid\fP)"
Creates a new EC_KEY object\&. 
.PP
\fBReturns:\fP
.RS 4
EC_KEY object or NULL if an error occurred\&. 
.RE
.PP

.SS "int EC_KEY_get_flags (const \fBEC_KEY\fP * key)"

.SS "\fBvoid\fP EC_KEY_set_flags (\fBEC_KEY\fP * key, int flags)"

.SS "\fBvoid\fP EC_KEY_clear_flags (\fBEC_KEY\fP * key, int flags)"

.SS "\fBEC_KEY\fP* EC_KEY_new_by_curve_name (int nid)"
Creates a new EC_KEY object using a named curve as underlying EC_GROUP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInid\fP NID of the named curve\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
EC_KEY object or NULL if an error occurred\&. 
.RE
.PP

.SS "\fBvoid\fP EC_KEY_free (\fBEC_KEY\fP * key)"
Frees a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object to be freed\&. 
.RE
.PP

.SS "\fBEC_KEY\fP* EC_KEY_copy (\fBEC_KEY\fP * dst, const \fBEC_KEY\fP * src)"
Copies a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdst\fP destination EC_KEY object 
.br
\fIsrc\fP src EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
dst or NULL if an error occurred\&. 
.RE
.PP

.SS "\fBEC_KEY\fP* EC_KEY_dup (const \fBEC_KEY\fP * src)"
Creates a new EC_KEY object and copies the content from src to it\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP the source EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created EC_KEY object or NULL if an error occurred\&. 
.RE
.PP

.SS "int EC_KEY_up_ref (\fBEC_KEY\fP * key)"
Increases the internal reference count of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "const \fBEC_GROUP\fP* EC_KEY_get0_group (const \fBEC_KEY\fP * key)"
Returns the EC_GROUP object of a EC_KEY object 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
the EC_GROUP object (possibly NULL)\&. 
.RE
.PP

.SS "int EC_KEY_set_group (\fBEC_KEY\fP * key, const \fBEC_GROUP\fP * group)"
Sets the EC_GROUP of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIgroup\fP EC_GROUP to use in the EC_KEY object (note: the EC_KEY object will use an own copy of the EC_GROUP)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "const \fBBIGNUM\fP* EC_KEY_get0_private_key (const \fBEC_KEY\fP * key)"
Returns the private key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
a BIGNUM with the private key (possibly NULL)\&. 
.RE
.PP

.SS "int EC_KEY_set_private_key (\fBEC_KEY\fP * key, const \fBBIGNUM\fP * prv)"
Sets the private key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIprv\fP BIGNUM with the private key (note: the EC_KEY object will use an own copy of the BIGNUM)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "const \fBEC_POINT\fP* EC_KEY_get0_public_key (const \fBEC_KEY\fP * key)"
Returns the public key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
a EC_POINT object with the public key (possibly NULL) 
.RE
.PP

.SS "int EC_KEY_set_public_key (\fBEC_KEY\fP * key, const \fBEC_POINT\fP * pub)"
Sets the public key of a EC_KEY object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIpub\fP EC_POINT object with the public key (note: the EC_KEY object will use an own copy of the EC_POINT object)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "unsigned EC_KEY_get_enc_flags (const \fBEC_KEY\fP * key)"

.SS "\fBvoid\fP EC_KEY_set_enc_flags (\fBEC_KEY\fP * eckey, unsigned int flags)"

.SS "\fBpoint_conversion_form_t\fP EC_KEY_get_conv_form (const \fBEC_KEY\fP * key)"

.SS "\fBvoid\fP EC_KEY_set_conv_form (\fBEC_KEY\fP * eckey, \fBpoint_conversion_form_t\fP cform)"

.SS "\fBvoid\fP* EC_KEY_get_key_method_data (\fBEC_KEY\fP * key, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"

.SS "\fBvoid\fP* EC_KEY_insert_key_method_data (\fBEC_KEY\fP * key, \fBvoid\fP * data, \fBvoid\fP *(*)(\fBvoid\fP *) dup_func, \fBvoid\fP(*)(\fBvoid\fP *) free_func, \fBvoid\fP(*)(\fBvoid\fP *) clear_free_func)"
Sets the key method data of an EC_KEY object, if none has yet been set\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIdata\fP opaque data to install\&. 
.br
\fIdup_func\fP a function that duplicates |data|\&. 
.br
\fIfree_func\fP a function that frees |data|\&. 
.br
\fIclear_free_func\fP a function that wipes and frees |data|\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the previously set data pointer, or NULL if |data| was inserted\&. 
.RE
.PP

.SS "\fBvoid\fP EC_KEY_set_asn1_flag (\fBEC_KEY\fP * eckey, int asn1_flag)"

.SS "int EC_KEY_precompute_mult (\fBEC_KEY\fP * key, \fBBN_CTX\fP * ctx)"
Creates a table of pre-computed multiples of the generator to accelerate further EC_KEY operations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.br
\fIctx\fP BN_CTX object (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "int EC_KEY_generate_key (\fBEC_KEY\fP * key)"
Creates a new ec private (and optional a new public) key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "int EC_KEY_check_key (const \fBEC_KEY\fP * key)"
Verifies that a private and/or public key is valid\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise\&. 
.RE
.PP

.SS "int EC_KEY_set_public_key_affine_coordinates (\fBEC_KEY\fP * key, \fBBIGNUM\fP * x, \fBBIGNUM\fP * y)"
Sets a public key from affine coordindates performing neccessary NIST PKV tests\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object 
.br
\fIx\fP public key x coordinate 
.br
\fIy\fP public key y coordinate 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise\&. 
.RE
.PP

.SS "\fBEC_KEY\fP* d2i_ECPrivateKey (\fBEC_KEY\fP ** key, const unsigned char ** in, long len)"
Decodes a private key from a memory buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP a pointer to a EC_KEY object which should be used (or NULL) 
.br
\fIin\fP pointer to memory with the DER encoded private key 
.br
\fIlen\fP length of the DER encoded private key 
.RE
.PP
\fBReturns:\fP
.RS 4
the decoded private key or NULL if an error occurred\&. 
.RE
.PP

.SS "int i2d_ECPrivateKey (\fBEC_KEY\fP * key, unsigned char ** out)"
Encodes a private key object and stores the result in a buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object to encode 
.br
\fIout\fP the buffer for the result (if NULL the function returns number of bytes needed)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "\fBEC_KEY\fP* d2i_ECParameters (\fBEC_KEY\fP ** key, const unsigned char ** in, long len)"
Decodes ec parameter from a memory buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP a pointer to a EC_KEY object which should be used (or NULL) 
.br
\fIin\fP pointer to memory with the DER encoded ec parameters 
.br
\fIlen\fP length of the DER encoded ec parameters 
.RE
.PP
\fBReturns:\fP
.RS 4
a EC_KEY object with the decoded parameters or NULL if an error occurred\&. 
.RE
.PP

.SS "int i2d_ECParameters (\fBEC_KEY\fP * key, unsigned char ** out)"
Encodes ec parameter and stores the result in a buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object with ec paramters to encode 
.br
\fIout\fP the buffer for the result (if NULL the function returns number of bytes needed)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred\&. 
.RE
.PP

.SS "\fBEC_KEY\fP* o2i_ECPublicKey (\fBEC_KEY\fP ** key, const unsigned char ** in, long len)"
Decodes a ec public key from a octet string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP a pointer to a EC_KEY object which should be used 
.br
\fIin\fP memory buffer with the encoded public key 
.br
\fIlen\fP length of the encoded public key 
.RE
.PP
\fBReturns:\fP
.RS 4
EC_KEY object with decoded public key or NULL if an error occurred\&. 
.RE
.PP

.SS "int i2o_ECPublicKey (\fBEC_KEY\fP * key, unsigned char ** out)"
Encodes a ec public key in an octet string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the EC_KEY object with the public key 
.br
\fIout\fP the buffer for the result (if NULL the function returns number of bytes needed)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred 
.RE
.PP

.SS "int ECParameters_print (\fBBIO\fP * bp, const \fBEC_KEY\fP * key)"
Prints out the ec parameters on human readable form\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbp\fP BIO object to which the information is printed 
.br
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred 
.RE
.PP

.SS "int EC_KEY_print (\fBBIO\fP * bp, const \fBEC_KEY\fP * key, int off)"
Prints out the contents of a EC_KEY object 
.PP
\fBParameters:\fP
.RS 4
\fIbp\fP BIO object to which the information is printed 
.br
\fIkey\fP EC_KEY object 
.br
\fIoff\fP line offset 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred 
.RE
.PP

.SS "int ECParameters_print_fp (FILE * fp, const \fBEC_KEY\fP * key)"
Prints out the ec parameters on human readable form\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfp\fP file descriptor to which the information is printed 
.br
\fIkey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred 
.RE
.PP

.SS "int EC_KEY_print_fp (FILE * fp, const \fBEC_KEY\fP * key, int off)"
Prints out the contents of a EC_KEY object 
.PP
\fBParameters:\fP
.RS 4
\fIfp\fP file descriptor to which the information is printed 
.br
\fIkey\fP EC_KEY object 
.br
\fIoff\fP line offset 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 if an error occurred 
.RE
.PP

.SS "\fBvoid\fP ERR_load_EC_strings (\fBvoid\fP)"

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
