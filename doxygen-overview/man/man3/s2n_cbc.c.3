.TH "s2n-master/tls/s2n_cbc.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tls/s2n_cbc.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/param\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'error/s2n_errno\&.h'\fP
.br
\fC#include 'utils/s2n_safety\&.h'\fP
.br
\fC#include 'utils/s2n_mem\&.h'\fP
.br
\fC#include 'crypto/s2n_hmac\&.h'\fP
.br
\fC#include 'tls/s2n_record\&.h'\fP
.br
\fC#include 'tls/s2n_prf\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBs2n_verify_cbc\fP (struct \fBs2n_connection\fP *conn, struct \fBs2n_hmac_state\fP *hmac, struct \fBs2n_blob\fP *decrypted)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int s2n_verify_cbc (struct \fBs2n_connection\fP * conn, struct \fBs2n_hmac_state\fP * hmac, struct \fBs2n_blob\fP * decrypted)"

.PP
Definition at line 49 of file s2n_cbc\&.c\&.
.PP
.nf
50 {
51     struct s2n_hmac_state copy;
52 
53     int mac_digest_size = s2n_hmac_digest_size(hmac->alg);
54 
55     /* The record has to be at least big enough to contain the MAC,
56      * plus the padding length byte */
57     gt_check(decrypted->size, mac_digest_size);
58 
59     int payload_and_padding_size = decrypted->size - mac_digest_size;
60 
61     /* Determine what the padding length is */
62     uint8_t padding_length = decrypted->data[decrypted->size - 1];
63 
64     int payload_length = MAX(payload_and_padding_size - padding_length - 1, 0);
65 
66     /* Update the MAC */
67     GUARD(s2n_hmac_update(hmac, decrypted->data, payload_length));
68     GUARD(s2n_hmac_copy(&copy, hmac));
69 
70     /* Check the MAC */
71     uint8_t check_digest[S2N_MAX_DIGEST_LEN];
72     lte_check(mac_digest_size, sizeof(check_digest));
73     GUARD(s2n_hmac_digest_two_compression_rounds(hmac, check_digest, mac_digest_size));
74 
75     int mismatches = s2n_constant_time_equals(decrypted->data + payload_length, check_digest, mac_digest_size) ^ 1;
76 
77     /* Compute a MAC on the rest of the data so that we perform the same number of hash operations */
78     GUARD(s2n_hmac_update(&copy, decrypted->data + payload_length + mac_digest_size, decrypted->size - payload_length - mac_digest_size - 1));
79 
80     /* SSLv3 doesn't specify what the padding should actually be */
81     if (conn->actual_protocol_version == S2N_SSLv3) {
82         return 0 - mismatches;
83     }
84 
85     /* Check the maximum amount that could theoritically be padding */
86     int check = MIN(255, (payload_and_padding_size - 1));
87 
88     int cutoff = check - padding_length;
89     for (int i = 0, j = decrypted->size - 1 - check; i < check && j < decrypted->size; i++, j++) {
90         uint8_t mask = ~(0xff << ((i >= cutoff) * 8));
91         mismatches |= (decrypted->data[j] ^ padding_length) & mask;
92     }
93 
94     if (mismatches) {
95         S2N_ERROR(S2N_ERR_CBC_VERIFY);
96     }
97 
98     return 0;
99 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
