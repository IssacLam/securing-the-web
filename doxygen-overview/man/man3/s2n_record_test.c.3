.TH "s2n-master/tests/unit/s2n_record_test.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tests/unit/s2n_record_test.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 's2n_test\&.h'\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <s2n\&.h>\fP
.br
\fC#include 'testlib/s2n_testlib\&.h'\fP
.br
\fC#include 'tls/s2n_cipher_suites\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'crypto/s2n_cipher\&.h'\fP
.br
\fC#include 'utils/s2n_random\&.h'\fP
.br
\fC#include 'crypto/s2n_hmac\&.h'\fP
.br
\fC#include 'tls/s2n_record\&.h'\fP
.br
\fC#include 'tls/s2n_prf\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmock_block_endecrypt\fP (struct \fBs2n_session_key\fP *key, struct \fBs2n_blob\fP *iv, struct \fBs2n_blob\fP *in, struct \fBs2n_blob\fP *out)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "struct \fBs2n_cipher\fP \fBmock_block_cipher\fP"
.br
.ti -1c
.RI "struct \fBs2n_cipher_suite\fP \fBmock_block_cipher_suite\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int mock_block_endecrypt (struct \fBs2n_session_key\fP * key, struct \fBs2n_blob\fP * iv, struct \fBs2n_blob\fP * in, struct \fBs2n_blob\fP * out)"

.PP
Definition at line 34 of file s2n_record_test\&.c\&.
.PP
.nf
35 {
36     return 0;
37 }
.fi
.SS "int main (int argc, char ** argv)"

.PP
Definition at line 60 of file s2n_record_test\&.c\&.
.PP
.nf
61 {
62     struct s2n_connection *conn;
63     uint8_t mac_key[] = "sample mac key";
64     struct s2n_blob fixed_iv = {\&.data = mac_key,\&.size = sizeof(mac_key) };
65     struct s2n_hmac_state check_mac;
66     uint8_t random_data[S2N_SMALL_FRAGMENT_LENGTH + 1];
67     struct s2n_blob r = {\&.data = random_data, \&.size = sizeof(random_data)};
68 
69     BEGIN_TEST();
70 
71     EXPECT_SUCCESS(s2n_hmac_init(&check_mac, S2N_HMAC_SHA1, fixed_iv\&.data, fixed_iv\&.size));
72     EXPECT_SUCCESS(s2n_get_urandom_data(&r));
73     EXPECT_NOT_NULL(conn = s2n_connection_new(S2N_SERVER));
74 
75     /* Peer and we are in sync */
76     conn->server = &conn->initial;
77     conn->client = &conn->initial;
78 
79     /* test the null cipher\&. */
80     conn->initial\&.cipher_suite = &s2n_null_cipher_suite;
81     conn->actual_protocol_version = S2N_TLS11;
82 
83     for (int i = 0; i <= S2N_SMALL_FRAGMENT_LENGTH + 1; i++) {
84         struct s2n_blob in = {\&.data = random_data,\&.size = i };
85         int bytes_written;
86 
87         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
88         EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &in));
89 
90         if (i < S2N_SMALL_FRAGMENT_LENGTH) {
91             EXPECT_EQUAL(bytes_written, i);
92         } else {
93             EXPECT_EQUAL(bytes_written, S2N_SMALL_FRAGMENT_LENGTH);
94         }
95 
96         EXPECT_EQUAL(conn->out\&.blob\&.data[0], TLS_APPLICATION_DATA);
97         EXPECT_EQUAL(conn->out\&.blob\&.data[1], 3);
98         EXPECT_EQUAL(conn->out\&.blob\&.data[2], 2);
99         EXPECT_EQUAL(conn->out\&.blob\&.data[3], (bytes_written >> 8) & 0xff);
100         EXPECT_EQUAL(conn->out\&.blob\&.data[4], bytes_written & 0xff);
101         EXPECT_EQUAL(memcmp(conn->out\&.blob\&.data + 5, random_data, bytes_written), 0);
102 
103         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
104         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->header_in));
105         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->header_in, 5));
106         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->in, s2n_stuffer_data_available(&conn->out)));
107 
108         uint8_t content_type;
109         uint16_t fragment_length;
110         EXPECT_SUCCESS(s2n_record_header_parse(conn, &content_type, &fragment_length));
111         EXPECT_SUCCESS(s2n_record_parse(conn));
112         EXPECT_EQUAL(content_type, TLS_APPLICATION_DATA);
113         EXPECT_EQUAL(fragment_length, bytes_written);
114     }
115 
116     /* test a fake streaming cipher with a MAC */
117     conn->initial\&.cipher_suite->hmac_alg = S2N_HMAC_SHA1;
118     EXPECT_SUCCESS(s2n_hmac_init(&conn->initial\&.client_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
119     EXPECT_SUCCESS(s2n_hmac_init(&conn->initial\&.server_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
120     conn->initial\&.cipher_suite = &s2n_null_cipher_suite;
121     conn->actual_protocol_version = S2N_TLS11;
122 
123     for (int i = 0; i <= S2N_SMALL_FRAGMENT_LENGTH + 1; i++) {
124         struct s2n_blob in = {\&.data = random_data,\&.size = i };
125         int bytes_written;
126 
127         EXPECT_SUCCESS(s2n_hmac_reset(&check_mac));
128         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, conn->initial\&.server_sequence_number, 8));
129 
130         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
131         EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &in));
132 
133         if (i < S2N_SMALL_FRAGMENT_LENGTH - 20) {
134             EXPECT_EQUAL(bytes_written, i);
135         } else {
136             EXPECT_EQUAL(bytes_written, S2N_SMALL_FRAGMENT_LENGTH - 20);
137         }
138 
139         uint16_t predicted_length = bytes_written + 20;
140         EXPECT_EQUAL(conn->out\&.blob\&.data[0], TLS_APPLICATION_DATA);
141         EXPECT_EQUAL(conn->out\&.blob\&.data[1], 3);
142         EXPECT_EQUAL(conn->out\&.blob\&.data[2], 2);
143         EXPECT_EQUAL(conn->out\&.blob\&.data[3], (predicted_length >> 8) & 0xff);
144         EXPECT_EQUAL(conn->out\&.blob\&.data[4], predicted_length & 0xff);
145         EXPECT_EQUAL(memcmp(conn->out\&.blob\&.data + 5, random_data, bytes_written), 0)
146 
147         uint8_t top = bytes_written >> 8;
148         uint8_t bot = bytes_written & 0xff;
149         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, conn->out\&.blob\&.data, 3));
150         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, &top, 1));
151         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, &bot, 1));
152         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, random_data, bytes_written));
153 
154         uint8_t check_digest[20];
155         EXPECT_SUCCESS(s2n_hmac_digest(&check_mac, check_digest, 20));
156         EXPECT_SUCCESS(s2n_hmac_digest_verify(conn->out\&.blob\&.data + 5 + bytes_written, check_digest, 20));
157 
158         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
159         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->header_in));
160         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->header_in, 5));
161         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->in, s2n_stuffer_data_available(&conn->out)));
162 
163         uint8_t original_seq_num[8];
164         memcpy(original_seq_num, conn->server->client_sequence_number, 8);
165 
166         uint8_t content_type;
167         uint16_t fragment_length;
168         EXPECT_SUCCESS(s2n_record_header_parse(conn, &content_type, &fragment_length));
169         EXPECT_SUCCESS(s2n_record_parse(conn));
170         EXPECT_EQUAL(content_type, TLS_APPLICATION_DATA);
171         EXPECT_EQUAL(fragment_length, predicted_length);
172 
173         /* Similate a replay attack and verify that replaying the same record
174          * fails due to the sequence number check */
175         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
176         EXPECT_SUCCESS(s2n_stuffer_reread(&conn->out));
177         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->in, s2n_stuffer_data_available(&conn->out)));
178         EXPECT_FAILURE(s2n_record_parse(conn));
179 
180         /* Restore the original sequence number */
181         memcpy(conn->server->client_sequence_number, original_seq_num, 8);
182 
183         /* Deliberately corrupt a byte of the output and check that the record
184          * won't parse 
185          */
186         uint32_t byte_to_corrupt;
187         EXPECT_SUCCESS(byte_to_corrupt = s2n_public_random(fragment_length));
188         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->header_in));
189         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
190         EXPECT_SUCCESS(s2n_stuffer_reread(&conn->out));
191         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->header_in, 5));
192         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->in, s2n_stuffer_data_available(&conn->out)));
193 
194         conn->in\&.blob\&.data[byte_to_corrupt] += 1;
195         EXPECT_FAILURE(s2n_record_parse(conn));
196     }
197 
198     /* Test a mock block cipher with a mac - in TLS1\&.0 mode */
199     EXPECT_SUCCESS(s2n_hmac_init(&conn->initial\&.client_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
200     EXPECT_SUCCESS(s2n_hmac_init(&conn->initial\&.server_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
201     conn->actual_protocol_version = S2N_TLS10;
202     conn->initial\&.cipher_suite = &mock_block_cipher_suite;
203 
204     uint16_t max_aligned_fragment = S2N_SMALL_FRAGMENT_LENGTH - (S2N_SMALL_FRAGMENT_LENGTH % 16);
205     for (int i = 0; i <= max_aligned_fragment + 1; i++) {
206         struct s2n_blob in = {\&.data = random_data,\&.size = i };
207         int bytes_written;
208 
209         EXPECT_SUCCESS(s2n_hmac_reset(&check_mac));
210         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, conn->initial\&.client_sequence_number, 8));
211 
212         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
213         EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &in));
214 
215         if (i < max_aligned_fragment - 20 - 1) {
216             EXPECT_EQUAL(bytes_written, i);
217         } else {
218             EXPECT_EQUAL(bytes_written, max_aligned_fragment - 20 - 1);
219         }
220 
221         uint16_t predicted_length = bytes_written + 1 + 20;
222         if (predicted_length % 16) {
223             predicted_length += (16 - (predicted_length % 16));
224         }
225         EXPECT_EQUAL(conn->out\&.blob\&.data[0], TLS_APPLICATION_DATA);
226         EXPECT_EQUAL(conn->out\&.blob\&.data[1], 3);
227         EXPECT_EQUAL(conn->out\&.blob\&.data[2], 1);
228         EXPECT_EQUAL(conn->out\&.blob\&.data[3], (predicted_length >> 8) & 0xff);
229         EXPECT_EQUAL(conn->out\&.blob\&.data[4], predicted_length & 0xff);
230         EXPECT_EQUAL(memcmp(conn->out\&.blob\&.data + 5, random_data, bytes_written), 0);
231 
232         /* The last byte of out should indicate how much padding there was */
233         uint8_t p = conn->out\&.blob\&.data[conn->out\&.write_cursor - 1];
234         EXPECT_EQUAL(5 + bytes_written + 20 + p + 1, s2n_stuffer_data_available(&conn->out));
235 
236         /* Check that the last 'p' bytes are all set to 'p' */
237         for (int j = 0; j <= p; j++) {
238             EXPECT_EQUAL(conn->out\&.blob\&.data[5 + bytes_written + 20 + j], p);
239         }
240 
241         uint8_t top = bytes_written >> 8;
242         uint8_t bot = bytes_written & 0xff;
243         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, conn->out\&.blob\&.data, 3));
244         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, &top, 1));
245         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, &bot, 1));
246         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, random_data, bytes_written));
247 
248         uint8_t check_digest[20];
249         EXPECT_SUCCESS(s2n_hmac_digest(&check_mac, check_digest, 20));
250         EXPECT_SUCCESS(s2n_hmac_digest_verify(conn->out\&.blob\&.data + 5 + bytes_written, check_digest, 20));
251 
252         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
253         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->header_in));
254         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->header_in, 5));
255         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->in, s2n_stuffer_data_available(&conn->out)));
256 
257         uint8_t content_type;
258         uint16_t fragment_length;
259         EXPECT_SUCCESS(s2n_record_header_parse(conn, &content_type, &fragment_length));
260         EXPECT_SUCCESS(s2n_record_parse(conn));
261         EXPECT_EQUAL(content_type, TLS_APPLICATION_DATA);
262         EXPECT_EQUAL(fragment_length, predicted_length);
263     }
264 
265     /* Test a mock block cipher with a mac - in TLS1\&.1+ mode */
266     conn->initial\&.cipher_suite->hmac_alg = S2N_HMAC_SHA1;
267     EXPECT_SUCCESS(s2n_hmac_init(&conn->initial\&.client_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
268     EXPECT_SUCCESS(s2n_hmac_init(&conn->initial\&.server_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
269     conn->actual_protocol_version = S2N_TLS11;
270     conn->initial\&.cipher_suite = &mock_block_cipher_suite;
271 
272     max_aligned_fragment = S2N_SMALL_FRAGMENT_LENGTH - (S2N_SMALL_FRAGMENT_LENGTH % 16);
273     for (int i = 0; i <= max_aligned_fragment + 1; i++) {
274         struct s2n_blob in = {\&.data = random_data,\&.size = i };
275         int bytes_written;
276 
277         EXPECT_SUCCESS(s2n_hmac_reset(&check_mac));
278         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, conn->initial\&.client_sequence_number, 8));
279 
280         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
281         EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &in));
282 
283         if (i < max_aligned_fragment - 20 - 16 - 1) {
284             EXPECT_EQUAL(bytes_written, i);
285         } else {
286             EXPECT_EQUAL(bytes_written, max_aligned_fragment - 20 - 16 - 1);
287         }
288 
289         uint16_t predicted_length = bytes_written + 1 + 20 + 16;
290         if (predicted_length % 16) {
291             predicted_length += (16 - (predicted_length % 16));
292         }
293         EXPECT_EQUAL(conn->out\&.blob\&.data[0], TLS_APPLICATION_DATA);
294         EXPECT_EQUAL(conn->out\&.blob\&.data[1], 3);
295         EXPECT_EQUAL(conn->out\&.blob\&.data[2], 2);
296         EXPECT_EQUAL(conn->out\&.blob\&.data[3], (predicted_length >> 8) & 0xff);
297         EXPECT_EQUAL(conn->out\&.blob\&.data[4], predicted_length & 0xff);
298         EXPECT_EQUAL(memcmp(conn->out\&.blob\&.data + 16 + 5, random_data, bytes_written), 0);
299 
300         /* The last byte of out should indicate how much padding there was */
301         uint8_t p = conn->out\&.blob\&.data[conn->out\&.write_cursor - 1];
302         EXPECT_EQUAL(5 + bytes_written + 20 + 16 + p + 1, s2n_stuffer_data_available(&conn->out));
303 
304         /* Check that the last 'p' bytes are all set to 'p' */
305         for (int j = 0; j <= p; j++) {
306             EXPECT_EQUAL(conn->out\&.blob\&.data[5 + bytes_written + 16 + 20 + j], p);
307         }
308 
309         uint8_t top = bytes_written >> 8;
310         uint8_t bot = bytes_written & 0xff;
311         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, conn->out\&.blob\&.data, 3));
312         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, &top, 1));
313         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, &bot, 1));
314         EXPECT_SUCCESS(s2n_hmac_update(&check_mac, random_data, bytes_written));
315 
316         uint8_t check_digest[20];
317         EXPECT_SUCCESS(s2n_hmac_digest(&check_mac, check_digest, 20));
318         EXPECT_SUCCESS(s2n_hmac_digest_verify(conn->out\&.blob\&.data + 16 + 5 + bytes_written, check_digest, 20));
319         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
320         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->header_in));
321         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->header_in, 5));
322         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->in, s2n_stuffer_data_available(&conn->out)));
323 
324         uint8_t content_type;
325         uint16_t fragment_length;
326         EXPECT_SUCCESS(s2n_record_header_parse(conn, &content_type, &fragment_length));
327         EXPECT_SUCCESS(s2n_record_parse(conn));
328         EXPECT_EQUAL(content_type, TLS_APPLICATION_DATA);
329         EXPECT_EQUAL(fragment_length, predicted_length);
330     }
331 
332     EXPECT_SUCCESS(s2n_connection_free(conn));
333 
334     END_TEST();
335 }
.fi
.SH "Variable Documentation"
.PP 
.SS "struct \fBs2n_cipher\fP mock_block_cipher"
\fBInitial value:\fP
.PP
.nf
= {
    \&.type = S2N_CBC,
    \&.key_material_size = 0,
    \&.io\&.cbc = {
               \&.block_size = 16,
               \&.record_iv_size = 16,
               \&.encrypt = mock_block_endecrypt,
               \&.decrypt = mock_block_endecrypt},
    \&.get_encryption_key = NULL,
    \&.get_decryption_key = NULL,
    \&.destroy_key = NULL,
}
.fi
.PP
Definition at line 39 of file s2n_record_test\&.c\&.
.SS "struct \fBs2n_cipher_suite\fP mock_block_cipher_suite"
\fBInitial value:\fP
.PP
.nf
= {
    \&.name = "TLS_MOCK_CBC",
    \&.value = {0x12, 0x34},
    \&.key_exchange_alg = &s2n_rsa,
    \&.cipher = &mock_block_cipher,
    \&.hmac_alg = S2N_HMAC_SHA1
}
.fi
.PP
Definition at line 52 of file s2n_record_test\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
