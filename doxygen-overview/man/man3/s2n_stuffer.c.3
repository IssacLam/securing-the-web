.TH "s2n-master/stuffer/s2n_stuffer.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/stuffer/s2n_stuffer.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/param\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include 'error/s2n_errno\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'utils/s2n_safety\&.h'\fP
.br
\fC#include 'utils/s2n_blob\&.h'\fP
.br
\fC#include 'utils/s2n_mem\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBs2n_stuffer_init\fP (struct \fBs2n_stuffer\fP *stuffer, struct \fBs2n_blob\fP *in)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_alloc\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t size)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_growable_alloc\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t size)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_free\fP (struct \fBs2n_stuffer\fP *stuffer)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_resize\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t size)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_rewrite\fP (struct \fBs2n_stuffer\fP *stuffer)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_reread\fP (struct \fBs2n_stuffer\fP *stuffer)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_wipe_n\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t size)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_wipe\fP (struct \fBs2n_stuffer\fP *stuffer)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_skip_read\fP (struct \fBs2n_stuffer\fP *stuffer, uint32_t n)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBs2n_stuffer_raw_read\fP (struct \fBs2n_stuffer\fP *stuffer, uint32_t data_len)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_read\fP (struct \fBs2n_stuffer\fP *stuffer, struct \fBs2n_blob\fP *out)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_erase_and_read\fP (struct \fBs2n_stuffer\fP *stuffer, struct \fBs2n_blob\fP *out)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_read_bytes\fP (struct \fBs2n_stuffer\fP *stuffer, uint8_t *data, uint32_t size)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_skip_write\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t n)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBs2n_stuffer_raw_write\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t data_len)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write\fP (struct \fBs2n_stuffer\fP *stuffer, const struct \fBs2n_blob\fP *in)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write_bytes\fP (struct \fBs2n_stuffer\fP *stuffer, const uint8_t *data, const uint32_t size)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_read_uint8\fP (struct \fBs2n_stuffer\fP *stuffer, uint8_t *\fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write_uint8\fP (struct \fBs2n_stuffer\fP *stuffer, const uint8_t \fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_read_uint16\fP (struct \fBs2n_stuffer\fP *stuffer, uint16_t *\fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write_uint16\fP (struct \fBs2n_stuffer\fP *stuffer, const uint16_t \fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_read_uint24\fP (struct \fBs2n_stuffer\fP *stuffer, uint32_t *\fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write_uint24\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t \fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_read_uint32\fP (struct \fBs2n_stuffer\fP *stuffer, uint32_t *\fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write_uint32\fP (struct \fBs2n_stuffer\fP *stuffer, const uint32_t \fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_read_uint64\fP (struct \fBs2n_stuffer\fP *stuffer, uint64_t *\fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write_uint64\fP (struct \fBs2n_stuffer\fP *stuffer, const uint64_t \fBu\fP)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_copy\fP (struct \fBs2n_stuffer\fP *from, struct \fBs2n_stuffer\fP *to, const uint32_t \fBlen\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int s2n_stuffer_init (struct \fBs2n_stuffer\fP * stuffer, struct \fBs2n_blob\fP * in)"

.PP
Definition at line 29 of file s2n_stuffer\&.c\&.
.PP
.nf
30 {
31     stuffer->blob\&.data = in->data;
32     stuffer->blob\&.size = in->size;
33     stuffer->wiped = 1;
34     stuffer->alloced = 0;
35     stuffer->growable = 0;
36     stuffer->tainted = 0;
37     stuffer->read_cursor = 0;
38     stuffer->write_cursor = 0;
39 
40     return 0;
41 }
.fi
.SS "int s2n_stuffer_alloc (struct \fBs2n_stuffer\fP * stuffer, const uint32_t size)"

.PP
Definition at line 43 of file s2n_stuffer\&.c\&.
.PP
.nf
44 {
45 
46     GUARD(s2n_alloc(&stuffer->blob, size));
47     GUARD(s2n_stuffer_init(stuffer, &stuffer->blob));
48 
49     stuffer->alloced = 1;
50 
51     return 0;
52 }
.fi
.SS "int s2n_stuffer_growable_alloc (struct \fBs2n_stuffer\fP * stuffer, const uint32_t size)"

.PP
Definition at line 54 of file s2n_stuffer\&.c\&.
.PP
.nf
55 {
56     GUARD(s2n_stuffer_alloc(stuffer, size));
57 
58     stuffer->growable = 1;
59 
60     return 0;
61 }
.fi
.SS "int s2n_stuffer_free (struct \fBs2n_stuffer\fP * stuffer)"

.PP
Definition at line 63 of file s2n_stuffer\&.c\&.
.PP
.nf
64 {
65     if (stuffer->alloced == 0) {
66         return 0;
67     }
68     if (stuffer->wiped == 0) {
69         GUARD(s2n_stuffer_wipe(stuffer));
70     }
71 
72     GUARD(s2n_free(&stuffer->blob));
73 
74     stuffer->blob\&.data = NULL;
75     stuffer->blob\&.size = 0;
76 
77     return 0;
78 }
.fi
.SS "int s2n_stuffer_resize (struct \fBs2n_stuffer\fP * stuffer, const uint32_t size)"

.PP
Definition at line 80 of file s2n_stuffer\&.c\&.
.PP
.nf
81 {
82     if (stuffer->growable == 0) {
83         S2N_ERROR(S2N_ERR_RESIZE_STATIC_STUFFER);
84     }
85     if (stuffer->tainted == 1) {
86         S2N_ERROR(S2N_ERR_RESIZE_TAINTED_STUFFER);
87     }
88     if (size == stuffer->blob\&.size) {
89         return 0;
90     }
91     if (size < stuffer->blob\&.size) {
92         GUARD(s2n_stuffer_wipe_n(stuffer, stuffer->blob\&.size - size));
93     }
94 
95     GUARD(s2n_realloc(&stuffer->blob, size));
96 
97     stuffer->blob\&.size = size;
98 
99     return 0;
100 }
.fi
.SS "int s2n_stuffer_rewrite (struct \fBs2n_stuffer\fP * stuffer)"

.PP
Definition at line 102 of file s2n_stuffer\&.c\&.
.PP
.nf
103 {
104     stuffer->write_cursor = 0;
105     stuffer->read_cursor = 0;
106 
107     return 0;
108 }
.fi
.SS "int s2n_stuffer_reread (struct \fBs2n_stuffer\fP * stuffer)"

.PP
Definition at line 110 of file s2n_stuffer\&.c\&.
.PP
.nf
111 {
112     stuffer->read_cursor = 0;
113     return 0;
114 }
.fi
.SS "int s2n_stuffer_wipe_n (struct \fBs2n_stuffer\fP * stuffer, const uint32_t size)"

.PP
Definition at line 116 of file s2n_stuffer\&.c\&.
.PP
.nf
117 {
118     uint32_t n = MIN(size, stuffer->write_cursor);
119 
120     /* Use '0' instead of 0 precisely to prevent C string compatibility */
121     memset_check(stuffer->blob\&.data + stuffer->write_cursor - n, '0', n);
122     stuffer->write_cursor -= n;
123 
124     if (stuffer->write_cursor == 0) {
125         stuffer->wiped = 1;
126     }
127 
128     stuffer->read_cursor = MIN(stuffer->read_cursor, stuffer->write_cursor);
129 
130     return 0;
131 }
.fi
.SS "int s2n_stuffer_wipe (struct \fBs2n_stuffer\fP * stuffer)"

.PP
Definition at line 133 of file s2n_stuffer\&.c\&.
.PP
.nf
134 {
135     stuffer->tainted = 0;
136     return s2n_stuffer_wipe_n(stuffer, stuffer->write_cursor);
137 }
.fi
.SS "int s2n_stuffer_skip_read (struct \fBs2n_stuffer\fP * stuffer, uint32_t n)"

.PP
Definition at line 139 of file s2n_stuffer\&.c\&.
.PP
.nf
140 {
141     if (s2n_stuffer_data_available(stuffer) < n) {
142         S2N_ERROR(S2N_ERR_STUFFER_OUT_OF_DATA);
143     }
144 
145     stuffer->read_cursor += n;
146     return 0;
147 }
.fi
.SS "\fBvoid\fP* s2n_stuffer_raw_read (struct \fBs2n_stuffer\fP * stuffer, uint32_t data_len)"

.PP
Definition at line 149 of file s2n_stuffer\&.c\&.
.PP
.nf
150 {
151     GUARD_PTR(s2n_stuffer_skip_read(stuffer, data_len));
152 
153     stuffer->tainted = 1;
154 
155     return stuffer->blob\&.data + stuffer->read_cursor - data_len;
156 }
.fi
.SS "int s2n_stuffer_read (struct \fBs2n_stuffer\fP * stuffer, struct \fBs2n_blob\fP * out)"

.PP
Definition at line 158 of file s2n_stuffer\&.c\&.
.PP
.nf
159 {
160     notnull_check(out);
161 
162     return s2n_stuffer_read_bytes(stuffer, out->data, out->size);
163 }
.fi
.SS "int s2n_stuffer_erase_and_read (struct \fBs2n_stuffer\fP * stuffer, struct \fBs2n_blob\fP * out)"

.PP
Definition at line 165 of file s2n_stuffer\&.c\&.
.PP
.nf
166 {
167     GUARD(s2n_stuffer_skip_read(stuffer, out->size));
168 
169     void *ptr = stuffer->blob\&.data + stuffer->read_cursor - out->size;
170     if (ptr == NULL) {
171         return -1;
172     }
173 
174     memcpy_check(out->data, ptr, out->size);
175     memset(ptr, 0, out->size);
176 
177     return 0;
178 }
.fi
.SS "int s2n_stuffer_read_bytes (struct \fBs2n_stuffer\fP * stuffer, uint8_t * data, uint32_t size)"

.PP
Definition at line 180 of file s2n_stuffer\&.c\&.
.PP
.nf
181 {
182     GUARD(s2n_stuffer_skip_read(stuffer, size));
183 
184     void *ptr = stuffer->blob\&.data + stuffer->read_cursor - size;
185     notnull_check(ptr);
186 
187     memcpy_check(data, ptr, size);
188 
189     return 0;
190 }
.fi
.SS "int s2n_stuffer_skip_write (struct \fBs2n_stuffer\fP * stuffer, const uint32_t n)"

.PP
Definition at line 192 of file s2n_stuffer\&.c\&.
.PP
.nf
193 {
194     if (s2n_stuffer_space_remaining(stuffer) < n) {
195         if (stuffer->growable) {
196             /* Always grow a stuffer by at least 1k */
197             uint32_t growth = MAX(n, 1024);
198 
199             GUARD(s2n_stuffer_resize(stuffer, stuffer->blob\&.size + growth));
200         } else {
201             S2N_ERROR(S2N_ERR_STUFFER_IS_FULL);
202         }
203     }
204 
205     stuffer->write_cursor += n;
206     stuffer->wiped = 0;
207     return 0;
208 }
.fi
.SS "\fBvoid\fP* s2n_stuffer_raw_write (struct \fBs2n_stuffer\fP * stuffer, const uint32_t data_len)"

.PP
Definition at line 210 of file s2n_stuffer\&.c\&.
.PP
.nf
211 {
212     GUARD_PTR(s2n_stuffer_skip_write(stuffer, data_len));
213 
214     stuffer->tainted = 1;
215 
216     return stuffer->blob\&.data + stuffer->write_cursor - data_len;
217 }
.fi
.SS "int s2n_stuffer_write (struct \fBs2n_stuffer\fP * stuffer, const struct \fBs2n_blob\fP * in)"

.PP
Definition at line 219 of file s2n_stuffer\&.c\&.
.PP
.nf
220 {
221     return s2n_stuffer_write_bytes(stuffer, in->data, in->size);
222 }
.fi
.SS "int s2n_stuffer_write_bytes (struct \fBs2n_stuffer\fP * stuffer, const uint8_t * data, const uint32_t size)"

.PP
Definition at line 224 of file s2n_stuffer\&.c\&.
.PP
.nf
225 {
226     GUARD(s2n_stuffer_skip_write(stuffer, size));
227 
228     void *ptr = stuffer->blob\&.data + stuffer->write_cursor - size;
229     if (ptr == NULL) {
230         return -1;
231     }
232 
233     if (ptr == data) {
234         return 0;
235     }
236 
237     memcpy_check(ptr, data, size);
238 
239     return 0;
240 }
.fi
.SS "int s2n_stuffer_read_uint8 (struct \fBs2n_stuffer\fP * stuffer, uint8_t * u)"

.PP
Definition at line 242 of file s2n_stuffer\&.c\&.
.PP
.nf
243 {
244     GUARD(s2n_stuffer_read_bytes(stuffer, u, 1));
245 
246     return 0;
247 }
.fi
.SS "int s2n_stuffer_write_uint8 (struct \fBs2n_stuffer\fP * stuffer, const uint8_t u)"

.PP
Definition at line 249 of file s2n_stuffer\&.c\&.
.PP
.nf
250 {
251     GUARD(s2n_stuffer_write_bytes(stuffer, &u, 1));
252 
253     return 0;
254 }
.fi
.SS "int s2n_stuffer_read_uint16 (struct \fBs2n_stuffer\fP * stuffer, uint16_t * u)"

.PP
Definition at line 256 of file s2n_stuffer\&.c\&.
.PP
.nf
257 {
258     uint8_t data[2];
259 
260     GUARD(s2n_stuffer_read_bytes(stuffer, data, sizeof(data)));
261 
262     *u = data[0] << 8;
263     *u |= data[1];
264 
265     return 0;
266 }
.fi
.SS "int s2n_stuffer_write_uint16 (struct \fBs2n_stuffer\fP * stuffer, const uint16_t u)"

.PP
Definition at line 268 of file s2n_stuffer\&.c\&.
.PP
.nf
269 {
270     uint8_t data[2] = { u >> 8, u & 0xff };
271 
272     GUARD(s2n_stuffer_write_bytes(stuffer, data, sizeof(data)));
273 
274     return 0;
275 }
.fi
.SS "int s2n_stuffer_read_uint24 (struct \fBs2n_stuffer\fP * stuffer, uint32_t * u)"

.PP
Definition at line 277 of file s2n_stuffer\&.c\&.
.PP
.nf
278 {
279     uint8_t data[3];
280 
281     GUARD(s2n_stuffer_read_bytes(stuffer, data, sizeof(data)));
282 
283     *u = data[0] << 16;
284     *u |= data[1] << 8;
285     *u |= data[2];
286 
287     return 0;
288 }
.fi
.SS "int s2n_stuffer_write_uint24 (struct \fBs2n_stuffer\fP * stuffer, const uint32_t u)"

.PP
Definition at line 290 of file s2n_stuffer\&.c\&.
.PP
.nf
291 {
292     uint8_t data[3] = { u >> 16, u >> 8, u & 0xff };
293 
294     GUARD(s2n_stuffer_write_bytes(stuffer, data, sizeof(data)));
295 
296     return 0;
297 }
.fi
.SS "int s2n_stuffer_read_uint32 (struct \fBs2n_stuffer\fP * stuffer, uint32_t * u)"

.PP
Definition at line 299 of file s2n_stuffer\&.c\&.
.PP
.nf
300 {
301     uint8_t data[4];
302 
303     GUARD(s2n_stuffer_read_bytes(stuffer, data, sizeof(data)));
304 
305     *u = ((uint32_t) data[0]) << 24;
306     *u |= data[1] << 16;
307     *u |= data[2] << 8;
308     *u |= data[3];
309 
310     return 0;
311 }
.fi
.SS "int s2n_stuffer_write_uint32 (struct \fBs2n_stuffer\fP * stuffer, const uint32_t u)"

.PP
Definition at line 313 of file s2n_stuffer\&.c\&.
.PP
.nf
314 {
315     uint8_t data[4] = { u >> 24, u >> 16, u >> 8, u & 0xff };
316 
317     GUARD(s2n_stuffer_write_bytes(stuffer, data, sizeof(data)));
318 
319     return 0;
320 }
.fi
.SS "int s2n_stuffer_read_uint64 (struct \fBs2n_stuffer\fP * stuffer, uint64_t * u)"

.PP
Definition at line 322 of file s2n_stuffer\&.c\&.
.PP
.nf
323 {
324     uint8_t data[8];
325 
326     GUARD(s2n_stuffer_read_bytes(stuffer, data, sizeof(data)));
327 
328     *u = ((uint64_t) data[0]) << 56;
329     *u |= ((uint64_t) data[1]) << 48;
330     *u |= ((uint64_t) data[2]) << 40;
331     *u |= ((uint64_t) data[3]) << 32;
332     *u |= ((uint64_t) data[4]) << 24;
333     *u |= ((uint64_t) data[5]) << 16;
334     *u |= ((uint64_t) data[6]) << 8;
335     *u |= data[7];
336 
337     return 0;
338 }
.fi
.SS "int s2n_stuffer_write_uint64 (struct \fBs2n_stuffer\fP * stuffer, const uint64_t u)"

.PP
Definition at line 340 of file s2n_stuffer\&.c\&.
.PP
.nf
341 {
342     uint8_t data[8] = { u >> 56, u >> 48, u >> 40, u >> 32, u >> 24, u >> 16, u >> 8, u & 0xff };
343 
344     GUARD(s2n_stuffer_write_bytes(stuffer, data, sizeof(data)));
345 
346     return 0;
347 }
.fi
.SS "int s2n_stuffer_copy (struct \fBs2n_stuffer\fP * from, struct \fBs2n_stuffer\fP * to, const uint32_t len)"

.PP
Definition at line 349 of file s2n_stuffer\&.c\&.
.PP
.nf
350 {
351     GUARD(s2n_stuffer_skip_read(from, len));
352 
353     GUARD(s2n_stuffer_skip_write(to, len));
354 
355     uint8_t *from_ptr = from->blob\&.data + from->read_cursor - len;
356     uint8_t *to_ptr = to->blob\&.data + to->write_cursor - len;
357 
358     memcpy_check(to_ptr, from_ptr, len);
359 
360     return 0;
361 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
