.TH "ecdsa.h" 3 "Fri Aug 12 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ecdsa.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/opensslconf\&.h>\fP
.br
\fC#include <openssl/ec\&.h>\fP
.br
\fC#include <openssl/ossl_typ\&.h>\fP
.br
\fC#include <openssl/bn\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBECDSA_SIG_st\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBECDSA_F_ECDSA_CHECK\fP   104"
.br
.ti -1c
.RI "#define \fBECDSA_F_ECDSA_DATA_NEW_METHOD\fP   100"
.br
.ti -1c
.RI "#define \fBECDSA_F_ECDSA_DO_SIGN\fP   101"
.br
.ti -1c
.RI "#define \fBECDSA_F_ECDSA_DO_VERIFY\fP   102"
.br
.ti -1c
.RI "#define \fBECDSA_F_ECDSA_METHOD_NEW\fP   105"
.br
.ti -1c
.RI "#define \fBECDSA_F_ECDSA_SIGN_SETUP\fP   103"
.br
.ti -1c
.RI "#define \fBECDSA_R_BAD_SIGNATURE\fP   100"
.br
.ti -1c
.RI "#define \fBECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE\fP   101"
.br
.ti -1c
.RI "#define \fBECDSA_R_ERR_EC_LIB\fP   102"
.br
.ti -1c
.RI "#define \fBECDSA_R_MISSING_PARAMETERS\fP   103"
.br
.ti -1c
.RI "#define \fBECDSA_R_NEED_NEW_SETUP_VALUES\fP   106"
.br
.ti -1c
.RI "#define \fBECDSA_R_NON_FIPS_METHOD\fP   107"
.br
.ti -1c
.RI "#define \fBECDSA_R_RANDOM_NUMBER_GENERATION_FAILED\fP   104"
.br
.ti -1c
.RI "#define \fBECDSA_R_SIGNATURE_MALLOC_FAILED\fP   105"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBECDSA_SIG_st\fP \fBECDSA_SIG\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBECDSA_SIG\fP * \fBECDSA_SIG_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_SIG_free\fP (\fBECDSA_SIG\fP *sig)"
.br
.ti -1c
.RI "int \fBi2d_ECDSA_SIG\fP (const \fBECDSA_SIG\fP *sig, unsigned char **\fBpp\fP)"
.br
.ti -1c
.RI "\fBECDSA_SIG\fP * \fBd2i_ECDSA_SIG\fP (\fBECDSA_SIG\fP **sig, const unsigned char **\fBpp\fP, long \fBlen\fP)"
.br
.ti -1c
.RI "\fBECDSA_SIG\fP * \fBECDSA_do_sign\fP (const unsigned char *dgst, int dgst_len, \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "\fBECDSA_SIG\fP * \fBECDSA_do_sign_ex\fP (const unsigned char *dgst, int dgstlen, const \fBBIGNUM\fP *kinv, const \fBBIGNUM\fP *rp, \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "int \fBECDSA_do_verify\fP (const unsigned char *dgst, int dgst_len, const \fBECDSA_SIG\fP *sig, \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "const \fBECDSA_METHOD\fP * \fBECDSA_OpenSSL\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_set_default_method\fP (const \fBECDSA_METHOD\fP *meth)"
.br
.ti -1c
.RI "const \fBECDSA_METHOD\fP * \fBECDSA_get_default_method\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBECDSA_set_method\fP (\fBEC_KEY\fP *eckey, const \fBECDSA_METHOD\fP *meth)"
.br
.ti -1c
.RI "int \fBECDSA_size\fP (const \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "int \fBECDSA_sign_setup\fP (\fBEC_KEY\fP *eckey, \fBBN_CTX\fP *ctx, \fBBIGNUM\fP **kinv, \fBBIGNUM\fP **rp)"
.br
.ti -1c
.RI "int \fBECDSA_sign\fP (int \fBtype\fP, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "int \fBECDSA_sign_ex\fP (int \fBtype\fP, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, const \fBBIGNUM\fP *kinv, const \fBBIGNUM\fP *rp, \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "int \fBECDSA_verify\fP (int \fBtype\fP, const unsigned char *dgst, int dgstlen, const unsigned char *sig, int siglen, \fBEC_KEY\fP *eckey)"
.br
.ti -1c
.RI "int \fBECDSA_get_ex_new_index\fP (long argl, \fBvoid\fP *argp, \fBCRYPTO_EX_new\fP *new_func, \fBCRYPTO_EX_dup\fP *dup_func, \fBCRYPTO_EX_free\fP *\fBfree_func\fP)"
.br
.ti -1c
.RI "int \fBECDSA_set_ex_data\fP (\fBEC_KEY\fP *d, int idx, \fBvoid\fP *arg)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBECDSA_get_ex_data\fP (\fBEC_KEY\fP *d, int idx)"
.br
.ti -1c
.RI "\fBECDSA_METHOD\fP * \fBECDSA_METHOD_new\fP (const \fBECDSA_METHOD\fP *\fBecdsa_method\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_METHOD_free\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_METHOD_set_app_data\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP, \fBvoid\fP *app)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBECDSA_METHOD_get_app_data\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_METHOD_set_sign\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP, \fBECDSA_SIG\fP *(*ecdsa_do_sign)(const unsigned char                                                                                                                                                                                                                       *dgst, int dgst_len,                                                                                                                                                                                                                       const \fBBIGNUM\fP *inv,                                                                                                                                                                                                                       const \fBBIGNUM\fP *rp,                                                                                                                                                                                                                       \fBEC_KEY\fP *eckey))"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_METHOD_set_sign_setup\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP, int(*ecdsa_sign_setup)(\fBEC_KEY\fP *eckey,                                                                                                                                                                                                                               \fBBN_CTX\fP *ctx,                                                                                                                                                                                                                               \fBBIGNUM\fP **kinv,                                                                                                                                                                                                                               \fBBIGNUM\fP **r))"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_METHOD_set_verify\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP, int(*ecdsa_do_verify)(const unsigned char                                                                                                                                                                                                           *dgst, int dgst_len,                                                                                                                                                                                                           const \fBECDSA_SIG\fP *sig,                                                                                                                                                                                                           \fBEC_KEY\fP *eckey))"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_METHOD_set_flags\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP, int \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBECDSA_METHOD_set_name\fP (\fBECDSA_METHOD\fP *\fBecdsa_method\fP, char *name)"
.br
.ti -1c
.RI "\fBvoid\fP \fBERR_load_ECDSA_strings\fP (\fBvoid\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Include file for the OpenSSL ECDSA functions 
.PP
\fBAuthor:\fP
.RS 4
Written by Nils Larsch for the OpenSSL project 
.RE
.PP

.PP
Definition in file \fBcrypto/ecdsa/ecdsa\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define ECDSA_F_ECDSA_CHECK   104"

.PP
Definition at line 315 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_F_ECDSA_DATA_NEW_METHOD   100"

.PP
Definition at line 316 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_F_ECDSA_DO_SIGN   101"

.PP
Definition at line 317 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_F_ECDSA_DO_VERIFY   102"

.PP
Definition at line 318 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_F_ECDSA_METHOD_NEW   105"

.PP
Definition at line 319 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_F_ECDSA_SIGN_SETUP   103"

.PP
Definition at line 320 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_BAD_SIGNATURE   100"

.PP
Definition at line 323 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE   101"

.PP
Definition at line 324 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_ERR_EC_LIB   102"

.PP
Definition at line 325 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_MISSING_PARAMETERS   103"

.PP
Definition at line 326 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_NEED_NEW_SETUP_VALUES   106"

.PP
Definition at line 327 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_NON_FIPS_METHOD   107"

.PP
Definition at line 328 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED   104"

.PP
Definition at line 329 of file crypto/ecdsa/ecdsa\&.h\&.
.SS "#define ECDSA_R_SIGNATURE_MALLOC_FAILED   105"

.PP
Definition at line 330 of file crypto/ecdsa/ecdsa\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBECDSA_SIG_st\fP  \fBECDSA_SIG\fP"

.SH "Function Documentation"
.PP 
.SS "\fBECDSA_SIG\fP* d2i_ECDSA_SIG (\fBECDSA_SIG\fP ** sig, const unsigned char ** pp, long len)"
Decodes a DER encoded ECDSA signature (note: this function changes *pp (*pp += len))\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsig\fP pointer to ECDSA_SIG pointer (may be NULL) 
.br
\fIpp\fP memory buffer with the DER encoded signature 
.br
\fIlen\fP length of the buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the decoded ECDSA_SIG structure (or NULL) 
.RE
.PP

.SS "\fBECDSA_SIG\fP* ECDSA_do_sign (const unsigned char * dgst, int dgst_len, \fBEC_KEY\fP * eckey)"
Computes the ECDSA signature of the given hash value using the supplied private key and returns the created signature\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdgst\fP pointer to the hash value 
.br
\fIdgst_len\fP length of the hash value 
.br
\fIeckey\fP EC_KEY object containing a private EC key 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to a ECDSA_SIG structure or NULL if an error occurred 
.RE
.PP

.SS "\fBECDSA_SIG\fP* ECDSA_do_sign_ex (const unsigned char * dgst, int dgstlen, const \fBBIGNUM\fP * kinv, const \fBBIGNUM\fP * rp, \fBEC_KEY\fP * eckey)"
Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdgst\fP pointer to the hash value to sign 
.br
\fIdgstlen\fP length of the hash value 
.br
\fIkinv\fP BIGNUM with a pre-computed inverse k (optional) 
.br
\fIrp\fP BIGNUM with a pre-computed rp value (optioanl), see ECDSA_sign_setup 
.br
\fIeckey\fP EC_KEY object containing a private EC key 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to a ECDSA_SIG structure or NULL if an error occurred 
.RE
.PP

.SS "int ECDSA_do_verify (const unsigned char * dgst, int dgst_len, const \fBECDSA_SIG\fP * sig, \fBEC_KEY\fP * eckey)"
Verifies that the supplied signature is a valid ECDSA signature of the supplied hash value using the supplied public key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdgst\fP pointer to the hash value 
.br
\fIdgst_len\fP length of the hash value 
.br
\fIsig\fP ECDSA_SIG structure 
.br
\fIeckey\fP EC_KEY object containing a public EC key 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if the signature is valid, 0 if the signature is invalid and -1 on error 
.RE
.PP

.SS "const \fBECDSA_METHOD\fP* ECDSA_get_default_method (\fBvoid\fP)"
Returns the default ECDSA method 
.PP
\fBReturns:\fP
.RS 4
pointer to ECDSA_METHOD structure containing the default method 
.RE
.PP

.SS "\fBvoid\fP* ECDSA_get_ex_data (\fBEC_KEY\fP * d, int idx)"

.SS "int ECDSA_get_ex_new_index (long argl, \fBvoid\fP * argp, \fBCRYPTO_EX_new\fP * new_func, \fBCRYPTO_EX_dup\fP * dup_func, \fBCRYPTO_EX_free\fP * free_func)"

.SS "\fBvoid\fP ECDSA_METHOD_free (\fBECDSA_METHOD\fP * ecdsa_method)"
frees a ECDSA_METHOD structure 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to the ECDSA_METHOD structure 
.RE
.PP

.SS "\fBvoid\fP* ECDSA_METHOD_get_app_data (\fBECDSA_METHOD\fP * ecdsa_method)"
Returns application specific data from a ECDSA_METHOD structure 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to ECDSA_METHOD structure 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to application specific data\&. 
.RE
.PP

.SS "\fBECDSA_METHOD\fP* ECDSA_METHOD_new (const \fBECDSA_METHOD\fP * ecdsa_method)"
Allocates and initialize a ECDSA_METHOD structure 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to ECDSA_METHOD to copy\&. (May be NULL) 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to a ECDSA_METHOD structure or NULL if an error occurred 
.RE
.PP

.SS "\fBvoid\fP ECDSA_METHOD_set_app_data (\fBECDSA_METHOD\fP * ecdsa_method, \fBvoid\fP * app)"
Sets application specific data in the ECDSA_METHOD 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to existing ECDSA_METHOD 
.br
\fIapp\fP application specific data to set 
.RE
.PP

.SS "\fBvoid\fP ECDSA_METHOD_set_flags (\fBECDSA_METHOD\fP * ecdsa_method, int flags)"

.SS "\fBvoid\fP ECDSA_METHOD_set_name (\fBECDSA_METHOD\fP * ecdsa_method, char * name)"
Set the flags field in the ECDSA_METHOD 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to existing ECDSA_METHOD 
.br
\fIflags\fP flags value to set 
.RE
.PP

.SS "\fBvoid\fP ECDSA_METHOD_set_sign (\fBECDSA_METHOD\fP * ecdsa_method, \fBECDSA_SIG\fP *(*)(const unsigned chardgst, int dgst_lenconst \fBBIGNUM\fP *invconst \fBBIGNUM\fP *rpfBEC_KEY\fP *eckey) ecdsa_do_sign)"
Set the ECDSA_do_sign function in the ECDSA_METHOD 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to existing ECDSA_METHOD 
.br
\fIecdsa_do_sign\fP a funtion of type ECDSA_do_sign 
.RE
.PP

.SS "\fBvoid\fP ECDSA_METHOD_set_sign_setup (\fBECDSA_METHOD\fP * ecdsa_method, int(*)(\fBEC_KEY\fP *eckeyfBBN_CTX\fP *ctxfBBIGNUM\fP **kinvfBBIGNUM\fP **r) ecdsa_sign_setup)"
Set the ECDSA_sign_setup function in the ECDSA_METHOD 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to existing ECDSA_METHOD 
.br
\fIecdsa_sign_setup\fP a funtion of type ECDSA_sign_setup 
.RE
.PP

.SS "\fBvoid\fP ECDSA_METHOD_set_verify (\fBECDSA_METHOD\fP * ecdsa_method, int(*)(const unsigned chardgst, int dgst_lenconst \fBECDSA_SIG\fP *sigfBEC_KEY\fP *eckey) ecdsa_do_verify)"
Set the ECDSA_do_verify function in the ECDSA_METHOD 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to existing ECDSA_METHOD 
.br
\fIecdsa_do_verify\fP a funtion of type ECDSA_do_verify 
.RE
.PP

.SS "const \fBECDSA_METHOD\fP* ECDSA_OpenSSL (\fBvoid\fP)"

.SS "\fBvoid\fP ECDSA_set_default_method (const \fBECDSA_METHOD\fP * meth)"
Sets the default ECDSA method 
.PP
\fBParameters:\fP
.RS 4
\fImeth\fP new default ECDSA_METHOD 
.RE
.PP

.SS "int ECDSA_set_ex_data (\fBEC_KEY\fP * d, int idx, \fBvoid\fP * arg)"

.SS "int ECDSA_set_method (\fBEC_KEY\fP * eckey, const \fBECDSA_METHOD\fP * meth)"
Sets method to be used for the ECDSA operations 
.PP
\fBParameters:\fP
.RS 4
\fIeckey\fP EC_KEY object 
.br
\fImeth\fP new method 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise 
.RE
.PP

.SS "\fBvoid\fP ECDSA_SIG_free (\fBECDSA_SIG\fP * sig)"
frees a ECDSA_SIG structure 
.PP
\fBParameters:\fP
.RS 4
\fIsig\fP pointer to the ECDSA_SIG structure 
.RE
.PP

.SS "\fBECDSA_SIG\fP* ECDSA_SIG_new (\fBvoid\fP)"
Allocates and initialize a ECDSA_SIG structure 
.PP
\fBReturns:\fP
.RS 4
pointer to a ECDSA_SIG structure or NULL if an error occurred 
.RE
.PP

.SS "int ECDSA_sign (int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, \fBEC_KEY\fP * eckey)"
Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory)\&. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP this parameter is ignored 
.br
\fIdgst\fP pointer to the hash value to sign 
.br
\fIdgstlen\fP length of the hash value 
.br
\fIsig\fP memory for the DER encoded created signature 
.br
\fIsiglen\fP pointer to the length of the returned signature 
.br
\fIeckey\fP EC_KEY object containing a private EC key 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise 
.RE
.PP

.SS "int ECDSA_sign_ex (int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, const \fBBIGNUM\fP * kinv, const \fBBIGNUM\fP * rp, \fBEC_KEY\fP * eckey)"
Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory)\&. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP this parameter is ignored 
.br
\fIdgst\fP pointer to the hash value to sign 
.br
\fIdgstlen\fP length of the hash value 
.br
\fIsig\fP buffer to hold the DER encoded signature 
.br
\fIsiglen\fP pointer to the length of the returned signature 
.br
\fIkinv\fP BIGNUM with a pre-computed inverse k (optional) 
.br
\fIrp\fP BIGNUM with a pre-computed rp value (optioanl), see ECDSA_sign_setup 
.br
\fIeckey\fP EC_KEY object containing a private EC key 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise 
.RE
.PP

.SS "int ECDSA_sign_setup (\fBEC_KEY\fP * eckey, \fBBN_CTX\fP * ctx, \fBBIGNUM\fP ** kinv, \fBBIGNUM\fP ** rp)"
Precompute parts of the signing operation 
.PP
\fBParameters:\fP
.RS 4
\fIeckey\fP EC_KEY object containing a private EC key 
.br
\fIctx\fP BN_CTX object (optional) 
.br
\fIkinv\fP BIGNUM pointer for the inverse of k 
.br
\fIrp\fP BIGNUM pointer for x coordinate of k * generator 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success and 0 otherwise 
.RE
.PP

.SS "int ECDSA_size (const \fBEC_KEY\fP * eckey)"
Returns the maximum length of the DER encoded signature 
.PP
\fBParameters:\fP
.RS 4
\fIeckey\fP EC_KEY object 
.RE
.PP
\fBReturns:\fP
.RS 4
numbers of bytes required for the DER encoded signature 
.RE
.PP

.SS "int ECDSA_verify (int type, const unsigned char * dgst, int dgstlen, const unsigned char * sig, int siglen, \fBEC_KEY\fP * eckey)"
Verifies that the given signature is valid ECDSA signature of the supplied hash value using the specified public key\&. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP this parameter is ignored 
.br
\fIdgst\fP pointer to the hash value 
.br
\fIdgstlen\fP length of the hash value 
.br
\fIsig\fP pointer to the DER encoded signature 
.br
\fIsiglen\fP length of the DER encoded signature 
.br
\fIeckey\fP EC_KEY object containing a public EC key 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if the signature is valid, 0 if the signature is invalid and -1 on error 
.RE
.PP

.SS "\fBvoid\fP ERR_load_ECDSA_strings (\fBvoid\fP)"
Set the name field in the ECDSA_METHOD 
.PP
\fBParameters:\fP
.RS 4
\fI\fBecdsa_method\fP\fP pointer to existing ECDSA_METHOD 
.br
\fIname\fP name to set 
.RE
.PP

.SS "int i2d_ECDSA_SIG (const \fBECDSA_SIG\fP * sig, unsigned char ** pp)"
DER encode content of ECDSA_SIG object (note: this function modifies *pp (*pp += length of the DER encoded signature))\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsig\fP pointer to the ECDSA_SIG object 
.br
\fIpp\fP pointer to a unsigned char pointer for the output or NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
the length of the DER encoded ECDSA_SIG object or 0 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
