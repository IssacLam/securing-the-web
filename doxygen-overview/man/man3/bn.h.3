.TH "s2n-master/libcrypto-build/openssl/include/openssl/bn.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/include/openssl/bn.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <limits\&.h>\fP
.br
\fC#include <openssl/e_os2\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <openssl/ossl_typ\&.h>\fP
.br
\fC#include <openssl/crypto\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBbignum_st\fP"
.br
.ti -1c
.RI "struct \fBbn_mont_ctx_st\fP"
.br
.ti -1c
.RI "struct \fBbn_recp_ctx_st\fP"
.br
.ti -1c
.RI "struct \fBbn_gencb_st\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBN_MUL_COMBA\fP"
.br
.ti -1c
.RI "#define \fBBN_SQR_COMBA\fP"
.br
.ti -1c
.RI "#define \fBBN_RECURSION\fP"
.br
.ti -1c
.RI "#define \fBBN_DEFAULT_BITS\fP   1280"
.br
.ti -1c
.RI "#define \fBBN_FLG_MALLOCED\fP   0x01"
.br
.ti -1c
.RI "#define \fBBN_FLG_STATIC_DATA\fP   0x02"
.br
.ti -1c
.RI "#define \fBBN_FLG_CONSTTIME\fP   0x04"
.br
.ti -1c
.RI "#define \fBBN_FLG_FREE\fP   0x8000"
.br
.ti -1c
.RI "#define \fBBN_set_flags\fP(b,  n)             ((b)\->\fBflags\fP|=(n))"
.br
.ti -1c
.RI "#define \fBBN_get_flags\fP(b,  n)             ((b)\->\fBflags\fP&(n))"
.br
.ti -1c
.RI "#define \fBBN_with_flags\fP(dest,  b,  n)"
.br
.ti -1c
.RI "#define \fBBN_GENCB_set_old\fP(gencb,  callback,  cb_arg)"
.br
.ti -1c
.RI "#define \fBBN_GENCB_set\fP(gencb,  callback,  cb_arg)"
.br
.ti -1c
.RI "#define \fBBN_prime_checks\fP"
.br
.ti -1c
.RI "#define \fBBN_prime_checks_for_size\fP(b)"
.br
.ti -1c
.RI "#define \fBBN_num_bytes\fP(\fBa\fP)   ((\fBBN_num_bits\fP(\fBa\fP)+7)/8)"
.br
.ti -1c
.RI "#define \fBBN_abs_is_word\fP(\fBa\fP,  w)"
.br
.ti -1c
.RI "#define \fBBN_is_zero\fP(\fBa\fP)             ((\fBa\fP)\->top == 0)"
.br
.ti -1c
.RI "#define \fBBN_is_one\fP(\fBa\fP)               (\fBBN_abs_is_word\fP((\fBa\fP),1) && !(\fBa\fP)\->neg)"
.br
.ti -1c
.RI "#define \fBBN_is_word\fP(\fBa\fP,  w)         (\fBBN_abs_is_word\fP((\fBa\fP),(w)) && (!(w) || !(\fBa\fP)\->neg))"
.br
.ti -1c
.RI "#define \fBBN_is_odd\fP(\fBa\fP)               (((\fBa\fP)\->top > 0) && ((\fBa\fP)\->d[0] & 1))"
.br
.ti -1c
.RI "#define \fBBN_one\fP(\fBa\fP)             (\fBBN_set_word\fP((\fBa\fP),1))"
.br
.ti -1c
.RI "#define \fBBN_zero_ex\fP(\fBa\fP)"
.br
.ti -1c
.RI "#define \fBBN_zero\fP(\fBa\fP)           (\fBBN_set_word\fP((\fBa\fP),0))"
.br
.ti -1c
.RI "#define \fBBN_is_negative\fP(\fBa\fP)   ((\fBa\fP)\->neg != 0)"
.br
.ti -1c
.RI "#define \fBBN_mod\fP(rem,  m,  d,  ctx)   \fBBN_div\fP(NULL,(rem),(m),(d),(ctx))"
.br
.ti -1c
.RI "#define \fBBN_to_montgomery\fP(r,  \fBa\fP,  mont,  ctx)"
.br
.ti -1c
.RI "#define \fBBN_BLINDING_NO_UPDATE\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBBN_BLINDING_NO_RECREATE\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBBN_GF2m_sub\fP(r,  \fBa\fP,  b)   \fBBN_GF2m_add\fP(r, \fBa\fP, b)"
.br
.ti -1c
.RI "#define \fBBN_GF2m_cmp\fP(\fBa\fP,  b)   \fBBN_ucmp\fP((\fBa\fP), (b))"
.br
.ti -1c
.RI "#define \fBbn_expand\fP(\fBa\fP,  \fBbits\fP)"
.br
.ti -1c
.RI "#define \fBbn_wexpand\fP(\fBa\fP,  words)   (((words) <= (\fBa\fP)\->dmax)?(\fBa\fP):\fBbn_expand2\fP((\fBa\fP),(words)))"
.br
.ti -1c
.RI "#define \fBbn_pollute\fP(\fBa\fP)"
.br
.ti -1c
.RI "#define \fBbn_check_top\fP(\fBa\fP)"
.br
.ti -1c
.RI "#define \fBbn_fix_top\fP(\fBa\fP)                     \fBbn_correct_top\fP(\fBa\fP)"
.br
.ti -1c
.RI "#define \fBbn_check_size\fP(bn,  \fBbits\fP)"
.br
.ti -1c
.RI "#define \fBbn_wcheck_size\fP(bn,  words)"
.br
.ti -1c
.RI "#define \fBbn_correct_top\fP(\fBa\fP)"
.br
.ti -1c
.RI "#define \fBBN_F_BNRAND\fP   127"
.br
.ti -1c
.RI "#define \fBBN_F_BN_BLINDING_CONVERT_EX\fP   100"
.br
.ti -1c
.RI "#define \fBBN_F_BN_BLINDING_CREATE_PARAM\fP   128"
.br
.ti -1c
.RI "#define \fBBN_F_BN_BLINDING_INVERT_EX\fP   101"
.br
.ti -1c
.RI "#define \fBBN_F_BN_BLINDING_NEW\fP   102"
.br
.ti -1c
.RI "#define \fBBN_F_BN_BLINDING_UPDATE\fP   103"
.br
.ti -1c
.RI "#define \fBBN_F_BN_BN2DEC\fP   104"
.br
.ti -1c
.RI "#define \fBBN_F_BN_BN2HEX\fP   105"
.br
.ti -1c
.RI "#define \fBBN_F_BN_CTX_GET\fP   116"
.br
.ti -1c
.RI "#define \fBBN_F_BN_CTX_NEW\fP   106"
.br
.ti -1c
.RI "#define \fBBN_F_BN_CTX_START\fP   129"
.br
.ti -1c
.RI "#define \fBBN_F_BN_DIV\fP   107"
.br
.ti -1c
.RI "#define \fBBN_F_BN_DIV_NO_BRANCH\fP   138"
.br
.ti -1c
.RI "#define \fBBN_F_BN_DIV_RECP\fP   130"
.br
.ti -1c
.RI "#define \fBBN_F_BN_EXP\fP   123"
.br
.ti -1c
.RI "#define \fBBN_F_BN_EXPAND2\fP   108"
.br
.ti -1c
.RI "#define \fBBN_F_BN_EXPAND_INTERNAL\fP   120"
.br
.ti -1c
.RI "#define \fBBN_F_BN_GF2M_MOD\fP   131"
.br
.ti -1c
.RI "#define \fBBN_F_BN_GF2M_MOD_EXP\fP   132"
.br
.ti -1c
.RI "#define \fBBN_F_BN_GF2M_MOD_MUL\fP   133"
.br
.ti -1c
.RI "#define \fBBN_F_BN_GF2M_MOD_SOLVE_QUAD\fP   134"
.br
.ti -1c
.RI "#define \fBBN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR\fP   135"
.br
.ti -1c
.RI "#define \fBBN_F_BN_GF2M_MOD_SQR\fP   136"
.br
.ti -1c
.RI "#define \fBBN_F_BN_GF2M_MOD_SQRT\fP   137"
.br
.ti -1c
.RI "#define \fBBN_F_BN_LSHIFT\fP   145"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_EXP2_MONT\fP   118"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_EXP_MONT\fP   109"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_EXP_MONT_CONSTTIME\fP   124"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_EXP_MONT_WORD\fP   117"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_EXP_RECP\fP   125"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_EXP_SIMPLE\fP   126"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_INVERSE\fP   110"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_INVERSE_NO_BRANCH\fP   139"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_LSHIFT_QUICK\fP   119"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_MUL_RECIPROCAL\fP   111"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MOD_SQRT\fP   121"
.br
.ti -1c
.RI "#define \fBBN_F_BN_MPI2BN\fP   112"
.br
.ti -1c
.RI "#define \fBBN_F_BN_NEW\fP   113"
.br
.ti -1c
.RI "#define \fBBN_F_BN_RAND\fP   114"
.br
.ti -1c
.RI "#define \fBBN_F_BN_RAND_RANGE\fP   122"
.br
.ti -1c
.RI "#define \fBBN_F_BN_RSHIFT\fP   146"
.br
.ti -1c
.RI "#define \fBBN_F_BN_USUB\fP   115"
.br
.ti -1c
.RI "#define \fBBN_R_ARG2_LT_ARG3\fP   100"
.br
.ti -1c
.RI "#define \fBBN_R_BAD_RECIPROCAL\fP   101"
.br
.ti -1c
.RI "#define \fBBN_R_BIGNUM_TOO_LONG\fP   114"
.br
.ti -1c
.RI "#define \fBBN_R_BITS_TOO_SMALL\fP   118"
.br
.ti -1c
.RI "#define \fBBN_R_CALLED_WITH_EVEN_MODULUS\fP   102"
.br
.ti -1c
.RI "#define \fBBN_R_DIV_BY_ZERO\fP   103"
.br
.ti -1c
.RI "#define \fBBN_R_ENCODING_ERROR\fP   104"
.br
.ti -1c
.RI "#define \fBBN_R_EXPAND_ON_STATIC_BIGNUM_DATA\fP   105"
.br
.ti -1c
.RI "#define \fBBN_R_INPUT_NOT_REDUCED\fP   110"
.br
.ti -1c
.RI "#define \fBBN_R_INVALID_LENGTH\fP   106"
.br
.ti -1c
.RI "#define \fBBN_R_INVALID_RANGE\fP   115"
.br
.ti -1c
.RI "#define \fBBN_R_INVALID_SHIFT\fP   119"
.br
.ti -1c
.RI "#define \fBBN_R_NOT_A_SQUARE\fP   111"
.br
.ti -1c
.RI "#define \fBBN_R_NOT_INITIALIZED\fP   107"
.br
.ti -1c
.RI "#define \fBBN_R_NO_INVERSE\fP   108"
.br
.ti -1c
.RI "#define \fBBN_R_NO_SOLUTION\fP   116"
.br
.ti -1c
.RI "#define \fBBN_R_P_IS_NOT_PRIME\fP   112"
.br
.ti -1c
.RI "#define \fBBN_R_TOO_MANY_ITERATIONS\fP   113"
.br
.ti -1c
.RI "#define \fBBN_R_TOO_MANY_TEMPORARY_VARIABLES\fP   109"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBBN_GENCB_call\fP (\fBBN_GENCB\fP *\fBcb\fP, int \fBa\fP, int b)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBBN_value_one\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "char * \fBBN_options\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBBN_CTX\fP * \fBBN_CTX_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_CTX_init\fP (\fBBN_CTX\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_CTX_free\fP (\fBBN_CTX\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_CTX_start\fP (\fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_CTX_get\fP (\fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_CTX_end\fP (\fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_rand\fP (\fBBIGNUM\fP *rnd, int \fBbits\fP, int top, int bottom)"
.br
.ti -1c
.RI "int \fBBN_pseudo_rand\fP (\fBBIGNUM\fP *rnd, int \fBbits\fP, int top, int bottom)"
.br
.ti -1c
.RI "int \fBBN_rand_range\fP (\fBBIGNUM\fP *rnd, const \fBBIGNUM\fP *range)"
.br
.ti -1c
.RI "int \fBBN_pseudo_rand_range\fP (\fBBIGNUM\fP *rnd, const \fBBIGNUM\fP *range)"
.br
.ti -1c
.RI "int \fBBN_num_bits\fP (const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_num_bits_word\fP (BN_ULONG)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_init\fP (\fBBIGNUM\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_clear_free\fP (\fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_copy\fP (\fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_swap\fP (\fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_bin2bn\fP (const unsigned char *s, int \fBlen\fP, \fBBIGNUM\fP *ret)"
.br
.ti -1c
.RI "int \fBBN_bn2bin\fP (const \fBBIGNUM\fP *\fBa\fP, unsigned char *to)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_mpi2bn\fP (const unsigned char *s, int \fBlen\fP, \fBBIGNUM\fP *ret)"
.br
.ti -1c
.RI "int \fBBN_bn2mpi\fP (const \fBBIGNUM\fP *\fBa\fP, unsigned char *to)"
.br
.ti -1c
.RI "int \fBBN_sub\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "int \fBBN_usub\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "int \fBBN_uadd\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "int \fBBN_add\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "int \fBBN_mul\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_sqr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_set_negative\fP (\fBBIGNUM\fP *b, int n)"
.br
.ti -1c
.RI "int \fBBN_div\fP (\fBBIGNUM\fP *dv, \fBBIGNUM\fP *rem, const \fBBIGNUM\fP *m, const \fBBIGNUM\fP *d, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_nnmod\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *m, const \fBBIGNUM\fP *d, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_add\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_add_quick\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *m)"
.br
.ti -1c
.RI "int \fBBN_mod_sub\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_sub_quick\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *m)"
.br
.ti -1c
.RI "int \fBBN_mod_mul\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_sqr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_lshift1\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_lshift1_quick\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *m)"
.br
.ti -1c
.RI "int \fBBN_mod_lshift\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, int n, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_lshift_quick\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, int n, const \fBBIGNUM\fP *m)"
.br
.ti -1c
.RI "BN_ULONG \fBBN_mod_word\fP (const \fBBIGNUM\fP *\fBa\fP, BN_ULONG w)"
.br
.ti -1c
.RI "BN_ULONG \fBBN_div_word\fP (\fBBIGNUM\fP *\fBa\fP, BN_ULONG w)"
.br
.ti -1c
.RI "int \fBBN_mul_word\fP (\fBBIGNUM\fP *\fBa\fP, BN_ULONG w)"
.br
.ti -1c
.RI "int \fBBN_add_word\fP (\fBBIGNUM\fP *\fBa\fP, BN_ULONG w)"
.br
.ti -1c
.RI "int \fBBN_sub_word\fP (\fBBIGNUM\fP *\fBa\fP, BN_ULONG w)"
.br
.ti -1c
.RI "int \fBBN_set_word\fP (\fBBIGNUM\fP *\fBa\fP, BN_ULONG w)"
.br
.ti -1c
.RI "BN_ULONG \fBBN_get_word\fP (const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_cmp\fP (const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_free\fP (\fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_is_bit_set\fP (const \fBBIGNUM\fP *\fBa\fP, int n)"
.br
.ti -1c
.RI "int \fBBN_lshift\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, int n)"
.br
.ti -1c
.RI "int \fBBN_lshift1\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_exp\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_exp\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_exp_mont\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx, \fBBN_MONT_CTX\fP *m_ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_exp_mont_consttime\fP (\fBBIGNUM\fP *rr, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx, \fBBN_MONT_CTX\fP *in_mont)"
.br
.ti -1c
.RI "int \fBBN_mod_exp_mont_word\fP (\fBBIGNUM\fP *r, BN_ULONG \fBa\fP, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx, \fBBN_MONT_CTX\fP *m_ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_exp2_mont\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *a1, const \fBBIGNUM\fP *p1, const \fBBIGNUM\fP *a2, const \fBBIGNUM\fP *p2, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx, \fBBN_MONT_CTX\fP *m_ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_exp_simple\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mask_bits\fP (\fBBIGNUM\fP *\fBa\fP, int n)"
.br
.ti -1c
.RI "int \fBBN_print_fp\fP (FILE *\fBfp\fP, const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_print\fP (\fBvoid\fP *\fBfp\fP, const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_reciprocal\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *m, int \fBlen\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_rshift\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, int n)"
.br
.ti -1c
.RI "int \fBBN_rshift1\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_clear\fP (\fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_dup\fP (const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_ucmp\fP (const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "int \fBBN_set_bit\fP (\fBBIGNUM\fP *\fBa\fP, int n)"
.br
.ti -1c
.RI "int \fBBN_clear_bit\fP (\fBBIGNUM\fP *\fBa\fP, int n)"
.br
.ti -1c
.RI "char * \fBBN_bn2hex\fP (const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "char * \fBBN_bn2dec\fP (const \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_hex2bn\fP (\fBBIGNUM\fP **\fBa\fP, const char *str)"
.br
.ti -1c
.RI "int \fBBN_dec2bn\fP (\fBBIGNUM\fP **\fBa\fP, const char *str)"
.br
.ti -1c
.RI "int \fBBN_asc2bn\fP (\fBBIGNUM\fP **\fBa\fP, const char *str)"
.br
.ti -1c
.RI "int \fBBN_gcd\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_kronecker\fP (const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_mod_inverse\fP (\fBBIGNUM\fP *ret, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *n, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_mod_sqrt\fP (\fBBIGNUM\fP *ret, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *n, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_consttime_swap\fP (BN_ULONG swap, \fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *b, int nwords)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBBN_generate_prime\fP (\fBBIGNUM\fP *ret, int \fBbits\fP, int safe, const \fBBIGNUM\fP *add, const \fBBIGNUM\fP *rem, \fBvoid\fP(*callback)(int, int, \fBvoid\fP *), \fBvoid\fP *cb_arg)"
.br
.ti -1c
.RI "int \fBBN_is_prime\fP (const \fBBIGNUM\fP *\fBp\fP, int nchecks, \fBvoid\fP(*callback)(int, int, \fBvoid\fP *), \fBBN_CTX\fP *ctx, \fBvoid\fP *cb_arg)"
.br
.ti -1c
.RI "int \fBBN_is_prime_fasttest\fP (const \fBBIGNUM\fP *\fBp\fP, int nchecks, \fBvoid\fP(*callback)(int, int, \fBvoid\fP *), \fBBN_CTX\fP *ctx, \fBvoid\fP *cb_arg, int do_trial_division)"
.br
.ti -1c
.RI "int \fBBN_generate_prime_ex\fP (\fBBIGNUM\fP *ret, int \fBbits\fP, int safe, const \fBBIGNUM\fP *add, const \fBBIGNUM\fP *rem, \fBBN_GENCB\fP *\fBcb\fP)"
.br
.ti -1c
.RI "int \fBBN_is_prime_ex\fP (const \fBBIGNUM\fP *\fBp\fP, int nchecks, \fBBN_CTX\fP *ctx, \fBBN_GENCB\fP *\fBcb\fP)"
.br
.ti -1c
.RI "int \fBBN_is_prime_fasttest_ex\fP (const \fBBIGNUM\fP *\fBp\fP, int nchecks, \fBBN_CTX\fP *ctx, int do_trial_division, \fBBN_GENCB\fP *\fBcb\fP)"
.br
.ti -1c
.RI "int \fBBN_X931_generate_Xpq\fP (\fBBIGNUM\fP *Xp, \fBBIGNUM\fP *Xq, int nbits, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_X931_derive_prime_ex\fP (\fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *p1, \fBBIGNUM\fP *p2, const \fBBIGNUM\fP *Xp, const \fBBIGNUM\fP *Xp1, const \fBBIGNUM\fP *Xp2, const \fBBIGNUM\fP *\fBe\fP, \fBBN_CTX\fP *ctx, \fBBN_GENCB\fP *\fBcb\fP)"
.br
.ti -1c
.RI "int \fBBN_X931_generate_prime_ex\fP (\fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *p1, \fBBIGNUM\fP *p2, \fBBIGNUM\fP *Xp1, \fBBIGNUM\fP *Xp2, const \fBBIGNUM\fP *Xp, const \fBBIGNUM\fP *\fBe\fP, \fBBN_CTX\fP *ctx, \fBBN_GENCB\fP *\fBcb\fP)"
.br
.ti -1c
.RI "\fBBN_MONT_CTX\fP * \fBBN_MONT_CTX_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_MONT_CTX_init\fP (\fBBN_MONT_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_mul_montgomery\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, \fBBN_MONT_CTX\fP *mont, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_from_montgomery\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_MONT_CTX\fP *mont, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_MONT_CTX_free\fP (\fBBN_MONT_CTX\fP *mont)"
.br
.ti -1c
.RI "int \fBBN_MONT_CTX_set\fP (\fBBN_MONT_CTX\fP *mont, const \fBBIGNUM\fP *mod, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBBN_MONT_CTX\fP * \fBBN_MONT_CTX_copy\fP (\fBBN_MONT_CTX\fP *to, \fBBN_MONT_CTX\fP *from)"
.br
.ti -1c
.RI "\fBBN_MONT_CTX\fP * \fBBN_MONT_CTX_set_locked\fP (\fBBN_MONT_CTX\fP **pmont, int lock, const \fBBIGNUM\fP *mod, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBBN_BLINDING\fP * \fBBN_BLINDING_new\fP (const \fBBIGNUM\fP *A, const \fBBIGNUM\fP *Ai, \fBBIGNUM\fP *mod)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_BLINDING_free\fP (\fBBN_BLINDING\fP *b)"
.br
.ti -1c
.RI "int \fBBN_BLINDING_update\fP (\fBBN_BLINDING\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_BLINDING_convert\fP (\fBBIGNUM\fP *n, \fBBN_BLINDING\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_BLINDING_invert\fP (\fBBIGNUM\fP *n, \fBBN_BLINDING\fP *b, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_BLINDING_convert_ex\fP (\fBBIGNUM\fP *n, \fBBIGNUM\fP *r, \fBBN_BLINDING\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int \fBBN_BLINDING_invert_ex\fP (\fBBIGNUM\fP *n, const \fBBIGNUM\fP *r, \fBBN_BLINDING\fP *b, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "unsigned long \fBBN_BLINDING_get_thread_id\fP (const \fBBN_BLINDING\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_BLINDING_set_thread_id\fP (\fBBN_BLINDING\fP *, unsigned long)"
.br
.ti -1c
.RI "\fBCRYPTO_THREADID\fP * \fBBN_BLINDING_thread_id\fP (\fBBN_BLINDING\fP *)"
.br
.ti -1c
.RI "unsigned long \fBBN_BLINDING_get_flags\fP (const \fBBN_BLINDING\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_BLINDING_set_flags\fP (\fBBN_BLINDING\fP *, unsigned long)"
.br
.ti -1c
.RI "\fBBN_BLINDING\fP * \fBBN_BLINDING_create_param\fP (\fBBN_BLINDING\fP *b, const \fBBIGNUM\fP *\fBe\fP, \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx, int(*bn_mod_exp)(\fBBIGNUM\fP *r,                                                                                                                                                                                                                           const \fBBIGNUM\fP *\fBa\fP,                                                                                                                                                                                                                           const \fBBIGNUM\fP *\fBp\fP,                                                                                                                                                                                                                           const \fBBIGNUM\fP *m,                                                                                                                                                                                                                           \fBBN_CTX\fP *ctx,                                                                                                                                                                                                                           \fBBN_MONT_CTX\fP *m_ctx), \fBBN_MONT_CTX\fP *m_ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_set_params\fP (int \fBmul\fP, int high, int low, int mont)"
.br
.ti -1c
.RI "int \fBBN_get_params\fP (int which)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_RECP_CTX_init\fP (\fBBN_RECP_CTX\fP *recp)"
.br
.ti -1c
.RI "\fBBN_RECP_CTX\fP * \fBBN_RECP_CTX_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBN_RECP_CTX_free\fP (\fBBN_RECP_CTX\fP *recp)"
.br
.ti -1c
.RI "int \fBBN_RECP_CTX_set\fP (\fBBN_RECP_CTX\fP *recp, const \fBBIGNUM\fP *rdiv, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_mul_reciprocal\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, \fBBN_RECP_CTX\fP *recp, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_mod_exp_recp\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *m, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_div_recp\fP (\fBBIGNUM\fP *dv, \fBBIGNUM\fP *rem, const \fBBIGNUM\fP *m, \fBBN_RECP_CTX\fP *recp, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_add\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_mul\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_sqr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_inv\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_div\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_exp\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_sqrt\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_solve_quad\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const int \fBp\fP[])"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_mul_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const int \fBp\fP[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_sqr_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const int \fBp\fP[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_inv_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *b, const int \fBp\fP[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_div_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const int \fBp\fP[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_exp_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *b, const int \fBp\fP[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_sqrt_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const int \fBp\fP[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_mod_solve_quad_arr\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const int \fBp\fP[], \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_GF2m_poly2arr\fP (const \fBBIGNUM\fP *\fBa\fP, int \fBp\fP[], int max)"
.br
.ti -1c
.RI "int \fBBN_GF2m_arr2poly\fP (const int \fBp\fP[], \fBBIGNUM\fP *\fBa\fP)"
.br
.ti -1c
.RI "int \fBBN_nist_mod_192\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_nist_mod_224\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_nist_mod_256\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_nist_mod_384\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBBN_nist_mod_521\fP (\fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBp\fP, \fBBN_CTX\fP *ctx)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBBN_get0_nist_prime_192\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBBN_get0_nist_prime_224\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBBN_get0_nist_prime_256\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBBN_get0_nist_prime_384\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBBIGNUM\fP * \fBBN_get0_nist_prime_521\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBbn_expand2\fP (\fBBIGNUM\fP *\fBa\fP, int words)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBbn_dup_expand\fP (const \fBBIGNUM\fP *\fBa\fP, int words)"
.br
.ti -1c
.RI "BN_ULONG \fBbn_mul_add_words\fP (BN_ULONG *rp, const BN_ULONG *ap, int \fBnum\fP, BN_ULONG w)"
.br
.ti -1c
.RI "BN_ULONG \fBbn_mul_words\fP (BN_ULONG *rp, const BN_ULONG *ap, int \fBnum\fP, BN_ULONG w)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_sqr_words\fP (BN_ULONG *rp, const BN_ULONG *ap, int \fBnum\fP)"
.br
.ti -1c
.RI "BN_ULONG \fBbn_div_words\fP (BN_ULONG h, BN_ULONG l, BN_ULONG d)"
.br
.ti -1c
.RI "BN_ULONG \fBbn_add_words\fP (BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *\fBbp\fP, int \fBnum\fP)"
.br
.ti -1c
.RI "BN_ULONG \fBbn_sub_words\fP (BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *\fBbp\fP, int \fBnum\fP)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc2409_prime_768\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc2409_prime_1024\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc3526_prime_1536\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc3526_prime_2048\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc3526_prime_3072\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc3526_prime_4096\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc3526_prime_6144\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "\fBBIGNUM\fP * \fBget_rfc3526_prime_8192\fP (\fBBIGNUM\fP *bn)"
.br
.ti -1c
.RI "int \fBBN_bntest_rand\fP (\fBBIGNUM\fP *rnd, int \fBbits\fP, int top, int bottom)"
.br
.ti -1c
.RI "\fBvoid\fP \fBERR_load_BN_strings\fP (\fBvoid\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BN_MUL_COMBA"

.PP
Definition at line 153 of file bn\&.h\&.
.SS "#define BN_SQR_COMBA"

.PP
Definition at line 154 of file bn\&.h\&.
.SS "#define BN_RECURSION"

.PP
Definition at line 155 of file bn\&.h\&.
.SS "#define BN_DEFAULT_BITS   1280"

.PP
Definition at line 260 of file bn\&.h\&.
.SS "#define BN_FLG_MALLOCED   0x01"

.PP
Definition at line 262 of file bn\&.h\&.
.SS "#define BN_FLG_STATIC_DATA   0x02"

.PP
Definition at line 263 of file bn\&.h\&.
.SS "#define BN_FLG_CONSTTIME   0x04"

.PP
Definition at line 271 of file bn\&.h\&.
.SS "#define BN_FLG_FREE   0x8000"

.PP
Definition at line 283 of file bn\&.h\&.
.SS "#define BN_set_flags(b, n)   ((b)\->\fBflags\fP|=(n))"

.PP
Definition at line 286 of file bn\&.h\&.
.SS "#define BN_get_flags(b, n)   ((b)\->\fBflags\fP&(n))"

.PP
Definition at line 287 of file bn\&.h\&.
.SS "#define BN_with_flags(dest, b, n)"
\fBValue:\fP
.PP
.nf
((dest)->d=(b)->d, \
                                  (dest)->top=(b)->top, \
                                  (dest)->dmax=(b)->dmax, \
                                  (dest)->neg=(b)->neg, \
                                  (dest)->flags=(((dest)->flags & BN_FLG_MALLOCED) \
                                                 |  ((b)->flags & ~BN_FLG_MALLOCED) \
                                                 |  BN_FLG_STATIC_DATA \
                                                 |  (n)))
.fi
.PP
Definition at line 293 of file bn\&.h\&.
.SS "#define BN_GENCB_set_old(gencb, callback, cb_arg)"
\fBValue:\fP
.PP
.nf
{ \
                BN_GENCB *tmp_gencb = (gencb); \
                tmp_gencb->ver = 1; \
                tmp_gencb->arg = (cb_arg); \
                tmp_gencb->cb\&.cb_1 = (callback); }
.fi
.PP
Definition at line 362 of file bn\&.h\&.
.SS "#define BN_GENCB_set(gencb, callback, cb_arg)"
\fBValue:\fP
.PP
.nf
{ \
                BN_GENCB *tmp_gencb = (gencb); \
                tmp_gencb->ver = 2; \
                tmp_gencb->arg = (cb_arg); \
                tmp_gencb->cb\&.cb_2 = (callback); }
.fi
.PP
Definition at line 368 of file bn\&.h\&.
.SS "#define BN_prime_checks"
\fBValue:\fP
.PP
.nf
0      /* default: select number of iterations based
                                 * on the size of the number */
.fi
.PP
Definition at line 374 of file bn\&.h\&.
.SS "#define BN_prime_checks_for_size(b)"
\fBValue:\fP
.PP
.nf
((b) >= 1300 ?  2 : \
                                (b) >=  850 ?  3 : \
                                (b) >=  650 ?  4 : \
                                (b) >=  550 ?  5 : \
                                (b) >=  450 ?  6 : \
                                (b) >=  400 ?  7 : \
                                (b) >=  350 ?  8 : \
                                (b) >=  300 ?  9 : \
                                (b) >=  250 ? 12 : \
                                (b) >=  200 ? 15 : \
                                (b) >=  150 ? 18 : \
                                /* b >= 100 */ 27)
.fi
.PP
Definition at line 385 of file bn\&.h\&.
.SS "#define BN_num_bytes(\fBa\fP)   ((\fBBN_num_bits\fP(\fBa\fP)+7)/8)"

.PP
Definition at line 398 of file bn\&.h\&.
.SS "#define BN_abs_is_word(\fBa\fP, w)"
\fBValue:\fP
.PP
.nf
((((a)->top == 1) && ((a)->d[0] == (BN_ULONG)(w))) || \
                                (((w) == 0) && ((a)->top == 0)))
.fi
.PP
Definition at line 401 of file bn\&.h\&.
.SS "#define BN_is_zero(\fBa\fP)   ((\fBa\fP)\->top == 0)"

.PP
Definition at line 403 of file bn\&.h\&.
.SS "#define BN_is_one(\fBa\fP)   (\fBBN_abs_is_word\fP((\fBa\fP),1) && !(\fBa\fP)\->neg)"

.PP
Definition at line 404 of file bn\&.h\&.
.SS "#define BN_is_word(\fBa\fP, w)   (\fBBN_abs_is_word\fP((\fBa\fP),(w)) && (!(w) || !(\fBa\fP)\->neg))"

.PP
Definition at line 405 of file bn\&.h\&.
.SS "#define BN_is_odd(\fBa\fP)   (((\fBa\fP)\->top > 0) && ((\fBa\fP)\->d[0] & 1))"

.PP
Definition at line 406 of file bn\&.h\&.
.SS "#define BN_one(\fBa\fP)   (\fBBN_set_word\fP((\fBa\fP),1))"

.PP
Definition at line 408 of file bn\&.h\&.
.SS "#define BN_zero_ex(\fBa\fP)"
\fBValue:\fP
.PP
.nf
do { \
                BIGNUM *_tmp_bn = (a); \
                _tmp_bn->top = 0; \
                _tmp_bn->neg = 0; \
        } while(0)
.fi
.PP
Definition at line 409 of file bn\&.h\&.
.SS "#define BN_zero(\fBa\fP)   (\fBBN_set_word\fP((\fBa\fP),0))"

.PP
Definition at line 418 of file bn\&.h\&.
.SS "#define BN_is_negative(\fBa\fP)   ((\fBa\fP)\->neg != 0)"
BN_is_negative returns 1 if the BIGNUM is negative 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP pointer to the BIGNUM object 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if a < 0 and 0 otherwise 
.RE
.PP

.PP
Definition at line 461 of file bn\&.h\&.
.SS "#define BN_mod(rem, m, d, ctx)   \fBBN_div\fP(NULL,(rem),(m),(d),(ctx))"

.PP
Definition at line 465 of file bn\&.h\&.
.SS "#define BN_to_montgomery(r, \fBa\fP, mont, ctx)"
\fBValue:\fP
.PP
.nf
BN_mod_mul_montgomery(\
        (r),(a),&((mont)->RR),(mont),(ctx))
.fi
.PP
Definition at line 581 of file bn\&.h\&.
.SS "#define BN_BLINDING_NO_UPDATE   0x00000001"

.PP
Definition at line 592 of file bn\&.h\&.
.SS "#define BN_BLINDING_NO_RECREATE   0x00000002"

.PP
Definition at line 593 of file bn\&.h\&.
.SS "#define BN_GF2m_sub(r, \fBa\fP, b)   \fBBN_GF2m_add\fP(r, \fBa\fP, b)"

.PP
Definition at line 649 of file bn\&.h\&.
.SS "#define BN_GF2m_cmp(\fBa\fP, b)   \fBBN_ucmp\fP((\fBa\fP), (b))"

.PP
Definition at line 673 of file bn\&.h\&.
.SS "#define bn_expand(\fBa\fP, \fBbits\fP)"
\fBValue:\fP
.PP
.nf
( \
        bits > (INT_MAX - BN_BITS2 + 1) ? \
            NULL \
        : \
            (((bits+BN_BITS2-1)/BN_BITS2) <= (a)->dmax) ? \
                (a) \
            : \
                bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2) \
    )
.fi
.PP
Definition at line 725 of file bn\&.h\&.
.SS "#define bn_wexpand(\fBa\fP, words)   (((words) <= (\fBa\fP)\->dmax)?(\fBa\fP):\fBbn_expand2\fP((\fBa\fP),(words)))"

.PP
Definition at line 736 of file bn\&.h\&.
.SS "#define bn_pollute(\fBa\fP)"

.PP
Definition at line 827 of file bn\&.h\&.
.SS "#define bn_check_top(\fBa\fP)"

.PP
Definition at line 828 of file bn\&.h\&.
.SS "#define bn_fix_top(\fBa\fP)   \fBbn_correct_top\fP(\fBa\fP)"

.PP
Definition at line 829 of file bn\&.h\&.
.SS "#define bn_check_size(bn, \fBbits\fP)"

.PP
Definition at line 830 of file bn\&.h\&.
.SS "#define bn_wcheck_size(bn, words)"

.PP
Definition at line 831 of file bn\&.h\&.
.SS "#define bn_correct_top(\fBa\fP)"
\fBValue:\fP
.PP
.nf
{ \
        BN_ULONG *ftl; \
        int tmp_top = (a)->top; \
        if (tmp_top > 0) \
                { \
                for (ftl= &((a)->d[tmp_top-1]); tmp_top > 0; tmp_top--) \
                        if (*(ftl--)) break; \
                (a)->top = tmp_top; \
                } \
        bn_pollute(a); \
        }
.fi
.PP
Definition at line 835 of file bn\&.h\&.
.SS "#define BN_F_BNRAND   127"

.PP
Definition at line 882 of file bn\&.h\&.
.SS "#define BN_F_BN_BLINDING_CONVERT_EX   100"

.PP
Definition at line 883 of file bn\&.h\&.
.SS "#define BN_F_BN_BLINDING_CREATE_PARAM   128"

.PP
Definition at line 884 of file bn\&.h\&.
.SS "#define BN_F_BN_BLINDING_INVERT_EX   101"

.PP
Definition at line 885 of file bn\&.h\&.
.SS "#define BN_F_BN_BLINDING_NEW   102"

.PP
Definition at line 886 of file bn\&.h\&.
.SS "#define BN_F_BN_BLINDING_UPDATE   103"

.PP
Definition at line 887 of file bn\&.h\&.
.SS "#define BN_F_BN_BN2DEC   104"

.PP
Definition at line 888 of file bn\&.h\&.
.SS "#define BN_F_BN_BN2HEX   105"

.PP
Definition at line 889 of file bn\&.h\&.
.SS "#define BN_F_BN_CTX_GET   116"

.PP
Definition at line 890 of file bn\&.h\&.
.SS "#define BN_F_BN_CTX_NEW   106"

.PP
Definition at line 891 of file bn\&.h\&.
.SS "#define BN_F_BN_CTX_START   129"

.PP
Definition at line 892 of file bn\&.h\&.
.SS "#define BN_F_BN_DIV   107"

.PP
Definition at line 893 of file bn\&.h\&.
.SS "#define BN_F_BN_DIV_NO_BRANCH   138"

.PP
Definition at line 894 of file bn\&.h\&.
.SS "#define BN_F_BN_DIV_RECP   130"

.PP
Definition at line 895 of file bn\&.h\&.
.SS "#define BN_F_BN_EXP   123"

.PP
Definition at line 896 of file bn\&.h\&.
.SS "#define BN_F_BN_EXPAND2   108"

.PP
Definition at line 897 of file bn\&.h\&.
.SS "#define BN_F_BN_EXPAND_INTERNAL   120"

.PP
Definition at line 898 of file bn\&.h\&.
.SS "#define BN_F_BN_GF2M_MOD   131"

.PP
Definition at line 899 of file bn\&.h\&.
.SS "#define BN_F_BN_GF2M_MOD_EXP   132"

.PP
Definition at line 900 of file bn\&.h\&.
.SS "#define BN_F_BN_GF2M_MOD_MUL   133"

.PP
Definition at line 901 of file bn\&.h\&.
.SS "#define BN_F_BN_GF2M_MOD_SOLVE_QUAD   134"

.PP
Definition at line 902 of file bn\&.h\&.
.SS "#define BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR   135"

.PP
Definition at line 903 of file bn\&.h\&.
.SS "#define BN_F_BN_GF2M_MOD_SQR   136"

.PP
Definition at line 904 of file bn\&.h\&.
.SS "#define BN_F_BN_GF2M_MOD_SQRT   137"

.PP
Definition at line 905 of file bn\&.h\&.
.SS "#define BN_F_BN_LSHIFT   145"

.PP
Definition at line 906 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_EXP2_MONT   118"

.PP
Definition at line 907 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_EXP_MONT   109"

.PP
Definition at line 908 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_EXP_MONT_CONSTTIME   124"

.PP
Definition at line 909 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_EXP_MONT_WORD   117"

.PP
Definition at line 910 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_EXP_RECP   125"

.PP
Definition at line 911 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_EXP_SIMPLE   126"

.PP
Definition at line 912 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_INVERSE   110"

.PP
Definition at line 913 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_INVERSE_NO_BRANCH   139"

.PP
Definition at line 914 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_LSHIFT_QUICK   119"

.PP
Definition at line 915 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_MUL_RECIPROCAL   111"

.PP
Definition at line 916 of file bn\&.h\&.
.SS "#define BN_F_BN_MOD_SQRT   121"

.PP
Definition at line 917 of file bn\&.h\&.
.SS "#define BN_F_BN_MPI2BN   112"

.PP
Definition at line 918 of file bn\&.h\&.
.SS "#define BN_F_BN_NEW   113"

.PP
Definition at line 919 of file bn\&.h\&.
.SS "#define BN_F_BN_RAND   114"

.PP
Definition at line 920 of file bn\&.h\&.
.SS "#define BN_F_BN_RAND_RANGE   122"

.PP
Definition at line 921 of file bn\&.h\&.
.SS "#define BN_F_BN_RSHIFT   146"

.PP
Definition at line 922 of file bn\&.h\&.
.SS "#define BN_F_BN_USUB   115"

.PP
Definition at line 923 of file bn\&.h\&.
.SS "#define BN_R_ARG2_LT_ARG3   100"

.PP
Definition at line 926 of file bn\&.h\&.
.SS "#define BN_R_BAD_RECIPROCAL   101"

.PP
Definition at line 927 of file bn\&.h\&.
.SS "#define BN_R_BIGNUM_TOO_LONG   114"

.PP
Definition at line 928 of file bn\&.h\&.
.SS "#define BN_R_BITS_TOO_SMALL   118"

.PP
Definition at line 929 of file bn\&.h\&.
.SS "#define BN_R_CALLED_WITH_EVEN_MODULUS   102"

.PP
Definition at line 930 of file bn\&.h\&.
.SS "#define BN_R_DIV_BY_ZERO   103"

.PP
Definition at line 931 of file bn\&.h\&.
.SS "#define BN_R_ENCODING_ERROR   104"

.PP
Definition at line 932 of file bn\&.h\&.
.SS "#define BN_R_EXPAND_ON_STATIC_BIGNUM_DATA   105"

.PP
Definition at line 933 of file bn\&.h\&.
.SS "#define BN_R_INPUT_NOT_REDUCED   110"

.PP
Definition at line 934 of file bn\&.h\&.
.SS "#define BN_R_INVALID_LENGTH   106"

.PP
Definition at line 935 of file bn\&.h\&.
.SS "#define BN_R_INVALID_RANGE   115"

.PP
Definition at line 936 of file bn\&.h\&.
.SS "#define BN_R_INVALID_SHIFT   119"

.PP
Definition at line 937 of file bn\&.h\&.
.SS "#define BN_R_NOT_A_SQUARE   111"

.PP
Definition at line 938 of file bn\&.h\&.
.SS "#define BN_R_NOT_INITIALIZED   107"

.PP
Definition at line 939 of file bn\&.h\&.
.SS "#define BN_R_NO_INVERSE   108"

.PP
Definition at line 940 of file bn\&.h\&.
.SS "#define BN_R_NO_SOLUTION   116"

.PP
Definition at line 941 of file bn\&.h\&.
.SS "#define BN_R_P_IS_NOT_PRIME   112"

.PP
Definition at line 942 of file bn\&.h\&.
.SS "#define BN_R_TOO_MANY_ITERATIONS   113"

.PP
Definition at line 943 of file bn\&.h\&.
.SS "#define BN_R_TOO_MANY_TEMPORARY_VARIABLES   109"

.PP
Definition at line 944 of file bn\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int BN_GENCB_call (\fBBN_GENCB\fP * cb, int a, int b)"

.SS "const \fBBIGNUM\fP* BN_value_one (\fBvoid\fP)"

.SS "char* BN_options (\fBvoid\fP)"

.SS "\fBBN_CTX\fP* BN_CTX_new (\fBvoid\fP)"

.SS "\fBvoid\fP BN_CTX_init (\fBBN_CTX\fP * c)"

.SS "\fBvoid\fP BN_CTX_free (\fBBN_CTX\fP * c)"

.SS "\fBvoid\fP BN_CTX_start (\fBBN_CTX\fP * ctx)"

.SS "\fBBIGNUM\fP* BN_CTX_get (\fBBN_CTX\fP * ctx)"

.SS "\fBvoid\fP BN_CTX_end (\fBBN_CTX\fP * ctx)"

.SS "int BN_rand (\fBBIGNUM\fP * rnd, int bits, int top, int bottom)"

.SS "int BN_pseudo_rand (\fBBIGNUM\fP * rnd, int bits, int top, int bottom)"

.SS "int BN_rand_range (\fBBIGNUM\fP * rnd, const \fBBIGNUM\fP * range)"

.SS "int BN_pseudo_rand_range (\fBBIGNUM\fP * rnd, const \fBBIGNUM\fP * range)"

.SS "int BN_num_bits (const \fBBIGNUM\fP * a)"

.SS "int BN_num_bits_word (BN_ULONG)"

.SS "\fBBIGNUM\fP* BN_new (\fBvoid\fP)"

.SS "\fBvoid\fP BN_init (\fBBIGNUM\fP *)"

.SS "\fBvoid\fP BN_clear_free (\fBBIGNUM\fP * a)"

.SS "\fBBIGNUM\fP* BN_copy (\fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "\fBvoid\fP BN_swap (\fBBIGNUM\fP * a, \fBBIGNUM\fP * b)"

.SS "\fBBIGNUM\fP* BN_bin2bn (const unsigned char * s, int len, \fBBIGNUM\fP * ret)"

.SS "int BN_bn2bin (const \fBBIGNUM\fP * a, unsigned char * to)"

.SS "\fBBIGNUM\fP* BN_mpi2bn (const unsigned char * s, int len, \fBBIGNUM\fP * ret)"

.SS "int BN_bn2mpi (const \fBBIGNUM\fP * a, unsigned char * to)"

.SS "int BN_sub (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "int BN_usub (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "int BN_uadd (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "int BN_add (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "int BN_mul (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"

.SS "int BN_sqr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_CTX\fP * ctx)"

.SS "\fBvoid\fP BN_set_negative (\fBBIGNUM\fP * b, int n)"
BN_set_negative sets sign of a BIGNUM 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP pointer to the BIGNUM object 
.br
\fIn\fP 0 if the BIGNUM b should be positive and a value != 0 otherwise 
.RE
.PP

.SS "int BN_div (\fBBIGNUM\fP * dv, \fBBIGNUM\fP * rem, const \fBBIGNUM\fP * m, const \fBBIGNUM\fP * d, \fBBN_CTX\fP * ctx)"

.SS "int BN_nnmod (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * m, const \fBBIGNUM\fP * d, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_add (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_add_quick (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * m)"

.SS "int BN_mod_sub (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_sub_quick (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * m)"

.SS "int BN_mod_mul (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_sqr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_lshift1 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_lshift1_quick (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * m)"

.SS "int BN_mod_lshift (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, int n, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_lshift_quick (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, int n, const \fBBIGNUM\fP * m)"

.SS "BN_ULONG BN_mod_word (const \fBBIGNUM\fP * a, BN_ULONG w)"

.SS "BN_ULONG BN_div_word (\fBBIGNUM\fP * a, BN_ULONG w)"

.SS "int BN_mul_word (\fBBIGNUM\fP * a, BN_ULONG w)"

.SS "int BN_add_word (\fBBIGNUM\fP * a, BN_ULONG w)"

.SS "int BN_sub_word (\fBBIGNUM\fP * a, BN_ULONG w)"

.SS "int BN_set_word (\fBBIGNUM\fP * a, BN_ULONG w)"

.SS "BN_ULONG BN_get_word (const \fBBIGNUM\fP * a)"

.SS "int BN_cmp (const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "\fBvoid\fP BN_free (\fBBIGNUM\fP * a)"

.SS "int BN_is_bit_set (const \fBBIGNUM\fP * a, int n)"

.SS "int BN_lshift (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, int n)"

.SS "int BN_lshift1 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a)"

.SS "int BN_exp (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_exp (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_exp_mont (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx, \fBBN_MONT_CTX\fP * m_ctx)"

.SS "int BN_mod_exp_mont_consttime (\fBBIGNUM\fP * rr, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx, \fBBN_MONT_CTX\fP * in_mont)"

.SS "int BN_mod_exp_mont_word (\fBBIGNUM\fP * r, BN_ULONG a, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx, \fBBN_MONT_CTX\fP * m_ctx)"

.SS "int BN_mod_exp2_mont (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a1, const \fBBIGNUM\fP * p1, const \fBBIGNUM\fP * a2, const \fBBIGNUM\fP * p2, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx, \fBBN_MONT_CTX\fP * m_ctx)"

.SS "int BN_mod_exp_simple (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_mask_bits (\fBBIGNUM\fP * a, int n)"

.SS "int BN_print_fp (FILE * fp, const \fBBIGNUM\fP * a)"

.SS "int BN_print (\fBvoid\fP * fp, const \fBBIGNUM\fP * a)"

.SS "int BN_reciprocal (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * m, int len, \fBBN_CTX\fP * ctx)"

.SS "int BN_rshift (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, int n)"

.SS "int BN_rshift1 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a)"

.SS "\fBvoid\fP BN_clear (\fBBIGNUM\fP * a)"

.SS "\fBBIGNUM\fP* BN_dup (const \fBBIGNUM\fP * a)"

.SS "int BN_ucmp (const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "int BN_set_bit (\fBBIGNUM\fP * a, int n)"

.SS "int BN_clear_bit (\fBBIGNUM\fP * a, int n)"

.SS "char* BN_bn2hex (const \fBBIGNUM\fP * a)"

.SS "char* BN_bn2dec (const \fBBIGNUM\fP * a)"

.SS "int BN_hex2bn (\fBBIGNUM\fP ** a, const char * str)"

.SS "int BN_dec2bn (\fBBIGNUM\fP ** a, const char * str)"

.SS "int BN_asc2bn (\fBBIGNUM\fP ** a, const char * str)"

.SS "int BN_gcd (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"

.SS "int BN_kronecker (const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_CTX\fP * ctx)"

.SS "\fBBIGNUM\fP* BN_mod_inverse (\fBBIGNUM\fP * ret, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * n, \fBBN_CTX\fP * ctx)"

.SS "\fBBIGNUM\fP* BN_mod_sqrt (\fBBIGNUM\fP * ret, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * n, \fBBN_CTX\fP * ctx)"

.SS "\fBvoid\fP BN_consttime_swap (BN_ULONG swap, \fBBIGNUM\fP * a, \fBBIGNUM\fP * b, int nwords)"

.SS "\fBBIGNUM\fP* BN_generate_prime (\fBBIGNUM\fP * ret, int bits, int safe, const \fBBIGNUM\fP * add, const \fBBIGNUM\fP * rem, \fBvoid\fP(*)(int, int, \fBvoid\fP *) callback, \fBvoid\fP * cb_arg)"

.SS "int BN_is_prime (const \fBBIGNUM\fP * p, int nchecks, \fBvoid\fP(*)(int, int, \fBvoid\fP *) callback, \fBBN_CTX\fP * ctx, \fBvoid\fP * cb_arg)"

.SS "int BN_is_prime_fasttest (const \fBBIGNUM\fP * p, int nchecks, \fBvoid\fP(*)(int, int, \fBvoid\fP *) callback, \fBBN_CTX\fP * ctx, \fBvoid\fP * cb_arg, int do_trial_division)"

.SS "int BN_generate_prime_ex (\fBBIGNUM\fP * ret, int bits, int safe, const \fBBIGNUM\fP * add, const \fBBIGNUM\fP * rem, \fBBN_GENCB\fP * cb)"

.SS "int BN_is_prime_ex (const \fBBIGNUM\fP * p, int nchecks, \fBBN_CTX\fP * ctx, \fBBN_GENCB\fP * cb)"

.SS "int BN_is_prime_fasttest_ex (const \fBBIGNUM\fP * p, int nchecks, \fBBN_CTX\fP * ctx, int do_trial_division, \fBBN_GENCB\fP * cb)"

.SS "int BN_X931_generate_Xpq (\fBBIGNUM\fP * Xp, \fBBIGNUM\fP * Xq, int nbits, \fBBN_CTX\fP * ctx)"

.SS "int BN_X931_derive_prime_ex (\fBBIGNUM\fP * p, \fBBIGNUM\fP * p1, \fBBIGNUM\fP * p2, const \fBBIGNUM\fP * Xp, const \fBBIGNUM\fP * Xp1, const \fBBIGNUM\fP * Xp2, const \fBBIGNUM\fP * e, \fBBN_CTX\fP * ctx, \fBBN_GENCB\fP * cb)"

.SS "int BN_X931_generate_prime_ex (\fBBIGNUM\fP * p, \fBBIGNUM\fP * p1, \fBBIGNUM\fP * p2, \fBBIGNUM\fP * Xp1, \fBBIGNUM\fP * Xp2, const \fBBIGNUM\fP * Xp, const \fBBIGNUM\fP * e, \fBBN_CTX\fP * ctx, \fBBN_GENCB\fP * cb)"

.SS "\fBBN_MONT_CTX\fP* BN_MONT_CTX_new (\fBvoid\fP)"

.SS "\fBvoid\fP BN_MONT_CTX_init (\fBBN_MONT_CTX\fP * ctx)"

.SS "int BN_mod_mul_montgomery (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, \fBBN_MONT_CTX\fP * mont, \fBBN_CTX\fP * ctx)"

.SS "int BN_from_montgomery (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, \fBBN_MONT_CTX\fP * mont, \fBBN_CTX\fP * ctx)"

.SS "\fBvoid\fP BN_MONT_CTX_free (\fBBN_MONT_CTX\fP * mont)"

.SS "int BN_MONT_CTX_set (\fBBN_MONT_CTX\fP * mont, const \fBBIGNUM\fP * mod, \fBBN_CTX\fP * ctx)"

.SS "\fBBN_MONT_CTX\fP* BN_MONT_CTX_copy (\fBBN_MONT_CTX\fP * to, \fBBN_MONT_CTX\fP * from)"

.SS "\fBBN_MONT_CTX\fP* BN_MONT_CTX_set_locked (\fBBN_MONT_CTX\fP ** pmont, int lock, const \fBBIGNUM\fP * mod, \fBBN_CTX\fP * ctx)"

.SS "\fBBN_BLINDING\fP* BN_BLINDING_new (const \fBBIGNUM\fP * A, const \fBBIGNUM\fP * Ai, \fBBIGNUM\fP * mod)"

.SS "\fBvoid\fP BN_BLINDING_free (\fBBN_BLINDING\fP * b)"

.SS "int BN_BLINDING_update (\fBBN_BLINDING\fP * b, \fBBN_CTX\fP * ctx)"

.SS "int BN_BLINDING_convert (\fBBIGNUM\fP * n, \fBBN_BLINDING\fP * b, \fBBN_CTX\fP * ctx)"

.SS "int BN_BLINDING_invert (\fBBIGNUM\fP * n, \fBBN_BLINDING\fP * b, \fBBN_CTX\fP * ctx)"

.SS "int BN_BLINDING_convert_ex (\fBBIGNUM\fP * n, \fBBIGNUM\fP * r, \fBBN_BLINDING\fP * b, \fBBN_CTX\fP *)"

.SS "int BN_BLINDING_invert_ex (\fBBIGNUM\fP * n, const \fBBIGNUM\fP * r, \fBBN_BLINDING\fP * b, \fBBN_CTX\fP *)"

.SS "unsigned long BN_BLINDING_get_thread_id (const \fBBN_BLINDING\fP *)"

.SS "\fBvoid\fP BN_BLINDING_set_thread_id (\fBBN_BLINDING\fP *, unsigned long)"

.SS "\fBCRYPTO_THREADID\fP* BN_BLINDING_thread_id (\fBBN_BLINDING\fP *)"

.SS "unsigned long BN_BLINDING_get_flags (const \fBBN_BLINDING\fP *)"

.SS "\fBvoid\fP BN_BLINDING_set_flags (\fBBN_BLINDING\fP *, unsigned long)"

.SS "\fBBN_BLINDING\fP* BN_BLINDING_create_param (\fBBN_BLINDING\fP * b, const \fBBIGNUM\fP * e, \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx, int(*)(\fBBIGNUM\fP *r,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   const \fBBIGNUM\fP *\fBa\fconst \fBBIGNUM\fP *\fBp\fconst \fBBIGNUM\fP *m,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \fBBN_CTX\fP *ctxfBBN_MONT_CTX\fP *m_ctx) bn_mod_exp, \fBBN_MONT_CTX\fP * m_ctx)"

.SS "\fBvoid\fP BN_set_params (int mul, int high, int low, int mont)"

.SS "int BN_get_params (int which)"

.SS "\fBvoid\fP BN_RECP_CTX_init (\fBBN_RECP_CTX\fP * recp)"

.SS "\fBBN_RECP_CTX\fP* BN_RECP_CTX_new (\fBvoid\fP)"

.SS "\fBvoid\fP BN_RECP_CTX_free (\fBBN_RECP_CTX\fP * recp)"

.SS "int BN_RECP_CTX_set (\fBBN_RECP_CTX\fP * recp, const \fBBIGNUM\fP * rdiv, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_mul_reciprocal (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * x, const \fBBIGNUM\fP * y, \fBBN_RECP_CTX\fP * recp, \fBBN_CTX\fP * ctx)"

.SS "int BN_mod_exp_recp (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, const \fBBIGNUM\fP * m, \fBBN_CTX\fP * ctx)"

.SS "int BN_div_recp (\fBBIGNUM\fP * dv, \fBBIGNUM\fP * rem, const \fBBIGNUM\fP * m, \fBBN_RECP_CTX\fP * recp, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_add (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b)"

.SS "int BN_GF2m_mod (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p)"

.SS "int BN_GF2m_mod_mul (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_sqr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_inv (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_div (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_exp (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_sqrt (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_solve_quad (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const int p[])"

.SS "int BN_GF2m_mod_mul_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const int p[], \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_sqr_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const int p[], \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_inv_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * b, const int p[], \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_div_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const int p[], \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_exp_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * b, const int p[], \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_sqrt_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const int p[], \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_mod_solve_quad_arr (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const int p[], \fBBN_CTX\fP * ctx)"

.SS "int BN_GF2m_poly2arr (const \fBBIGNUM\fP * a, int p[], int max)"

.SS "int BN_GF2m_arr2poly (const int p[], \fBBIGNUM\fP * a)"

.SS "int BN_nist_mod_192 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_nist_mod_224 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_nist_mod_256 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_nist_mod_384 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "int BN_nist_mod_521 (\fBBIGNUM\fP * r, const \fBBIGNUM\fP * a, const \fBBIGNUM\fP * p, \fBBN_CTX\fP * ctx)"

.SS "const \fBBIGNUM\fP* BN_get0_nist_prime_192 (\fBvoid\fP)"

.SS "const \fBBIGNUM\fP* BN_get0_nist_prime_224 (\fBvoid\fP)"

.SS "const \fBBIGNUM\fP* BN_get0_nist_prime_256 (\fBvoid\fP)"

.SS "const \fBBIGNUM\fP* BN_get0_nist_prime_384 (\fBvoid\fP)"

.SS "const \fBBIGNUM\fP* BN_get0_nist_prime_521 (\fBvoid\fP)"

.SS "\fBBIGNUM\fP* bn_expand2 (\fBBIGNUM\fP * a, int words)"

.SS "\fBBIGNUM\fP* bn_dup_expand (const \fBBIGNUM\fP * a, int words)"

.SS "BN_ULONG bn_mul_add_words (BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w)"

.SS "BN_ULONG bn_mul_words (BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w)"

.SS "\fBvoid\fP bn_sqr_words (BN_ULONG * rp, const BN_ULONG * ap, int num)"

.SS "BN_ULONG bn_div_words (BN_ULONG h, BN_ULONG l, BN_ULONG d)"

.SS "BN_ULONG bn_add_words (BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num)"

.SS "BN_ULONG bn_sub_words (BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num)"

.SS "\fBBIGNUM\fP* get_rfc2409_prime_768 (\fBBIGNUM\fP * bn)"

.SS "\fBBIGNUM\fP* get_rfc2409_prime_1024 (\fBBIGNUM\fP * bn)"

.SS "\fBBIGNUM\fP* get_rfc3526_prime_1536 (\fBBIGNUM\fP * bn)"

.SS "\fBBIGNUM\fP* get_rfc3526_prime_2048 (\fBBIGNUM\fP * bn)"

.SS "\fBBIGNUM\fP* get_rfc3526_prime_3072 (\fBBIGNUM\fP * bn)"

.SS "\fBBIGNUM\fP* get_rfc3526_prime_4096 (\fBBIGNUM\fP * bn)"

.SS "\fBBIGNUM\fP* get_rfc3526_prime_6144 (\fBBIGNUM\fP * bn)"

.SS "\fBBIGNUM\fP* get_rfc3526_prime_8192 (\fBBIGNUM\fP * bn)"

.SS "int BN_bntest_rand (\fBBIGNUM\fP * rnd, int bits, int top, int bottom)"

.SS "\fBvoid\fP ERR_load_BN_strings (\fBvoid\fP)"

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
