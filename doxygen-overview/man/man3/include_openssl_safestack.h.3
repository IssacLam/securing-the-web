.TH "safestack.h" 3 "Fri Aug 12 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
safestack.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/stack\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCHECKED_PTR_OF\fP(\fBtype\fP,  \fBp\fP)   ((\fBvoid\fP*) (1 ? \fBp\fP : (\fBtype\fP*)0))"
.br
.ti -1c
.RI "#define \fBCHECKED_STACK_OF\fP(\fBtype\fP,  \fBp\fP)   ((\fB_STACK\fP*) (1 ? \fBp\fP : (\fBSTACK_OF\fP(\fBtype\fP)*)0))"
.br
.ti -1c
.RI "#define \fBCHECKED_SK_COPY_FUNC\fP(\fBtype\fP,  \fBp\fP)   ((\fBvoid\fP *(*)(\fBvoid\fP *)) ((1 ? \fBp\fP : (\fBtype\fP *(*)(const \fBtype\fP *))0)))"
.br
.ti -1c
.RI "#define \fBCHECKED_SK_FREE_FUNC\fP(\fBtype\fP,  \fBp\fP)   ((\fBvoid\fP (*)(\fBvoid\fP *)) ((1 ? \fBp\fP : (\fBvoid\fP (*)(\fBtype\fP *))0)))"
.br
.ti -1c
.RI "#define \fBCHECKED_SK_CMP_FUNC\fP(\fBtype\fP,  \fBp\fP)"
.br
.ti -1c
.RI "#define \fBSTACK_OF\fP(\fBtype\fP)   struct stack_st_##\fBtype\fP"
.br
.ti -1c
.RI "#define \fBPREDECLARE_STACK_OF\fP(\fBtype\fP)   \fBSTACK_OF\fP(\fBtype\fP);"
.br
.ti -1c
.RI "#define \fBDECLARE_STACK_OF\fP(\fBtype\fP)"
.br
.ti -1c
.RI "#define \fBDECLARE_SPECIAL_STACK_OF\fP(\fBtype\fP,  type2)"
.br
.ti -1c
.RI "#define \fBIMPLEMENT_STACK_OF\fP(\fBtype\fP)"
.br
.ti -1c
.RI "#define \fBSKM_sk_new\fP(\fBtype\fP,  cmp)   ((\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(\fBtype\fP, cmp)))"
.br
.ti -1c
.RI "#define \fBSKM_sk_new_null\fP(\fBtype\fP)   ((\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_new_null\fP())"
.br
.ti -1c
.RI "#define \fBSKM_sk_free\fP(\fBtype\fP,  st)   \fBsk_free\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_sk_num\fP(\fBtype\fP,  st)   \fBsk_num\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_sk_value\fP(\fBtype\fP,  st,  i)   ((\fBtype\fP *)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), i))"
.br
.ti -1c
.RI "#define \fBSKM_sk_set\fP(\fBtype\fP,  st,  i,  val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), i, \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"
.br
.ti -1c
.RI "#define \fBSKM_sk_zero\fP(\fBtype\fP,  st)   \fBsk_zero\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_sk_push\fP(\fBtype\fP,  st,  val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"
.br
.ti -1c
.RI "#define \fBSKM_sk_unshift\fP(\fBtype\fP,  st,  val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"
.br
.ti -1c
.RI "#define \fBSKM_sk_find\fP(\fBtype\fP,  st,  val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"
.br
.ti -1c
.RI "#define \fBSKM_sk_find_ex\fP(\fBtype\fP,  st,  val)"
.br
.ti -1c
.RI "#define \fBSKM_sk_delete\fP(\fBtype\fP,  st,  i)   (\fBtype\fP *)\fBsk_delete\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), i)"
.br
.ti -1c
.RI "#define \fBSKM_sk_delete_ptr\fP(\fBtype\fP,  st,  ptr)   (\fBtype\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, ptr))"
.br
.ti -1c
.RI "#define \fBSKM_sk_insert\fP(\fBtype\fP,  st,  val,  i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val), i)"
.br
.ti -1c
.RI "#define \fBSKM_sk_set_cmp_func\fP(\fBtype\fP,  st,  cmp)"
.br
.ti -1c
.RI "#define \fBSKM_sk_dup\fP(\fBtype\fP,  st)   (\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_dup\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_sk_pop_free\fP(\fBtype\fP,  st,  \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(\fBtype\fP, \fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBSKM_sk_deep_copy\fP(\fBtype\fP,  st,  copy_func,  \fBfree_func\fP)   (\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(\fBtype\fP, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBtype\fP, \fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBSKM_sk_shift\fP(\fBtype\fP,  st)   (\fBtype\fP *)\fBsk_shift\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_sk_pop\fP(\fBtype\fP,  st)   (\fBtype\fP *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_sk_sort\fP(\fBtype\fP,  st)   \fBsk_sort\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_sk_is_sorted\fP(\fBtype\fP,  st)   \fBsk_is_sorted\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"
.br
.ti -1c
.RI "#define \fBSKM_ASN1_SET_OF_d2i\fP(\fBtype\fP,  st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)"
.br
.ti -1c
.RI "#define \fBSKM_ASN1_SET_OF_i2d\fP(\fBtype\fP,  st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)"
.br
.ti -1c
.RI "#define \fBSKM_ASN1_seq_pack\fP(\fBtype\fP,  st,  i2d_func,  buf,  \fBlen\fP)"
.br
.ti -1c
.RI "#define \fBSKM_ASN1_seq_unpack\fP(\fBtype\fP,  buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   (\fBSTACK_OF\fP(\fBtype\fP) *)ASN1_seq_unpack(buf, \fBlen\fP, \fBCHECKED_D2I_OF\fP(\fBtype\fP, d2i_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBtype\fP, \fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBSKM_PKCS12_decrypt_d2i\fP(\fBtype\fP,  algor,  d2i_func,  \fBfree_func\fP,  \fBpass\fP,  \fBpasslen\fP,  oct,  seq)"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_new\fP(cmp)   \fBSKM_sk_new\fP(\fBACCESS_DESCRIPTION\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_new_null\fP()   \fBSKM_sk_new_null\fP(\fBACCESS_DESCRIPTION\fP)"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_free\fP(st)   \fBSKM_sk_free\fP(\fBACCESS_DESCRIPTION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_num\fP(st)   \fBSKM_sk_num\fP(\fBACCESS_DESCRIPTION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBACCESS_DESCRIPTION\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBACCESS_DESCRIPTION\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_zero\fP(st)   \fBSKM_sk_zero\fP(\fBACCESS_DESCRIPTION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBACCESS_DESCRIPTION\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBACCESS_DESCRIPTION\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBACCESS_DESCRIPTION\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBACCESS_DESCRIPTION\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_dup\fP(st)   \fBSKM_sk_dup\fP(\fBACCESS_DESCRIPTION\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBACCESS_DESCRIPTION\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBACCESS_DESCRIPTION\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_shift\fP(st)   \fBSKM_sk_shift\fP(\fBACCESS_DESCRIPTION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_pop\fP(st)   \fBSKM_sk_pop\fP(\fBACCESS_DESCRIPTION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_sort\fP(st)   \fBSKM_sk_sort\fP(\fBACCESS_DESCRIPTION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ACCESS_DESCRIPTION_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBACCESS_DESCRIPTION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASIdOrRange\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASIdOrRange\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_free\fP(st)   \fBSKM_sk_free\fP(\fBASIdOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_num\fP(st)   \fBSKM_sk_num\fP(\fBASIdOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASIdOrRange\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASIdOrRange\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASIdOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASIdOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASIdOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASIdOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASIdOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASIdOrRange\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASIdOrRange\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASIdOrRange\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASIdOrRange\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASIdOrRange\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASIdOrRange\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASIdOrRange\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASIdOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASIdOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASIdOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASIdOrRange_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASIdOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASN1_GENERALSTRING\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASN1_GENERALSTRING\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_free\fP(st)   \fBSKM_sk_free\fP(\fBASN1_GENERALSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_num\fP(st)   \fBSKM_sk_num\fP(\fBASN1_GENERALSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASN1_GENERALSTRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASN1_GENERALSTRING\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASN1_GENERALSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASN1_GENERALSTRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_GENERALSTRING\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASN1_GENERALSTRING\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_GENERALSTRING\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASN1_GENERALSTRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_GENERALSTRING\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_GENERALSTRING\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASN1_GENERALSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASN1_GENERALSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASN1_GENERALSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_GENERALSTRING_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_GENERALSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASN1_INTEGER\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASN1_INTEGER\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_free\fP(st)   \fBSKM_sk_free\fP(\fBASN1_INTEGER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_num\fP(st)   \fBSKM_sk_num\fP(\fBASN1_INTEGER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASN1_INTEGER\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASN1_INTEGER\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASN1_INTEGER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASN1_INTEGER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASN1_INTEGER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASN1_INTEGER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASN1_INTEGER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASN1_INTEGER\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_INTEGER\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASN1_INTEGER\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_INTEGER\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASN1_INTEGER\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_INTEGER\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_INTEGER\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASN1_INTEGER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASN1_INTEGER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASN1_INTEGER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_INTEGER_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_INTEGER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASN1_OBJECT\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASN1_OBJECT\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_free\fP(st)   \fBSKM_sk_free\fP(\fBASN1_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_num\fP(st)   \fBSKM_sk_num\fP(\fBASN1_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASN1_OBJECT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASN1_OBJECT\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASN1_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASN1_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASN1_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASN1_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASN1_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASN1_OBJECT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_OBJECT\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASN1_OBJECT\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_OBJECT\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASN1_OBJECT\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_OBJECT\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_OBJECT\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASN1_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASN1_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASN1_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_OBJECT_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASN1_STRING_TABLE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASN1_STRING_TABLE\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_free\fP(st)   \fBSKM_sk_free\fP(\fBASN1_STRING_TABLE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_num\fP(st)   \fBSKM_sk_num\fP(\fBASN1_STRING_TABLE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASN1_STRING_TABLE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASN1_STRING_TABLE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASN1_STRING_TABLE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASN1_STRING_TABLE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_STRING_TABLE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASN1_STRING_TABLE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_STRING_TABLE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASN1_STRING_TABLE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_STRING_TABLE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_STRING_TABLE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASN1_STRING_TABLE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASN1_STRING_TABLE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASN1_STRING_TABLE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_STRING_TABLE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_STRING_TABLE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASN1_TYPE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASN1_TYPE\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_free\fP(st)   \fBSKM_sk_free\fP(\fBASN1_TYPE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_num\fP(st)   \fBSKM_sk_num\fP(\fBASN1_TYPE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASN1_TYPE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASN1_TYPE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASN1_TYPE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASN1_TYPE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASN1_TYPE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASN1_TYPE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASN1_TYPE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASN1_TYPE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_TYPE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASN1_TYPE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_TYPE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASN1_TYPE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_TYPE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_TYPE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASN1_TYPE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASN1_TYPE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASN1_TYPE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_TYPE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_TYPE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASN1_UTF8STRING\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASN1_UTF8STRING\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_free\fP(st)   \fBSKM_sk_free\fP(\fBASN1_UTF8STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_num\fP(st)   \fBSKM_sk_num\fP(\fBASN1_UTF8STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASN1_UTF8STRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASN1_UTF8STRING\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASN1_UTF8STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASN1_UTF8STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASN1_UTF8STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASN1_UTF8STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASN1_UTF8STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASN1_UTF8STRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_UTF8STRING\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASN1_UTF8STRING\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_UTF8STRING\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASN1_UTF8STRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_UTF8STRING\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_UTF8STRING\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASN1_UTF8STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASN1_UTF8STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASN1_UTF8STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_UTF8STRING_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_UTF8STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBASN1_VALUE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBASN1_VALUE\fP)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_free\fP(st)   \fBSKM_sk_free\fP(\fBASN1_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_num\fP(st)   \fBSKM_sk_num\fP(\fBASN1_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBASN1_VALUE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBASN1_VALUE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBASN1_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBASN1_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBASN1_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBASN1_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBASN1_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBASN1_VALUE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_VALUE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBASN1_VALUE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_VALUE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBASN1_VALUE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_VALUE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_VALUE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBASN1_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBASN1_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBASN1_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ASN1_VALUE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BIO_new\fP(cmp)   \fBSKM_sk_new\fP(\fBBIO\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_BIO_new_null\fP()   \fBSKM_sk_new_null\fP(\fBBIO\fP)"
.br
.ti -1c
.RI "#define \fBsk_BIO_free\fP(st)   \fBSKM_sk_free\fP(\fBBIO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BIO_num\fP(st)   \fBSKM_sk_num\fP(\fBBIO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BIO_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBBIO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_BIO_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBBIO\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_BIO_zero\fP(st)   \fBSKM_sk_zero\fP(\fBBIO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BIO_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBBIO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BIO_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBBIO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BIO_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBBIO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BIO_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBBIO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BIO_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBBIO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_BIO_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBBIO\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_BIO_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBBIO\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_BIO_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBBIO\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_BIO_dup\fP(st)   \fBSKM_sk_dup\fP(\fBBIO\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_BIO_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBBIO\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_BIO_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBBIO\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_BIO_shift\fP(st)   \fBSKM_sk_shift\fP(\fBBIO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BIO_pop\fP(st)   \fBSKM_sk_pop\fP(\fBBIO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BIO_sort\fP(st)   \fBSKM_sk_sort\fP(\fBBIO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BIO_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBBIO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_new\fP(cmp)   \fBSKM_sk_new\fP(BY_DIR_ENTRY, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_new_null\fP()   \fBSKM_sk_new_null\fP(BY_DIR_ENTRY)"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_free\fP(st)   \fBSKM_sk_free\fP(BY_DIR_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_num\fP(st)   \fBSKM_sk_num\fP(BY_DIR_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_value\fP(st,  i)   \fBSKM_sk_value\fP(BY_DIR_ENTRY, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(BY_DIR_ENTRY, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_zero\fP(st)   \fBSKM_sk_zero\fP(BY_DIR_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_push\fP(st,  val)   \fBSKM_sk_push\fP(BY_DIR_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(BY_DIR_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_find\fP(st,  val)   \fBSKM_sk_find\fP(BY_DIR_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(BY_DIR_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_delete\fP(st,  i)   \fBSKM_sk_delete\fP(BY_DIR_ENTRY, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(BY_DIR_ENTRY, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(BY_DIR_ENTRY, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(BY_DIR_ENTRY, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_dup\fP(st)   \fBSKM_sk_dup\fP(BY_DIR_ENTRY, st)"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(BY_DIR_ENTRY, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(BY_DIR_ENTRY, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_shift\fP(st)   \fBSKM_sk_shift\fP(BY_DIR_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_pop\fP(st)   \fBSKM_sk_pop\fP(BY_DIR_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_sort\fP(st)   \fBSKM_sk_sort\fP(BY_DIR_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_ENTRY_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(BY_DIR_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_new\fP(cmp)   \fBSKM_sk_new\fP(BY_DIR_HASH, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_new_null\fP()   \fBSKM_sk_new_null\fP(BY_DIR_HASH)"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_free\fP(st)   \fBSKM_sk_free\fP(BY_DIR_HASH, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_num\fP(st)   \fBSKM_sk_num\fP(BY_DIR_HASH, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_value\fP(st,  i)   \fBSKM_sk_value\fP(BY_DIR_HASH, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(BY_DIR_HASH, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_zero\fP(st)   \fBSKM_sk_zero\fP(BY_DIR_HASH, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_push\fP(st,  val)   \fBSKM_sk_push\fP(BY_DIR_HASH, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(BY_DIR_HASH, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_find\fP(st,  val)   \fBSKM_sk_find\fP(BY_DIR_HASH, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(BY_DIR_HASH, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_delete\fP(st,  i)   \fBSKM_sk_delete\fP(BY_DIR_HASH, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(BY_DIR_HASH, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(BY_DIR_HASH, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(BY_DIR_HASH, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_dup\fP(st)   \fBSKM_sk_dup\fP(BY_DIR_HASH, st)"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(BY_DIR_HASH, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(BY_DIR_HASH, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_shift\fP(st)   \fBSKM_sk_shift\fP(BY_DIR_HASH, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_pop\fP(st)   \fBSKM_sk_pop\fP(BY_DIR_HASH, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_sort\fP(st)   \fBSKM_sk_sort\fP(BY_DIR_HASH, (st))"
.br
.ti -1c
.RI "#define \fBsk_BY_DIR_HASH_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(BY_DIR_HASH, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCMS_CertificateChoices\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCMS_CertificateChoices\fP)"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_free\fP(st)   \fBSKM_sk_free\fP(\fBCMS_CertificateChoices\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_num\fP(st)   \fBSKM_sk_num\fP(\fBCMS_CertificateChoices\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCMS_CertificateChoices\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCMS_CertificateChoices\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCMS_CertificateChoices\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCMS_CertificateChoices\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCMS_CertificateChoices\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCMS_CertificateChoices\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCMS_CertificateChoices\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCMS_CertificateChoices\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_CertificateChoices\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCMS_CertificateChoices\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_CertificateChoices\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCMS_CertificateChoices\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_CertificateChoices\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_CertificateChoices\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCMS_CertificateChoices\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCMS_CertificateChoices\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCMS_CertificateChoices\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_CertificateChoices_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_CertificateChoices\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCMS_RecipientEncryptedKey\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCMS_RecipientEncryptedKey\fP)"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_free\fP(st)   \fBSKM_sk_free\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_num\fP(st)   \fBSKM_sk_num\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCMS_RecipientEncryptedKey\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientEncryptedKey_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCMS_RecipientInfo\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCMS_RecipientInfo\fP)"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_free\fP(st)   \fBSKM_sk_free\fP(\fBCMS_RecipientInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_num\fP(st)   \fBSKM_sk_num\fP(\fBCMS_RecipientInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCMS_RecipientInfo\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCMS_RecipientInfo\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCMS_RecipientInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCMS_RecipientInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCMS_RecipientInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCMS_RecipientInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCMS_RecipientInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCMS_RecipientInfo\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_RecipientInfo\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCMS_RecipientInfo\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_RecipientInfo\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCMS_RecipientInfo\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_RecipientInfo\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_RecipientInfo\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCMS_RecipientInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCMS_RecipientInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCMS_RecipientInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RecipientInfo_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_RecipientInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCMS_RevocationInfoChoice\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCMS_RevocationInfoChoice\fP)"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_free\fP(st)   \fBSKM_sk_free\fP(\fBCMS_RevocationInfoChoice\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_num\fP(st)   \fBSKM_sk_num\fP(\fBCMS_RevocationInfoChoice\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCMS_RevocationInfoChoice\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCMS_RevocationInfoChoice\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCMS_RevocationInfoChoice\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCMS_RevocationInfoChoice\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_RevocationInfoChoice\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_RevocationInfoChoice\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCMS_RevocationInfoChoice\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_RevocationInfoChoice\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_RevocationInfoChoice\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCMS_RevocationInfoChoice\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCMS_RevocationInfoChoice\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCMS_RevocationInfoChoice\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_RevocationInfoChoice_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_RevocationInfoChoice\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCMS_SignerInfo\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCMS_SignerInfo\fP)"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_free\fP(st)   \fBSKM_sk_free\fP(\fBCMS_SignerInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_num\fP(st)   \fBSKM_sk_num\fP(\fBCMS_SignerInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCMS_SignerInfo\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCMS_SignerInfo\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCMS_SignerInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCMS_SignerInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCMS_SignerInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCMS_SignerInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCMS_SignerInfo\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCMS_SignerInfo\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_SignerInfo\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCMS_SignerInfo\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_SignerInfo\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCMS_SignerInfo\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_SignerInfo\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_SignerInfo\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCMS_SignerInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCMS_SignerInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCMS_SignerInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CMS_SignerInfo_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_SignerInfo\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCONF_IMODULE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCONF_IMODULE\fP)"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_free\fP(st)   \fBSKM_sk_free\fP(\fBCONF_IMODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_num\fP(st)   \fBSKM_sk_num\fP(\fBCONF_IMODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCONF_IMODULE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCONF_IMODULE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCONF_IMODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCONF_IMODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCONF_IMODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCONF_IMODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCONF_IMODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCONF_IMODULE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCONF_IMODULE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCONF_IMODULE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCONF_IMODULE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCONF_IMODULE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCONF_IMODULE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCONF_IMODULE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCONF_IMODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCONF_IMODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCONF_IMODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_IMODULE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCONF_IMODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCONF_MODULE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCONF_MODULE\fP)"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_free\fP(st)   \fBSKM_sk_free\fP(\fBCONF_MODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_num\fP(st)   \fBSKM_sk_num\fP(\fBCONF_MODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCONF_MODULE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCONF_MODULE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCONF_MODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCONF_MODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCONF_MODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCONF_MODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCONF_MODULE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCONF_MODULE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCONF_MODULE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCONF_MODULE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCONF_MODULE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCONF_MODULE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCONF_MODULE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCONF_MODULE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCONF_MODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCONF_MODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCONF_MODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_MODULE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCONF_MODULE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCONF_VALUE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCONF_VALUE\fP)"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_free\fP(st)   \fBSKM_sk_free\fP(\fBCONF_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_num\fP(st)   \fBSKM_sk_num\fP(\fBCONF_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCONF_VALUE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCONF_VALUE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCONF_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCONF_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCONF_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCONF_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCONF_VALUE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCONF_VALUE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCONF_VALUE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCONF_VALUE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCONF_VALUE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCONF_VALUE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCONF_VALUE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCONF_VALUE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCONF_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCONF_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCONF_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CONF_VALUE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCONF_VALUE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCRYPTO_EX_DATA_FUNCS\fP)"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_free\fP(st)   \fBSKM_sk_free\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_num\fP(st)   \fBSKM_sk_num\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_EX_DATA_FUNCS_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_new\fP(cmp)   \fBSKM_sk_new\fP(\fBCRYPTO_dynlock\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_new_null\fP()   \fBSKM_sk_new_null\fP(\fBCRYPTO_dynlock\fP)"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_free\fP(st)   \fBSKM_sk_free\fP(\fBCRYPTO_dynlock\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_num\fP(st)   \fBSKM_sk_num\fP(\fBCRYPTO_dynlock\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBCRYPTO_dynlock\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBCRYPTO_dynlock\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_zero\fP(st)   \fBSKM_sk_zero\fP(\fBCRYPTO_dynlock\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBCRYPTO_dynlock\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBCRYPTO_dynlock\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBCRYPTO_dynlock\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBCRYPTO_dynlock\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBCRYPTO_dynlock\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBCRYPTO_dynlock\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBCRYPTO_dynlock\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCRYPTO_dynlock\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_dup\fP(st)   \fBSKM_sk_dup\fP(\fBCRYPTO_dynlock\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCRYPTO_dynlock\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCRYPTO_dynlock\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_shift\fP(st)   \fBSKM_sk_shift\fP(\fBCRYPTO_dynlock\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_pop\fP(st)   \fBSKM_sk_pop\fP(\fBCRYPTO_dynlock\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_sort\fP(st)   \fBSKM_sk_sort\fP(\fBCRYPTO_dynlock\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_CRYPTO_dynlock_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBCRYPTO_dynlock\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_new\fP(cmp)   \fBSKM_sk_new\fP(\fBDIST_POINT\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_new_null\fP()   \fBSKM_sk_new_null\fP(\fBDIST_POINT\fP)"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_free\fP(st)   \fBSKM_sk_free\fP(\fBDIST_POINT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_num\fP(st)   \fBSKM_sk_num\fP(\fBDIST_POINT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBDIST_POINT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBDIST_POINT\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_zero\fP(st)   \fBSKM_sk_zero\fP(\fBDIST_POINT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBDIST_POINT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBDIST_POINT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBDIST_POINT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBDIST_POINT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBDIST_POINT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBDIST_POINT\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBDIST_POINT\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBDIST_POINT\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_dup\fP(st)   \fBSKM_sk_dup\fP(\fBDIST_POINT\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBDIST_POINT\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBDIST_POINT\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_shift\fP(st)   \fBSKM_sk_shift\fP(\fBDIST_POINT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_pop\fP(st)   \fBSKM_sk_pop\fP(\fBDIST_POINT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_sort\fP(st)   \fBSKM_sk_sort\fP(\fBDIST_POINT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_DIST_POINT_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBDIST_POINT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBENGINE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBENGINE\fP)"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_free\fP(st)   \fBSKM_sk_free\fP(\fBENGINE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_num\fP(st)   \fBSKM_sk_num\fP(\fBENGINE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBENGINE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBENGINE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBENGINE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBENGINE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBENGINE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBENGINE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBENGINE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBENGINE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBENGINE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBENGINE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBENGINE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBENGINE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBENGINE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBENGINE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBENGINE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBENGINE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBENGINE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBENGINE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_new\fP(cmp)   \fBSKM_sk_new\fP(\fBENGINE_CLEANUP_ITEM\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_new_null\fP()   \fBSKM_sk_new_null\fP(\fBENGINE_CLEANUP_ITEM\fP)"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_free\fP(st)   \fBSKM_sk_free\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_num\fP(st)   \fBSKM_sk_num\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_zero\fP(st)   \fBSKM_sk_zero\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_dup\fP(st)   \fBSKM_sk_dup\fP(\fBENGINE_CLEANUP_ITEM\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_shift\fP(st)   \fBSKM_sk_shift\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_pop\fP(st)   \fBSKM_sk_pop\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_sort\fP(st)   \fBSKM_sk_sort\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ENGINE_CLEANUP_ITEM_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_new\fP(cmp)   \fBSKM_sk_new\fP(\fBESS_CERT_ID\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_new_null\fP()   \fBSKM_sk_new_null\fP(\fBESS_CERT_ID\fP)"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_free\fP(st)   \fBSKM_sk_free\fP(\fBESS_CERT_ID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_num\fP(st)   \fBSKM_sk_num\fP(\fBESS_CERT_ID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBESS_CERT_ID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBESS_CERT_ID\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_zero\fP(st)   \fBSKM_sk_zero\fP(\fBESS_CERT_ID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBESS_CERT_ID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBESS_CERT_ID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBESS_CERT_ID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBESS_CERT_ID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBESS_CERT_ID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBESS_CERT_ID\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBESS_CERT_ID\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBESS_CERT_ID\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_dup\fP(st)   \fBSKM_sk_dup\fP(\fBESS_CERT_ID\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBESS_CERT_ID\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBESS_CERT_ID\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_shift\fP(st)   \fBSKM_sk_shift\fP(\fBESS_CERT_ID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_pop\fP(st)   \fBSKM_sk_pop\fP(\fBESS_CERT_ID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_sort\fP(st)   \fBSKM_sk_sort\fP(\fBESS_CERT_ID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_ESS_CERT_ID_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBESS_CERT_ID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_new\fP(cmp)   \fBSKM_sk_new\fP(\fBEVP_MD\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_new_null\fP()   \fBSKM_sk_new_null\fP(\fBEVP_MD\fP)"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_free\fP(st)   \fBSKM_sk_free\fP(\fBEVP_MD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_num\fP(st)   \fBSKM_sk_num\fP(\fBEVP_MD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBEVP_MD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBEVP_MD\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_zero\fP(st)   \fBSKM_sk_zero\fP(\fBEVP_MD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBEVP_MD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBEVP_MD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBEVP_MD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBEVP_MD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBEVP_MD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBEVP_MD\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBEVP_MD\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBEVP_MD\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_dup\fP(st)   \fBSKM_sk_dup\fP(\fBEVP_MD\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBEVP_MD\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBEVP_MD\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_shift\fP(st)   \fBSKM_sk_shift\fP(\fBEVP_MD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_pop\fP(st)   \fBSKM_sk_pop\fP(\fBEVP_MD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_sort\fP(st)   \fBSKM_sk_sort\fP(\fBEVP_MD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_MD_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBEVP_MD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_new\fP(cmp)   \fBSKM_sk_new\fP(EVP_PBE_CTL, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_new_null\fP()   \fBSKM_sk_new_null\fP(EVP_PBE_CTL)"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_free\fP(st)   \fBSKM_sk_free\fP(EVP_PBE_CTL, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_num\fP(st)   \fBSKM_sk_num\fP(EVP_PBE_CTL, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_value\fP(st,  i)   \fBSKM_sk_value\fP(EVP_PBE_CTL, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(EVP_PBE_CTL, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_zero\fP(st)   \fBSKM_sk_zero\fP(EVP_PBE_CTL, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_push\fP(st,  val)   \fBSKM_sk_push\fP(EVP_PBE_CTL, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(EVP_PBE_CTL, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_find\fP(st,  val)   \fBSKM_sk_find\fP(EVP_PBE_CTL, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(EVP_PBE_CTL, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_delete\fP(st,  i)   \fBSKM_sk_delete\fP(EVP_PBE_CTL, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(EVP_PBE_CTL, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(EVP_PBE_CTL, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(EVP_PBE_CTL, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_dup\fP(st)   \fBSKM_sk_dup\fP(EVP_PBE_CTL, st)"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(EVP_PBE_CTL, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(EVP_PBE_CTL, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_shift\fP(st)   \fBSKM_sk_shift\fP(EVP_PBE_CTL, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_pop\fP(st)   \fBSKM_sk_pop\fP(EVP_PBE_CTL, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_sort\fP(st)   \fBSKM_sk_sort\fP(EVP_PBE_CTL, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PBE_CTL_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(EVP_PBE_CTL, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_new\fP(cmp)   \fBSKM_sk_new\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_new_null\fP()   \fBSKM_sk_new_null\fP(\fBEVP_PKEY_ASN1_METHOD\fP)"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_free\fP(st)   \fBSKM_sk_free\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_num\fP(st)   \fBSKM_sk_num\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_zero\fP(st)   \fBSKM_sk_zero\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_dup\fP(st)   \fBSKM_sk_dup\fP(\fBEVP_PKEY_ASN1_METHOD\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_shift\fP(st)   \fBSKM_sk_shift\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_pop\fP(st)   \fBSKM_sk_pop\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_sort\fP(st)   \fBSKM_sk_sort\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_ASN1_METHOD_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_new\fP(cmp)   \fBSKM_sk_new\fP(\fBEVP_PKEY_METHOD\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_new_null\fP()   \fBSKM_sk_new_null\fP(\fBEVP_PKEY_METHOD\fP)"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_free\fP(st)   \fBSKM_sk_free\fP(\fBEVP_PKEY_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_num\fP(st)   \fBSKM_sk_num\fP(\fBEVP_PKEY_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBEVP_PKEY_METHOD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBEVP_PKEY_METHOD\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_zero\fP(st)   \fBSKM_sk_zero\fP(\fBEVP_PKEY_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBEVP_PKEY_METHOD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBEVP_PKEY_METHOD\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBEVP_PKEY_METHOD\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBEVP_PKEY_METHOD\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_dup\fP(st)   \fBSKM_sk_dup\fP(\fBEVP_PKEY_METHOD\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBEVP_PKEY_METHOD\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBEVP_PKEY_METHOD\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_shift\fP(st)   \fBSKM_sk_shift\fP(\fBEVP_PKEY_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_pop\fP(st)   \fBSKM_sk_pop\fP(\fBEVP_PKEY_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_sort\fP(st)   \fBSKM_sk_sort\fP(\fBEVP_PKEY_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_EVP_PKEY_METHOD_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBEVP_PKEY_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_new\fP(cmp)   \fBSKM_sk_new\fP(\fBGENERAL_NAME\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_new_null\fP()   \fBSKM_sk_new_null\fP(\fBGENERAL_NAME\fP)"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_free\fP(st)   \fBSKM_sk_free\fP(\fBGENERAL_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_num\fP(st)   \fBSKM_sk_num\fP(\fBGENERAL_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBGENERAL_NAME\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBGENERAL_NAME\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_zero\fP(st)   \fBSKM_sk_zero\fP(\fBGENERAL_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBGENERAL_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBGENERAL_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBGENERAL_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBGENERAL_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBGENERAL_NAME\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBGENERAL_NAME\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBGENERAL_NAME\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBGENERAL_NAME\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_dup\fP(st)   \fBSKM_sk_dup\fP(\fBGENERAL_NAME\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBGENERAL_NAME\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBGENERAL_NAME\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_shift\fP(st)   \fBSKM_sk_shift\fP(\fBGENERAL_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_pop\fP(st)   \fBSKM_sk_pop\fP(\fBGENERAL_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_sort\fP(st)   \fBSKM_sk_sort\fP(\fBGENERAL_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAME_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBGENERAL_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_new\fP(cmp)   \fBSKM_sk_new\fP(GENERAL_NAMES, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_new_null\fP()   \fBSKM_sk_new_null\fP(GENERAL_NAMES)"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_free\fP(st)   \fBSKM_sk_free\fP(GENERAL_NAMES, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_num\fP(st)   \fBSKM_sk_num\fP(GENERAL_NAMES, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_value\fP(st,  i)   \fBSKM_sk_value\fP(GENERAL_NAMES, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(GENERAL_NAMES, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_zero\fP(st)   \fBSKM_sk_zero\fP(GENERAL_NAMES, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_push\fP(st,  val)   \fBSKM_sk_push\fP(GENERAL_NAMES, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(GENERAL_NAMES, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_find\fP(st,  val)   \fBSKM_sk_find\fP(GENERAL_NAMES, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(GENERAL_NAMES, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_delete\fP(st,  i)   \fBSKM_sk_delete\fP(GENERAL_NAMES, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(GENERAL_NAMES, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(GENERAL_NAMES, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(GENERAL_NAMES, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_dup\fP(st)   \fBSKM_sk_dup\fP(GENERAL_NAMES, st)"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(GENERAL_NAMES, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(GENERAL_NAMES, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_shift\fP(st)   \fBSKM_sk_shift\fP(GENERAL_NAMES, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_pop\fP(st)   \fBSKM_sk_pop\fP(GENERAL_NAMES, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_sort\fP(st)   \fBSKM_sk_sort\fP(GENERAL_NAMES, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_NAMES_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(GENERAL_NAMES, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBGENERAL_SUBTREE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBGENERAL_SUBTREE\fP)"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_free\fP(st)   \fBSKM_sk_free\fP(\fBGENERAL_SUBTREE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_num\fP(st)   \fBSKM_sk_num\fP(\fBGENERAL_SUBTREE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBGENERAL_SUBTREE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBGENERAL_SUBTREE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBGENERAL_SUBTREE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBGENERAL_SUBTREE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBGENERAL_SUBTREE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBGENERAL_SUBTREE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBGENERAL_SUBTREE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBGENERAL_SUBTREE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBGENERAL_SUBTREE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBGENERAL_SUBTREE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBGENERAL_SUBTREE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBGENERAL_SUBTREE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBGENERAL_SUBTREE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_GENERAL_SUBTREE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBGENERAL_SUBTREE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_new\fP(cmp)   \fBSKM_sk_new\fP(\fBIPAddressFamily\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_new_null\fP()   \fBSKM_sk_new_null\fP(\fBIPAddressFamily\fP)"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_free\fP(st)   \fBSKM_sk_free\fP(\fBIPAddressFamily\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_num\fP(st)   \fBSKM_sk_num\fP(\fBIPAddressFamily\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBIPAddressFamily\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBIPAddressFamily\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_zero\fP(st)   \fBSKM_sk_zero\fP(\fBIPAddressFamily\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBIPAddressFamily\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBIPAddressFamily\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBIPAddressFamily\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBIPAddressFamily\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBIPAddressFamily\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBIPAddressFamily\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBIPAddressFamily\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBIPAddressFamily\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_dup\fP(st)   \fBSKM_sk_dup\fP(\fBIPAddressFamily\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBIPAddressFamily\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBIPAddressFamily\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_shift\fP(st)   \fBSKM_sk_shift\fP(\fBIPAddressFamily\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_pop\fP(st)   \fBSKM_sk_pop\fP(\fBIPAddressFamily\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_sort\fP(st)   \fBSKM_sk_sort\fP(\fBIPAddressFamily\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressFamily_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBIPAddressFamily\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_new\fP(cmp)   \fBSKM_sk_new\fP(\fBIPAddressOrRange\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_new_null\fP()   \fBSKM_sk_new_null\fP(\fBIPAddressOrRange\fP)"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_free\fP(st)   \fBSKM_sk_free\fP(\fBIPAddressOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_num\fP(st)   \fBSKM_sk_num\fP(\fBIPAddressOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBIPAddressOrRange\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBIPAddressOrRange\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_zero\fP(st)   \fBSKM_sk_zero\fP(\fBIPAddressOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBIPAddressOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBIPAddressOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBIPAddressOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBIPAddressOrRange\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBIPAddressOrRange\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBIPAddressOrRange\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBIPAddressOrRange\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBIPAddressOrRange\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_dup\fP(st)   \fBSKM_sk_dup\fP(\fBIPAddressOrRange\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBIPAddressOrRange\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBIPAddressOrRange\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_shift\fP(st)   \fBSKM_sk_shift\fP(\fBIPAddressOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_pop\fP(st)   \fBSKM_sk_pop\fP(\fBIPAddressOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_sort\fP(st)   \fBSKM_sk_sort\fP(\fBIPAddressOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_IPAddressOrRange_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBIPAddressOrRange\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_APREQBODY\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_APREQBODY\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_APREQBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_APREQBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_APREQBODY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_APREQBODY\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_APREQBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_APREQBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_APREQBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_APREQBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_APREQBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_APREQBODY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_APREQBODY\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_APREQBODY\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_APREQBODY\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_APREQBODY\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_APREQBODY\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_APREQBODY\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_APREQBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_APREQBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_APREQBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_APREQBODY_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_APREQBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_AUTHDATA\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_AUTHDATA\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_AUTHDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_AUTHDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_AUTHDATA\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_AUTHDATA\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_AUTHDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_AUTHDATA\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_AUTHDATA\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_AUTHDATA\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_AUTHDATA\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_AUTHDATA\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_AUTHDATA\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_AUTHDATA\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_AUTHDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_AUTHDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_AUTHDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHDATA_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_AUTHDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_AUTHENTBODY\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_AUTHENTBODY\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_AUTHENTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_AUTHENTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_AUTHENTBODY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_AUTHENTBODY\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_AUTHENTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_AUTHENTBODY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_AUTHENTBODY\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_AUTHENTBODY\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_AUTHENTBODY\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_AUTHENTBODY\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_AUTHENTBODY\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_AUTHENTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_AUTHENTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_AUTHENTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_AUTHENTBODY_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_AUTHENTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_CHECKSUM\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_CHECKSUM\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_CHECKSUM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_CHECKSUM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_CHECKSUM\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_CHECKSUM\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_CHECKSUM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_CHECKSUM\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_CHECKSUM\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_CHECKSUM\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_CHECKSUM\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_CHECKSUM\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_CHECKSUM\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_CHECKSUM\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_CHECKSUM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_CHECKSUM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_CHECKSUM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_CHECKSUM_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_CHECKSUM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_ENCDATA\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_ENCDATA\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_ENCDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_ENCDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_ENCDATA\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_ENCDATA\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_ENCDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_ENCDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_ENCDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_ENCDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_ENCDATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_ENCDATA\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_ENCDATA\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_ENCDATA\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_ENCDATA\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_ENCDATA\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_ENCDATA\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_ENCDATA\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_ENCDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_ENCDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_ENCDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCDATA_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_ENCDATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_ENCKEY\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_ENCKEY\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_ENCKEY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_ENCKEY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_ENCKEY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_ENCKEY\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_ENCKEY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_ENCKEY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_ENCKEY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_ENCKEY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_ENCKEY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_ENCKEY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_ENCKEY\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_ENCKEY\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_ENCKEY\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_ENCKEY\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_ENCKEY\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_ENCKEY\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_ENCKEY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_ENCKEY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_ENCKEY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_ENCKEY_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_ENCKEY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_PRINCNAME\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_PRINCNAME\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_PRINCNAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_PRINCNAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_PRINCNAME\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_PRINCNAME\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_PRINCNAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_PRINCNAME\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_PRINCNAME\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_PRINCNAME\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_PRINCNAME\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_PRINCNAME\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_PRINCNAME\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_PRINCNAME\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_PRINCNAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_PRINCNAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_PRINCNAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_PRINCNAME_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_PRINCNAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_new\fP(cmp)   \fBSKM_sk_new\fP(\fBKRB5_TKTBODY\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_new_null\fP()   \fBSKM_sk_new_null\fP(\fBKRB5_TKTBODY\fP)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_free\fP(st)   \fBSKM_sk_free\fP(\fBKRB5_TKTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_num\fP(st)   \fBSKM_sk_num\fP(\fBKRB5_TKTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBKRB5_TKTBODY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBKRB5_TKTBODY\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_zero\fP(st)   \fBSKM_sk_zero\fP(\fBKRB5_TKTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBKRB5_TKTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBKRB5_TKTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBKRB5_TKTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBKRB5_TKTBODY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBKRB5_TKTBODY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_TKTBODY\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBKRB5_TKTBODY\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_TKTBODY\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_dup\fP(st)   \fBSKM_sk_dup\fP(\fBKRB5_TKTBODY\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_TKTBODY\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_TKTBODY\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_shift\fP(st)   \fBSKM_sk_shift\fP(\fBKRB5_TKTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_pop\fP(st)   \fBSKM_sk_pop\fP(\fBKRB5_TKTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_sort\fP(st)   \fBSKM_sk_sort\fP(\fBKRB5_TKTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_KRB5_TKTBODY_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_TKTBODY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_new\fP(cmp)   \fBSKM_sk_new\fP(MEM_OBJECT_DATA, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_new_null\fP()   \fBSKM_sk_new_null\fP(MEM_OBJECT_DATA)"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_free\fP(st)   \fBSKM_sk_free\fP(MEM_OBJECT_DATA, (st))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_num\fP(st)   \fBSKM_sk_num\fP(MEM_OBJECT_DATA, (st))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_value\fP(st,  i)   \fBSKM_sk_value\fP(MEM_OBJECT_DATA, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(MEM_OBJECT_DATA, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_zero\fP(st)   \fBSKM_sk_zero\fP(MEM_OBJECT_DATA, (st))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_push\fP(st,  val)   \fBSKM_sk_push\fP(MEM_OBJECT_DATA, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(MEM_OBJECT_DATA, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_find\fP(st,  val)   \fBSKM_sk_find\fP(MEM_OBJECT_DATA, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(MEM_OBJECT_DATA, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_delete\fP(st,  i)   \fBSKM_sk_delete\fP(MEM_OBJECT_DATA, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(MEM_OBJECT_DATA, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(MEM_OBJECT_DATA, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(MEM_OBJECT_DATA, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_dup\fP(st)   \fBSKM_sk_dup\fP(MEM_OBJECT_DATA, st)"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(MEM_OBJECT_DATA, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(MEM_OBJECT_DATA, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_shift\fP(st)   \fBSKM_sk_shift\fP(MEM_OBJECT_DATA, (st))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_pop\fP(st)   \fBSKM_sk_pop\fP(MEM_OBJECT_DATA, (st))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_sort\fP(st)   \fBSKM_sk_sort\fP(MEM_OBJECT_DATA, (st))"
.br
.ti -1c
.RI "#define \fBsk_MEM_OBJECT_DATA_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(MEM_OBJECT_DATA, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_new\fP(cmp)   \fBSKM_sk_new\fP(MIME_HEADER, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_new_null\fP()   \fBSKM_sk_new_null\fP(MIME_HEADER)"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_free\fP(st)   \fBSKM_sk_free\fP(MIME_HEADER, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_num\fP(st)   \fBSKM_sk_num\fP(MIME_HEADER, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_value\fP(st,  i)   \fBSKM_sk_value\fP(MIME_HEADER, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(MIME_HEADER, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_zero\fP(st)   \fBSKM_sk_zero\fP(MIME_HEADER, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_push\fP(st,  val)   \fBSKM_sk_push\fP(MIME_HEADER, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(MIME_HEADER, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_find\fP(st,  val)   \fBSKM_sk_find\fP(MIME_HEADER, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(MIME_HEADER, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_delete\fP(st,  i)   \fBSKM_sk_delete\fP(MIME_HEADER, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(MIME_HEADER, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(MIME_HEADER, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(MIME_HEADER, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_dup\fP(st)   \fBSKM_sk_dup\fP(MIME_HEADER, st)"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(MIME_HEADER, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(MIME_HEADER, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_shift\fP(st)   \fBSKM_sk_shift\fP(MIME_HEADER, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_pop\fP(st)   \fBSKM_sk_pop\fP(MIME_HEADER, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_sort\fP(st)   \fBSKM_sk_sort\fP(MIME_HEADER, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_HEADER_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(MIME_HEADER, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_new\fP(cmp)   \fBSKM_sk_new\fP(MIME_PARAM, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_new_null\fP()   \fBSKM_sk_new_null\fP(MIME_PARAM)"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_free\fP(st)   \fBSKM_sk_free\fP(MIME_PARAM, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_num\fP(st)   \fBSKM_sk_num\fP(MIME_PARAM, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_value\fP(st,  i)   \fBSKM_sk_value\fP(MIME_PARAM, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(MIME_PARAM, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_zero\fP(st)   \fBSKM_sk_zero\fP(MIME_PARAM, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_push\fP(st,  val)   \fBSKM_sk_push\fP(MIME_PARAM, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(MIME_PARAM, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_find\fP(st,  val)   \fBSKM_sk_find\fP(MIME_PARAM, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(MIME_PARAM, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_delete\fP(st,  i)   \fBSKM_sk_delete\fP(MIME_PARAM, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(MIME_PARAM, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(MIME_PARAM, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(MIME_PARAM, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_dup\fP(st)   \fBSKM_sk_dup\fP(MIME_PARAM, st)"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(MIME_PARAM, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(MIME_PARAM, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_shift\fP(st)   \fBSKM_sk_shift\fP(MIME_PARAM, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_pop\fP(st)   \fBSKM_sk_pop\fP(MIME_PARAM, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_sort\fP(st)   \fBSKM_sk_sort\fP(MIME_PARAM, (st))"
.br
.ti -1c
.RI "#define \fBsk_MIME_PARAM_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(MIME_PARAM, (st))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_new\fP(cmp)   \fBSKM_sk_new\fP(NAME_FUNCS, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_new_null\fP()   \fBSKM_sk_new_null\fP(NAME_FUNCS)"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_free\fP(st)   \fBSKM_sk_free\fP(NAME_FUNCS, (st))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_num\fP(st)   \fBSKM_sk_num\fP(NAME_FUNCS, (st))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_value\fP(st,  i)   \fBSKM_sk_value\fP(NAME_FUNCS, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(NAME_FUNCS, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_zero\fP(st)   \fBSKM_sk_zero\fP(NAME_FUNCS, (st))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_push\fP(st,  val)   \fBSKM_sk_push\fP(NAME_FUNCS, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(NAME_FUNCS, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_find\fP(st,  val)   \fBSKM_sk_find\fP(NAME_FUNCS, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(NAME_FUNCS, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_delete\fP(st,  i)   \fBSKM_sk_delete\fP(NAME_FUNCS, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(NAME_FUNCS, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(NAME_FUNCS, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(NAME_FUNCS, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_dup\fP(st)   \fBSKM_sk_dup\fP(NAME_FUNCS, st)"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(NAME_FUNCS, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(NAME_FUNCS, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_shift\fP(st)   \fBSKM_sk_shift\fP(NAME_FUNCS, (st))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_pop\fP(st)   \fBSKM_sk_pop\fP(NAME_FUNCS, (st))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_sort\fP(st)   \fBSKM_sk_sort\fP(NAME_FUNCS, (st))"
.br
.ti -1c
.RI "#define \fBsk_NAME_FUNCS_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(NAME_FUNCS, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_new\fP(cmp)   \fBSKM_sk_new\fP(\fBOCSP_CERTID\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_new_null\fP()   \fBSKM_sk_new_null\fP(\fBOCSP_CERTID\fP)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_free\fP(st)   \fBSKM_sk_free\fP(\fBOCSP_CERTID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_num\fP(st)   \fBSKM_sk_num\fP(\fBOCSP_CERTID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBOCSP_CERTID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBOCSP_CERTID\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_zero\fP(st)   \fBSKM_sk_zero\fP(\fBOCSP_CERTID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBOCSP_CERTID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBOCSP_CERTID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBOCSP_CERTID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBOCSP_CERTID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBOCSP_CERTID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_CERTID\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBOCSP_CERTID\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_CERTID\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_dup\fP(st)   \fBSKM_sk_dup\fP(\fBOCSP_CERTID\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_CERTID\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_CERTID\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_shift\fP(st)   \fBSKM_sk_shift\fP(\fBOCSP_CERTID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_pop\fP(st)   \fBSKM_sk_pop\fP(\fBOCSP_CERTID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_sort\fP(st)   \fBSKM_sk_sort\fP(\fBOCSP_CERTID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_CERTID_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_CERTID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_new\fP(cmp)   \fBSKM_sk_new\fP(\fBOCSP_ONEREQ\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_new_null\fP()   \fBSKM_sk_new_null\fP(\fBOCSP_ONEREQ\fP)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_free\fP(st)   \fBSKM_sk_free\fP(\fBOCSP_ONEREQ\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_num\fP(st)   \fBSKM_sk_num\fP(\fBOCSP_ONEREQ\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBOCSP_ONEREQ\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBOCSP_ONEREQ\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_zero\fP(st)   \fBSKM_sk_zero\fP(\fBOCSP_ONEREQ\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBOCSP_ONEREQ\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBOCSP_ONEREQ\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBOCSP_ONEREQ\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBOCSP_ONEREQ\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBOCSP_ONEREQ\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_ONEREQ\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBOCSP_ONEREQ\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_ONEREQ\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_dup\fP(st)   \fBSKM_sk_dup\fP(\fBOCSP_ONEREQ\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_ONEREQ\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_ONEREQ\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_shift\fP(st)   \fBSKM_sk_shift\fP(\fBOCSP_ONEREQ\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_pop\fP(st)   \fBSKM_sk_pop\fP(\fBOCSP_ONEREQ\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_sort\fP(st)   \fBSKM_sk_sort\fP(\fBOCSP_ONEREQ\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_ONEREQ_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_ONEREQ\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_new\fP(cmp)   \fBSKM_sk_new\fP(\fBOCSP_RESPID\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_new_null\fP()   \fBSKM_sk_new_null\fP(\fBOCSP_RESPID\fP)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_free\fP(st)   \fBSKM_sk_free\fP(\fBOCSP_RESPID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_num\fP(st)   \fBSKM_sk_num\fP(\fBOCSP_RESPID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBOCSP_RESPID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBOCSP_RESPID\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_zero\fP(st)   \fBSKM_sk_zero\fP(\fBOCSP_RESPID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBOCSP_RESPID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBOCSP_RESPID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBOCSP_RESPID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBOCSP_RESPID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBOCSP_RESPID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_RESPID\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBOCSP_RESPID\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_RESPID\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_dup\fP(st)   \fBSKM_sk_dup\fP(\fBOCSP_RESPID\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_RESPID\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_RESPID\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_shift\fP(st)   \fBSKM_sk_shift\fP(\fBOCSP_RESPID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_pop\fP(st)   \fBSKM_sk_pop\fP(\fBOCSP_RESPID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_sort\fP(st)   \fBSKM_sk_sort\fP(\fBOCSP_RESPID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_RESPID_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_RESPID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_new\fP(cmp)   \fBSKM_sk_new\fP(\fBOCSP_SINGLERESP\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_new_null\fP()   \fBSKM_sk_new_null\fP(\fBOCSP_SINGLERESP\fP)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_free\fP(st)   \fBSKM_sk_free\fP(\fBOCSP_SINGLERESP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_num\fP(st)   \fBSKM_sk_num\fP(\fBOCSP_SINGLERESP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBOCSP_SINGLERESP\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBOCSP_SINGLERESP\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_zero\fP(st)   \fBSKM_sk_zero\fP(\fBOCSP_SINGLERESP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBOCSP_SINGLERESP\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_SINGLERESP\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBOCSP_SINGLERESP\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_SINGLERESP\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_dup\fP(st)   \fBSKM_sk_dup\fP(\fBOCSP_SINGLERESP\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_SINGLERESP\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_SINGLERESP\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_shift\fP(st)   \fBSKM_sk_shift\fP(\fBOCSP_SINGLERESP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_pop\fP(st)   \fBSKM_sk_pop\fP(\fBOCSP_SINGLERESP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_sort\fP(st)   \fBSKM_sk_sort\fP(\fBOCSP_SINGLERESP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OCSP_SINGLERESP_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_SINGLERESP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_new\fP(cmp)   \fBSKM_sk_new\fP(\fBPKCS12_SAFEBAG\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_new_null\fP()   \fBSKM_sk_new_null\fP(\fBPKCS12_SAFEBAG\fP)"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_free\fP(st)   \fBSKM_sk_free\fP(\fBPKCS12_SAFEBAG\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_num\fP(st)   \fBSKM_sk_num\fP(\fBPKCS12_SAFEBAG\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBPKCS12_SAFEBAG\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBPKCS12_SAFEBAG\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_zero\fP(st)   \fBSKM_sk_zero\fP(\fBPKCS12_SAFEBAG\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBPKCS12_SAFEBAG\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS12_SAFEBAG\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBPKCS12_SAFEBAG\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS12_SAFEBAG\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_dup\fP(st)   \fBSKM_sk_dup\fP(\fBPKCS12_SAFEBAG\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS12_SAFEBAG\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS12_SAFEBAG\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_shift\fP(st)   \fBSKM_sk_shift\fP(\fBPKCS12_SAFEBAG\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_pop\fP(st)   \fBSKM_sk_pop\fP(\fBPKCS12_SAFEBAG\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_sort\fP(st)   \fBSKM_sk_sort\fP(\fBPKCS12_SAFEBAG\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS12_SAFEBAG_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS12_SAFEBAG\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_new\fP(cmp)   \fBSKM_sk_new\fP(\fBPKCS7\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_new_null\fP()   \fBSKM_sk_new_null\fP(\fBPKCS7\fP)"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_free\fP(st)   \fBSKM_sk_free\fP(\fBPKCS7\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_num\fP(st)   \fBSKM_sk_num\fP(\fBPKCS7\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBPKCS7\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBPKCS7\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_zero\fP(st)   \fBSKM_sk_zero\fP(\fBPKCS7\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBPKCS7\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBPKCS7\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBPKCS7\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBPKCS7\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBPKCS7\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS7\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBPKCS7\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS7\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_dup\fP(st)   \fBSKM_sk_dup\fP(\fBPKCS7\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS7\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS7\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_shift\fP(st)   \fBSKM_sk_shift\fP(\fBPKCS7\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_pop\fP(st)   \fBSKM_sk_pop\fP(\fBPKCS7\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_sort\fP(st)   \fBSKM_sk_sort\fP(\fBPKCS7\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS7\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_new\fP(cmp)   \fBSKM_sk_new\fP(\fBPKCS7_RECIP_INFO\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_new_null\fP()   \fBSKM_sk_new_null\fP(\fBPKCS7_RECIP_INFO\fP)"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_free\fP(st)   \fBSKM_sk_free\fP(\fBPKCS7_RECIP_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_num\fP(st)   \fBSKM_sk_num\fP(\fBPKCS7_RECIP_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_zero\fP(st)   \fBSKM_sk_zero\fP(\fBPKCS7_RECIP_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS7_RECIP_INFO\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS7_RECIP_INFO\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_dup\fP(st)   \fBSKM_sk_dup\fP(\fBPKCS7_RECIP_INFO\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS7_RECIP_INFO\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS7_RECIP_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_shift\fP(st)   \fBSKM_sk_shift\fP(\fBPKCS7_RECIP_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_pop\fP(st)   \fBSKM_sk_pop\fP(\fBPKCS7_RECIP_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_sort\fP(st)   \fBSKM_sk_sort\fP(\fBPKCS7_RECIP_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_RECIP_INFO_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS7_RECIP_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_new\fP(cmp)   \fBSKM_sk_new\fP(\fBPKCS7_SIGNER_INFO\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_new_null\fP()   \fBSKM_sk_new_null\fP(\fBPKCS7_SIGNER_INFO\fP)"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_free\fP(st)   \fBSKM_sk_free\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_num\fP(st)   \fBSKM_sk_num\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_zero\fP(st)   \fBSKM_sk_zero\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_dup\fP(st)   \fBSKM_sk_dup\fP(\fBPKCS7_SIGNER_INFO\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_shift\fP(st)   \fBSKM_sk_shift\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_pop\fP(st)   \fBSKM_sk_pop\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_sort\fP(st)   \fBSKM_sk_sort\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_PKCS7_SIGNER_INFO_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_new\fP(cmp)   \fBSKM_sk_new\fP(\fBPOLICYINFO\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_new_null\fP()   \fBSKM_sk_new_null\fP(\fBPOLICYINFO\fP)"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_free\fP(st)   \fBSKM_sk_free\fP(\fBPOLICYINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_num\fP(st)   \fBSKM_sk_num\fP(\fBPOLICYINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBPOLICYINFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBPOLICYINFO\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_zero\fP(st)   \fBSKM_sk_zero\fP(\fBPOLICYINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBPOLICYINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBPOLICYINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBPOLICYINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBPOLICYINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBPOLICYINFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBPOLICYINFO\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBPOLICYINFO\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPOLICYINFO\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_dup\fP(st)   \fBSKM_sk_dup\fP(\fBPOLICYINFO\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPOLICYINFO\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPOLICYINFO\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_shift\fP(st)   \fBSKM_sk_shift\fP(\fBPOLICYINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_pop\fP(st)   \fBSKM_sk_pop\fP(\fBPOLICYINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_sort\fP(st)   \fBSKM_sk_sort\fP(\fBPOLICYINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYINFO_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBPOLICYINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_new\fP(cmp)   \fBSKM_sk_new\fP(\fBPOLICYQUALINFO\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_new_null\fP()   \fBSKM_sk_new_null\fP(\fBPOLICYQUALINFO\fP)"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_free\fP(st)   \fBSKM_sk_free\fP(\fBPOLICYQUALINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_num\fP(st)   \fBSKM_sk_num\fP(\fBPOLICYQUALINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBPOLICYQUALINFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBPOLICYQUALINFO\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_zero\fP(st)   \fBSKM_sk_zero\fP(\fBPOLICYQUALINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBPOLICYQUALINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBPOLICYQUALINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBPOLICYQUALINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBPOLICYQUALINFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBPOLICYQUALINFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBPOLICYQUALINFO\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBPOLICYQUALINFO\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPOLICYQUALINFO\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_dup\fP(st)   \fBSKM_sk_dup\fP(\fBPOLICYQUALINFO\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPOLICYQUALINFO\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPOLICYQUALINFO\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_shift\fP(st)   \fBSKM_sk_shift\fP(\fBPOLICYQUALINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_pop\fP(st)   \fBSKM_sk_pop\fP(\fBPOLICYQUALINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_sort\fP(st)   \fBSKM_sk_sort\fP(\fBPOLICYQUALINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICYQUALINFO_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBPOLICYQUALINFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_new\fP(cmp)   \fBSKM_sk_new\fP(\fBPOLICY_MAPPING\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_new_null\fP()   \fBSKM_sk_new_null\fP(\fBPOLICY_MAPPING\fP)"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_free\fP(st)   \fBSKM_sk_free\fP(\fBPOLICY_MAPPING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_num\fP(st)   \fBSKM_sk_num\fP(\fBPOLICY_MAPPING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBPOLICY_MAPPING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBPOLICY_MAPPING\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_zero\fP(st)   \fBSKM_sk_zero\fP(\fBPOLICY_MAPPING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBPOLICY_MAPPING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBPOLICY_MAPPING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBPOLICY_MAPPING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBPOLICY_MAPPING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBPOLICY_MAPPING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBPOLICY_MAPPING\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBPOLICY_MAPPING\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPOLICY_MAPPING\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_dup\fP(st)   \fBSKM_sk_dup\fP(\fBPOLICY_MAPPING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPOLICY_MAPPING\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPOLICY_MAPPING\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_shift\fP(st)   \fBSKM_sk_shift\fP(\fBPOLICY_MAPPING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_pop\fP(st)   \fBSKM_sk_pop\fP(\fBPOLICY_MAPPING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_sort\fP(st)   \fBSKM_sk_sort\fP(\fBPOLICY_MAPPING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_POLICY_MAPPING_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBPOLICY_MAPPING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SCT_new\fP(cmp)   \fBSKM_sk_new\fP(SCT, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SCT_new_null\fP()   \fBSKM_sk_new_null\fP(SCT)"
.br
.ti -1c
.RI "#define \fBsk_SCT_free\fP(st)   \fBSKM_sk_free\fP(SCT, (st))"
.br
.ti -1c
.RI "#define \fBsk_SCT_num\fP(st)   \fBSKM_sk_num\fP(SCT, (st))"
.br
.ti -1c
.RI "#define \fBsk_SCT_value\fP(st,  i)   \fBSKM_sk_value\fP(SCT, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SCT_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(SCT, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SCT_zero\fP(st)   \fBSKM_sk_zero\fP(SCT, (st))"
.br
.ti -1c
.RI "#define \fBsk_SCT_push\fP(st,  val)   \fBSKM_sk_push\fP(SCT, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SCT_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(SCT, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SCT_find\fP(st,  val)   \fBSKM_sk_find\fP(SCT, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SCT_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(SCT, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SCT_delete\fP(st,  i)   \fBSKM_sk_delete\fP(SCT, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SCT_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(SCT, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SCT_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(SCT, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SCT_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(SCT, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SCT_dup\fP(st)   \fBSKM_sk_dup\fP(SCT, st)"
.br
.ti -1c
.RI "#define \fBsk_SCT_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(SCT, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SCT_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(SCT, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SCT_shift\fP(st)   \fBSKM_sk_shift\fP(SCT, (st))"
.br
.ti -1c
.RI "#define \fBsk_SCT_pop\fP(st)   \fBSKM_sk_pop\fP(SCT, (st))"
.br
.ti -1c
.RI "#define \fBsk_SCT_sort\fP(st)   \fBSKM_sk_sort\fP(SCT, (st))"
.br
.ti -1c
.RI "#define \fBsk_SCT_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(SCT, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSRP_gN\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSRP_gN\fP)"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_free\fP(st)   \fBSKM_sk_free\fP(\fBSRP_gN\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_num\fP(st)   \fBSKM_sk_num\fP(\fBSRP_gN\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSRP_gN\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSRP_gN\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSRP_gN\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSRP_gN\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSRP_gN\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSRP_gN\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSRP_gN\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSRP_gN\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRP_gN\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSRP_gN\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRP_gN\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSRP_gN\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRP_gN\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRP_gN\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSRP_gN\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSRP_gN\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSRP_gN\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSRP_gN\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSRP_gN_cache\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSRP_gN_cache\fP)"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_free\fP(st)   \fBSKM_sk_free\fP(\fBSRP_gN_cache\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_num\fP(st)   \fBSKM_sk_num\fP(\fBSRP_gN_cache\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSRP_gN_cache\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSRP_gN_cache\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSRP_gN_cache\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSRP_gN_cache\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSRP_gN_cache\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSRP_gN_cache\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSRP_gN_cache\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSRP_gN_cache\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRP_gN_cache\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSRP_gN_cache\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRP_gN_cache\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSRP_gN_cache\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRP_gN_cache\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRP_gN_cache\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSRP_gN_cache\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSRP_gN_cache\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSRP_gN_cache\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_gN_cache_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSRP_gN_cache\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSRP_user_pwd\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSRP_user_pwd\fP)"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_free\fP(st)   \fBSKM_sk_free\fP(\fBSRP_user_pwd\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_num\fP(st)   \fBSKM_sk_num\fP(\fBSRP_user_pwd\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSRP_user_pwd\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSRP_user_pwd\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSRP_user_pwd\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSRP_user_pwd\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSRP_user_pwd\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSRP_user_pwd\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSRP_user_pwd\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSRP_user_pwd\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRP_user_pwd\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSRP_user_pwd\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRP_user_pwd\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSRP_user_pwd\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRP_user_pwd\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRP_user_pwd\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSRP_user_pwd\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSRP_user_pwd\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSRP_user_pwd\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRP_user_pwd_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSRP_user_pwd\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSRTP_PROTECTION_PROFILE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSRTP_PROTECTION_PROFILE\fP)"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_free\fP(st)   \fBSKM_sk_free\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_num\fP(st)   \fBSKM_sk_num\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSRTP_PROTECTION_PROFILE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SRTP_PROTECTION_PROFILE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSSL_CIPHER\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSSL_CIPHER\fP)"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_free\fP(st)   \fBSKM_sk_free\fP(\fBSSL_CIPHER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_num\fP(st)   \fBSKM_sk_num\fP(\fBSSL_CIPHER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSSL_CIPHER\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSSL_CIPHER\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSSL_CIPHER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSSL_CIPHER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSSL_CIPHER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSSL_CIPHER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSSL_CIPHER\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSSL_CIPHER\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSSL_CIPHER\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSSL_CIPHER\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSSL_CIPHER\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSSL_CIPHER\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSSL_CIPHER\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSSL_CIPHER\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSSL_CIPHER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSSL_CIPHER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSSL_CIPHER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_CIPHER_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSSL_CIPHER\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSSL_COMP\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSSL_COMP\fP)"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_free\fP(st)   \fBSKM_sk_free\fP(\fBSSL_COMP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_num\fP(st)   \fBSKM_sk_num\fP(\fBSSL_COMP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSSL_COMP\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSSL_COMP\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSSL_COMP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSSL_COMP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSSL_COMP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSSL_COMP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSSL_COMP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSSL_COMP\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSSL_COMP\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSSL_COMP\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSSL_COMP\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSSL_COMP\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSSL_COMP\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSSL_COMP\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSSL_COMP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSSL_COMP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSSL_COMP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SSL_COMP_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSSL_COMP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_new\fP(cmp)   \fBSKM_sk_new\fP(STACK_OF_X509_NAME_ENTRY, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_new_null\fP()   \fBSKM_sk_new_null\fP(STACK_OF_X509_NAME_ENTRY)"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_free\fP(st)   \fBSKM_sk_free\fP(STACK_OF_X509_NAME_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_num\fP(st)   \fBSKM_sk_num\fP(STACK_OF_X509_NAME_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_value\fP(st,  i)   \fBSKM_sk_value\fP(STACK_OF_X509_NAME_ENTRY, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(STACK_OF_X509_NAME_ENTRY, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_zero\fP(st)   \fBSKM_sk_zero\fP(STACK_OF_X509_NAME_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_push\fP(st,  val)   \fBSKM_sk_push\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_find\fP(st,  val)   \fBSKM_sk_find\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_delete\fP(st,  i)   \fBSKM_sk_delete\fP(STACK_OF_X509_NAME_ENTRY, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(STACK_OF_X509_NAME_ENTRY, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(STACK_OF_X509_NAME_ENTRY, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(STACK_OF_X509_NAME_ENTRY, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_dup\fP(st)   \fBSKM_sk_dup\fP(STACK_OF_X509_NAME_ENTRY, st)"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(STACK_OF_X509_NAME_ENTRY, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(STACK_OF_X509_NAME_ENTRY, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_shift\fP(st)   \fBSKM_sk_shift\fP(STACK_OF_X509_NAME_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_pop\fP(st)   \fBSKM_sk_pop\fP(STACK_OF_X509_NAME_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_sort\fP(st)   \fBSKM_sk_sort\fP(STACK_OF_X509_NAME_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_STACK_OF_X509_NAME_ENTRY_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(STACK_OF_X509_NAME_ENTRY, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSTORE_ATTR_INFO\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSTORE_ATTR_INFO\fP)"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_free\fP(st)   \fBSKM_sk_free\fP(\fBSTORE_ATTR_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_num\fP(st)   \fBSKM_sk_num\fP(\fBSTORE_ATTR_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSTORE_ATTR_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSTORE_ATTR_INFO\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSTORE_ATTR_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSTORE_ATTR_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSTORE_ATTR_INFO\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSTORE_ATTR_INFO\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSTORE_ATTR_INFO\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSTORE_ATTR_INFO\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSTORE_ATTR_INFO\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSTORE_ATTR_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSTORE_ATTR_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSTORE_ATTR_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSTORE_ATTR_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_ATTR_INFO_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSTORE_ATTR_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSTORE_OBJECT\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSTORE_OBJECT\fP)"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_free\fP(st)   \fBSKM_sk_free\fP(\fBSTORE_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_num\fP(st)   \fBSKM_sk_num\fP(\fBSTORE_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSTORE_OBJECT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSTORE_OBJECT\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSTORE_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSTORE_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSTORE_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSTORE_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSTORE_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSTORE_OBJECT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSTORE_OBJECT\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSTORE_OBJECT\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSTORE_OBJECT\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSTORE_OBJECT\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSTORE_OBJECT\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSTORE_OBJECT\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSTORE_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSTORE_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSTORE_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_STORE_OBJECT_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSTORE_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_new\fP(cmp)   \fBSKM_sk_new\fP(\fBSXNETID\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_new_null\fP()   \fBSKM_sk_new_null\fP(\fBSXNETID\fP)"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_free\fP(st)   \fBSKM_sk_free\fP(\fBSXNETID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_num\fP(st)   \fBSKM_sk_num\fP(\fBSXNETID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBSXNETID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBSXNETID\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_zero\fP(st)   \fBSKM_sk_zero\fP(\fBSXNETID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBSXNETID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBSXNETID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBSXNETID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBSXNETID\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBSXNETID\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBSXNETID\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBSXNETID\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSXNETID\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_dup\fP(st)   \fBSKM_sk_dup\fP(\fBSXNETID\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSXNETID\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSXNETID\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_shift\fP(st)   \fBSKM_sk_shift\fP(\fBSXNETID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_pop\fP(st)   \fBSKM_sk_pop\fP(\fBSXNETID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_sort\fP(st)   \fBSKM_sk_sort\fP(\fBSXNETID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_SXNETID_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBSXNETID\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_new\fP(cmp)   \fBSKM_sk_new\fP(\fBUI_STRING\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_new_null\fP()   \fBSKM_sk_new_null\fP(\fBUI_STRING\fP)"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_free\fP(st)   \fBSKM_sk_free\fP(\fBUI_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_num\fP(st)   \fBSKM_sk_num\fP(\fBUI_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBUI_STRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBUI_STRING\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_zero\fP(st)   \fBSKM_sk_zero\fP(\fBUI_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBUI_STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBUI_STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBUI_STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBUI_STRING\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBUI_STRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBUI_STRING\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBUI_STRING\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBUI_STRING\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_dup\fP(st)   \fBSKM_sk_dup\fP(\fBUI_STRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBUI_STRING\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBUI_STRING\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_shift\fP(st)   \fBSKM_sk_shift\fP(\fBUI_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_pop\fP(st)   \fBSKM_sk_pop\fP(\fBUI_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_sort\fP(st)   \fBSKM_sk_sort\fP(\fBUI_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_UI_STRING_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBUI_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_free\fP(st)   \fBSKM_sk_free\fP(\fBX509\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_num\fP(st)   \fBSKM_sk_num\fP(\fBX509\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509V3_EXT_METHOD\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509V3_EXT_METHOD\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_free\fP(st)   \fBSKM_sk_free\fP(\fBX509V3_EXT_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_num\fP(st)   \fBSKM_sk_num\fP(\fBX509V3_EXT_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509V3_EXT_METHOD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509V3_EXT_METHOD\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509V3_EXT_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509V3_EXT_METHOD\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509V3_EXT_METHOD\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509V3_EXT_METHOD\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509V3_EXT_METHOD\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509V3_EXT_METHOD\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509V3_EXT_METHOD\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509V3_EXT_METHOD\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509V3_EXT_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509V3_EXT_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509V3_EXT_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509V3_EXT_METHOD_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509V3_EXT_METHOD\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_ALGOR\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_ALGOR\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_ALGOR\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_ALGOR\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_ALGOR\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_ALGOR\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_ALGOR\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_ALGOR\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_ALGOR\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_ALGOR\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_ALGOR\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_ALGOR\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_ALGOR\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_ALGOR\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_ALGOR\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_ALGOR\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_ALGOR\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_ALGOR\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_ALGOR\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_ALGOR\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_ALGOR\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ALGOR_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_ALGOR\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_ATTRIBUTE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_ATTRIBUTE\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_ATTRIBUTE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_ATTRIBUTE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_ATTRIBUTE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_ATTRIBUTE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_ATTRIBUTE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_ATTRIBUTE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_ATTRIBUTE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_ATTRIBUTE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_ATTRIBUTE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_ATTRIBUTE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_ATTRIBUTE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_ATTRIBUTE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_ATTRIBUTE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_ATTRIBUTE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_ATTRIBUTE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_ATTRIBUTE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_ATTRIBUTE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_CRL\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_CRL\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_CRL\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_CRL\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_CRL\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_CRL\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_CRL\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_CRL\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_CRL\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_CRL\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_CRL\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_CRL\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_CRL\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_CRL\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_CRL\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_CRL\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_CRL\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_CRL\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_CRL\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_CRL\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_CRL\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_CRL_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_CRL\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_EXTENSION\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_EXTENSION\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_EXTENSION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_EXTENSION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_EXTENSION\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_EXTENSION\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_EXTENSION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_EXTENSION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_EXTENSION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_EXTENSION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_EXTENSION\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_EXTENSION\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_EXTENSION\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_EXTENSION\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_EXTENSION\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_EXTENSION\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_EXTENSION\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_EXTENSION\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_EXTENSION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_EXTENSION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_EXTENSION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_EXTENSION_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_EXTENSION\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_INFO\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_INFO\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_INFO\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_INFO\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_INFO\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_INFO\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_INFO\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_INFO\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_INFO\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_INFO\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_INFO_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_INFO\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_LOOKUP\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_LOOKUP\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_LOOKUP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_LOOKUP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_LOOKUP\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_LOOKUP\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_LOOKUP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_LOOKUP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_LOOKUP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_LOOKUP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_LOOKUP\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_LOOKUP\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_LOOKUP\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_LOOKUP\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_LOOKUP\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_LOOKUP\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_LOOKUP\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_LOOKUP\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_LOOKUP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_LOOKUP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_LOOKUP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_LOOKUP_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_LOOKUP\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_NAME\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_NAME\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_NAME\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_NAME\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_NAME\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_NAME\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_NAME\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_NAME\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_NAME\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_NAME\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_NAME\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_NAME\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_NAME\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_NAME_ENTRY\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_NAME_ENTRY\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_NAME_ENTRY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_NAME_ENTRY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_NAME_ENTRY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_NAME_ENTRY\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_NAME_ENTRY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_NAME_ENTRY\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_NAME_ENTRY\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_NAME_ENTRY\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_NAME_ENTRY\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_NAME_ENTRY\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_NAME_ENTRY\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_NAME_ENTRY\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_NAME_ENTRY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_NAME_ENTRY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_NAME_ENTRY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_NAME_ENTRY_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_NAME_ENTRY\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_OBJECT\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_OBJECT\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_OBJECT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_OBJECT\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_OBJECT\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_OBJECT\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_OBJECT\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_OBJECT\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_OBJECT\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_OBJECT\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_OBJECT\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_OBJECT\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_OBJECT_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_OBJECT\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_POLICY_DATA\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_POLICY_DATA\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_POLICY_DATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_POLICY_DATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_POLICY_DATA\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_POLICY_DATA\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_POLICY_DATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_POLICY_DATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_POLICY_DATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_POLICY_DATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_POLICY_DATA\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_POLICY_DATA\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_POLICY_DATA\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_POLICY_DATA\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_POLICY_DATA\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_POLICY_DATA\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_POLICY_DATA\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_POLICY_DATA\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_POLICY_DATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_POLICY_DATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_POLICY_DATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_DATA_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_POLICY_DATA\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_POLICY_NODE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_POLICY_NODE\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_POLICY_NODE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_POLICY_NODE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_POLICY_NODE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_POLICY_NODE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_POLICY_NODE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_POLICY_NODE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_POLICY_NODE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_POLICY_NODE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_POLICY_NODE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_POLICY_NODE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_POLICY_NODE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_POLICY_NODE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_POLICY_NODE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_POLICY_NODE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_POLICY_NODE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_POLICY_NODE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_POLICY_NODE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_POLICY_NODE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_POLICY_NODE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_POLICY_NODE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_POLICY_NODE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_PURPOSE\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_PURPOSE\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_PURPOSE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_PURPOSE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_PURPOSE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_PURPOSE\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_PURPOSE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_PURPOSE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_PURPOSE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_PURPOSE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_PURPOSE\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_PURPOSE\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_PURPOSE\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_PURPOSE\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_PURPOSE\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_PURPOSE\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_PURPOSE\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_PURPOSE\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_PURPOSE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_PURPOSE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_PURPOSE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_PURPOSE_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_PURPOSE\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_REVOKED\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_REVOKED\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_REVOKED\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_REVOKED\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_REVOKED\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_REVOKED\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_REVOKED\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_REVOKED\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_REVOKED\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_REVOKED\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_REVOKED\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_REVOKED\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_REVOKED\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_REVOKED\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_REVOKED\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_REVOKED\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_REVOKED\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_REVOKED\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_REVOKED\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_REVOKED\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_REVOKED\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_REVOKED_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_REVOKED\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_TRUST\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_TRUST\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_TRUST\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_TRUST\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_TRUST\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_TRUST\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_TRUST\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_TRUST\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_TRUST\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_TRUST\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_TRUST\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_TRUST\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_TRUST\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_TRUST\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_TRUST\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_TRUST\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_TRUST\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_TRUST\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_TRUST\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_TRUST\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_TRUST\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_TRUST_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_TRUST\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_new\fP(cmp)   \fBSKM_sk_new\fP(\fBX509_VERIFY_PARAM\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_new_null\fP()   \fBSKM_sk_new_null\fP(\fBX509_VERIFY_PARAM\fP)"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_free\fP(st)   \fBSKM_sk_free\fP(\fBX509_VERIFY_PARAM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_num\fP(st)   \fBSKM_sk_num\fP(\fBX509_VERIFY_PARAM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBX509_VERIFY_PARAM\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBX509_VERIFY_PARAM\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_zero\fP(st)   \fBSKM_sk_zero\fP(\fBX509_VERIFY_PARAM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBX509_VERIFY_PARAM\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_VERIFY_PARAM\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBX509_VERIFY_PARAM\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_VERIFY_PARAM\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_dup\fP(st)   \fBSKM_sk_dup\fP(\fBX509_VERIFY_PARAM\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_VERIFY_PARAM\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_VERIFY_PARAM\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_shift\fP(st)   \fBSKM_sk_shift\fP(\fBX509_VERIFY_PARAM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_pop\fP(st)   \fBSKM_sk_pop\fP(\fBX509_VERIFY_PARAM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_sort\fP(st)   \fBSKM_sk_sort\fP(\fBX509_VERIFY_PARAM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_X509_VERIFY_PARAM_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBX509_VERIFY_PARAM\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_new\fP(cmp)   \fBSKM_sk_new\fP(\fBnid_triple\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_new_null\fP()   \fBSKM_sk_new_null\fP(\fBnid_triple\fP)"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_free\fP(st)   \fBSKM_sk_free\fP(\fBnid_triple\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_num\fP(st)   \fBSKM_sk_num\fP(\fBnid_triple\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBnid_triple\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBnid_triple\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_zero\fP(st)   \fBSKM_sk_zero\fP(\fBnid_triple\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBnid_triple\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBnid_triple\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBnid_triple\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBnid_triple\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBnid_triple\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBnid_triple\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBnid_triple\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBnid_triple\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_dup\fP(st)   \fBSKM_sk_dup\fP(\fBnid_triple\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBnid_triple\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBnid_triple\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_shift\fP(st)   \fBSKM_sk_shift\fP(\fBnid_triple\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_pop\fP(st)   \fBSKM_sk_pop\fP(\fBnid_triple\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_sort\fP(st)   \fBSKM_sk_sort\fP(\fBnid_triple\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_nid_triple_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBnid_triple\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_void_new\fP(cmp)   \fBSKM_sk_new\fP(\fBvoid\fP, (cmp))"
.br
.ti -1c
.RI "#define \fBsk_void_new_null\fP()   \fBSKM_sk_new_null\fP(\fBvoid\fP)"
.br
.ti -1c
.RI "#define \fBsk_void_free\fP(st)   \fBSKM_sk_free\fP(\fBvoid\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_void_num\fP(st)   \fBSKM_sk_num\fP(\fBvoid\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_void_value\fP(st,  i)   \fBSKM_sk_value\fP(\fBvoid\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_void_set\fP(st,  i,  val)   \fBSKM_sk_set\fP(\fBvoid\fP, (st), (i), (val))"
.br
.ti -1c
.RI "#define \fBsk_void_zero\fP(st)   \fBSKM_sk_zero\fP(\fBvoid\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_void_push\fP(st,  val)   \fBSKM_sk_push\fP(\fBvoid\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_void_unshift\fP(st,  val)   \fBSKM_sk_unshift\fP(\fBvoid\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_void_find\fP(st,  val)   \fBSKM_sk_find\fP(\fBvoid\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_void_find_ex\fP(st,  val)   \fBSKM_sk_find_ex\fP(\fBvoid\fP, (st), (val))"
.br
.ti -1c
.RI "#define \fBsk_void_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBvoid\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_void_delete_ptr\fP(st,  ptr)   \fBSKM_sk_delete_ptr\fP(\fBvoid\fP, (st), (ptr))"
.br
.ti -1c
.RI "#define \fBsk_void_insert\fP(st,  val,  i)   \fBSKM_sk_insert\fP(\fBvoid\fP, (st), (val), (i))"
.br
.ti -1c
.RI "#define \fBsk_void_set_cmp_func\fP(st,  cmp)   \fBSKM_sk_set_cmp_func\fP(\fBvoid\fP, (st), (cmp))"
.br
.ti -1c
.RI "#define \fBsk_void_dup\fP(st)   \fBSKM_sk_dup\fP(\fBvoid\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_void_pop_free\fP(st,  \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBvoid\fP, (st), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_void_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBvoid\fP, (st), (copy_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_void_shift\fP(st)   \fBSKM_sk_shift\fP(\fBvoid\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_void_pop\fP(st)   \fBSKM_sk_pop\fP(\fBvoid\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_void_sort\fP(st)   \fBSKM_sk_sort\fP(\fBvoid\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_void_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBvoid\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_new\fP(cmp)   ((\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(char, cmp)))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_new_null\fP()   ((\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP) *)\fBsk_new_null\fP())"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_push\fP(st,  val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_find\fP(st,  val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_value\fP(st,  i)   ((\fBOPENSSL_STRING\fP)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), i))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_num\fP(st)   \fBSKM_sk_num\fP(\fBOPENSSL_STRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_pop_free\fP(st,  \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(char, \fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   ((\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(char, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(char, \fBfree_func\fP)))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_insert\fP(st,  val,  i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val), i)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_free\fP(st)   \fBSKM_sk_free\fP(\fBOPENSSL_STRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_set\fP(st,  i,  val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), i, \fBCHECKED_PTR_OF\fP(char, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_zero\fP(st)   \fBSKM_sk_zero\fP(\fBOPENSSL_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_unshift\fP(st,  val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_find_ex\fP(st,  val)   \fBsk_find_ex\fP((\fB_STACK\fP *)CHECKED_CONST_PTR_OF(\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP), st), CHECKED_CONST_PTR_OF(char, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBOPENSSL_STRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_delete_ptr\fP(st,  ptr)   (\fBOPENSSL_STRING\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, ptr))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_set_cmp_func\fP(st,  cmp)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_dup\fP(st)   \fBSKM_sk_dup\fP(\fBOPENSSL_STRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_shift\fP(st)   \fBSKM_sk_shift\fP(\fBOPENSSL_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_pop\fP(st)   (char *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_sort\fP(st)   \fBSKM_sk_sort\fP(\fBOPENSSL_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_STRING_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBOPENSSL_STRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_new\fP(cmp)   ((\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(\fBvoid\fP, cmp)))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_new_null\fP()   ((\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP) *)\fBsk_new_null\fP())"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_push\fP(st,  val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_find\fP(st,  val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_value\fP(st,  i)   ((\fBOPENSSL_BLOCK\fP)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), i))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_num\fP(st)   \fBSKM_sk_num\fP(\fBOPENSSL_BLOCK\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_pop_free\fP(st,  \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(\fBvoid\fP, \fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   ((\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(\fBvoid\fP, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBvoid\fP, \fBfree_func\fP)))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_insert\fP(st,  val,  i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val), i)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_free\fP(st)   \fBSKM_sk_free\fP(\fBOPENSSL_BLOCK\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_set\fP(st,  i,  val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), i, \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_zero\fP(st)   \fBSKM_sk_zero\fP(\fBOPENSSL_BLOCK\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_unshift\fP(st,  val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_find_ex\fP(st,  val)   \fBsk_find_ex\fP((\fB_STACK\fP *)CHECKED_CONST_PTR_OF(\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP), st), CHECKED_CONST_PTR_OF(\fBvoid\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBOPENSSL_BLOCK\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_delete_ptr\fP(st,  ptr)   (\fBOPENSSL_BLOCK\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, ptr))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_set_cmp_func\fP(st,  cmp)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_dup\fP(st)   \fBSKM_sk_dup\fP(\fBOPENSSL_BLOCK\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_shift\fP(st)   \fBSKM_sk_shift\fP(\fBOPENSSL_BLOCK\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_pop\fP(st)   (\fBvoid\fP *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_sort\fP(st)   \fBSKM_sk_sort\fP(\fBOPENSSL_BLOCK\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_BLOCK_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBOPENSSL_BLOCK\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_new\fP(cmp)   ((\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(\fBOPENSSL_STRING\fP, cmp)))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_new_null\fP()   ((\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP) *)\fBsk_new_null\fP())"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_push\fP(st,  val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_find\fP(st,  val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_value\fP(st,  i)   ((\fBOPENSSL_PSTRING\fP)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), i))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_num\fP(st)   \fBSKM_sk_num\fP(\fBOPENSSL_PSTRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_pop_free\fP(st,  \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(\fBOPENSSL_STRING\fP, \fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_deep_copy\fP(st,  copy_func,  \fBfree_func\fP)   ((\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(\fBOPENSSL_STRING\fP, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBOPENSSL_STRING\fP, \fBfree_func\fP)))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_insert\fP(st,  val,  i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val), i)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_free\fP(st)   \fBSKM_sk_free\fP(\fBOPENSSL_PSTRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_set\fP(st,  i,  val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), i, \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_zero\fP(st)   \fBSKM_sk_zero\fP(\fBOPENSSL_PSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_unshift\fP(st,  val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_find_ex\fP(st,  val)   \fBsk_find_ex\fP((\fB_STACK\fP *)CHECKED_CONST_PTR_OF(\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP), st), CHECKED_CONST_PTR_OF(\fBOPENSSL_STRING\fP, val))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_delete\fP(st,  i)   \fBSKM_sk_delete\fP(\fBOPENSSL_PSTRING\fP, (st), (i))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_delete_ptr\fP(st,  ptr)   (\fBOPENSSL_PSTRING\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, ptr))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_set_cmp_func\fP(st,  cmp)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_dup\fP(st)   \fBSKM_sk_dup\fP(\fBOPENSSL_PSTRING\fP, st)"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_shift\fP(st)   \fBSKM_sk_shift\fP(\fBOPENSSL_PSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_pop\fP(st)   (\fBOPENSSL_STRING\fP *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_sort\fP(st)   \fBSKM_sk_sort\fP(\fBOPENSSL_PSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBsk_OPENSSL_PSTRING_is_sorted\fP(st)   \fBSKM_sk_is_sorted\fP(\fBOPENSSL_PSTRING\fP, (st))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_ACCESS_DESCRIPTION\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBACCESS_DESCRIPTION\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_ACCESS_DESCRIPTION\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBACCESS_DESCRIPTION\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_ACCESS_DESCRIPTION\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBACCESS_DESCRIPTION\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_ACCESS_DESCRIPTION\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBACCESS_DESCRIPTION\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_ASN1_INTEGER\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_INTEGER\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_ASN1_INTEGER\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_INTEGER\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_ASN1_INTEGER\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_INTEGER\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_ASN1_INTEGER\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_INTEGER\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_ASN1_OBJECT\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_OBJECT\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_ASN1_OBJECT\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_OBJECT\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_ASN1_OBJECT\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_OBJECT\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_ASN1_OBJECT\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_OBJECT\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_ASN1_TYPE\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_TYPE\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_ASN1_TYPE\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_TYPE\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_ASN1_TYPE\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_TYPE\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_ASN1_TYPE\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_TYPE\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_ASN1_UTF8STRING\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_UTF8STRING\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_ASN1_UTF8STRING\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_UTF8STRING\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_ASN1_UTF8STRING\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_UTF8STRING\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_ASN1_UTF8STRING\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_UTF8STRING\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_DIST_POINT\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBDIST_POINT\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_DIST_POINT\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBDIST_POINT\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_DIST_POINT\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBDIST_POINT\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_DIST_POINT\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBDIST_POINT\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_ESS_CERT_ID\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBESS_CERT_ID\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_ESS_CERT_ID\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBESS_CERT_ID\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_ESS_CERT_ID\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBESS_CERT_ID\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_ESS_CERT_ID\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBESS_CERT_ID\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_EVP_MD\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBEVP_MD\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_EVP_MD\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBEVP_MD\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_EVP_MD\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBEVP_MD\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_EVP_MD\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBEVP_MD\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_GENERAL_NAME\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBGENERAL_NAME\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_GENERAL_NAME\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBGENERAL_NAME\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_GENERAL_NAME\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBGENERAL_NAME\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_GENERAL_NAME\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBGENERAL_NAME\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_OCSP_ONEREQ\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBOCSP_ONEREQ\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_OCSP_ONEREQ\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBOCSP_ONEREQ\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_OCSP_ONEREQ\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBOCSP_ONEREQ\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_OCSP_ONEREQ\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBOCSP_ONEREQ\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_OCSP_SINGLERESP\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBOCSP_SINGLERESP\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_OCSP_SINGLERESP\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBOCSP_SINGLERESP\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_OCSP_SINGLERESP\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBOCSP_SINGLERESP\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_OCSP_SINGLERESP\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBOCSP_SINGLERESP\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_PKCS12_SAFEBAG\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS12_SAFEBAG\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_PKCS12_SAFEBAG\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS12_SAFEBAG\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_PKCS12_SAFEBAG\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS12_SAFEBAG\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_PKCS12_SAFEBAG\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS12_SAFEBAG\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_PKCS7\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS7\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_PKCS7\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS7\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_PKCS7\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS7\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_PKCS7\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS7\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_PKCS7_RECIP_INFO\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS7_RECIP_INFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_PKCS7_RECIP_INFO\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS7_RECIP_INFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_PKCS7_RECIP_INFO\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_PKCS7_RECIP_INFO\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS7_RECIP_INFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_PKCS7_SIGNER_INFO\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_PKCS7_SIGNER_INFO\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_PKCS7_SIGNER_INFO\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_PKCS7_SIGNER_INFO\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS7_SIGNER_INFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_POLICYINFO\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPOLICYINFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_POLICYINFO\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPOLICYINFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_POLICYINFO\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPOLICYINFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_POLICYINFO\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPOLICYINFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_POLICYQUALINFO\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPOLICYQUALINFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_POLICYQUALINFO\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPOLICYQUALINFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_POLICYQUALINFO\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPOLICYQUALINFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_POLICYQUALINFO\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPOLICYQUALINFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_SXNETID\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBSXNETID\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_SXNETID\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBSXNETID\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_SXNETID\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBSXNETID\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_SXNETID\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBSXNETID\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_X509\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_X509\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_X509\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_X509\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_X509_ALGOR\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_ALGOR\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_X509_ALGOR\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_ALGOR\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_X509_ALGOR\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_ALGOR\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_X509_ALGOR\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_ALGOR\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_X509_ATTRIBUTE\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_ATTRIBUTE\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_X509_ATTRIBUTE\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_ATTRIBUTE\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_X509_ATTRIBUTE\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_ATTRIBUTE\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_X509_ATTRIBUTE\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_ATTRIBUTE\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_X509_CRL\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_CRL\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_X509_CRL\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_CRL\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_X509_CRL\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_CRL\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_X509_CRL\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_CRL\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_X509_EXTENSION\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_EXTENSION\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_X509_EXTENSION\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_EXTENSION\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_X509_EXTENSION\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_EXTENSION\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_X509_EXTENSION\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_EXTENSION\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_X509_NAME_ENTRY\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_NAME_ENTRY\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_X509_NAME_ENTRY\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_NAME_ENTRY\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_X509_NAME_ENTRY\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_NAME_ENTRY\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_X509_NAME_ENTRY\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_NAME_ENTRY\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBd2i_ASN1_SET_OF_X509_REVOKED\fP(st,  \fBpp\fP,  \fBlength\fP,  d2i_func,  \fBfree_func\fP,  \fBex_tag\fP,  \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_REVOKED\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"
.br
.ti -1c
.RI "#define \fBi2d_ASN1_SET_OF_X509_REVOKED\fP(st,  \fBpp\fP,  i2d_func,  \fBex_tag\fP,  \fBex_class\fP,  is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_REVOKED\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"
.br
.ti -1c
.RI "#define \fBASN1_seq_pack_X509_REVOKED\fP(st,  i2d_func,  buf,  \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_REVOKED\fP, (st), (i2d_func), (buf), (\fBlen\fP))"
.br
.ti -1c
.RI "#define \fBASN1_seq_unpack_X509_REVOKED\fP(buf,  \fBlen\fP,  d2i_func,  \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_REVOKED\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"
.br
.ti -1c
.RI "#define \fBPKCS12_decrypt_d2i_PKCS12_SAFEBAG\fP(algor,  d2i_func,  \fBfree_func\fP,  \fBpass\fP,  \fBpasslen\fP,  oct,  seq)   \fBSKM_PKCS12_decrypt_d2i\fP(\fBPKCS12_SAFEBAG\fP, (algor), (d2i_func), (\fBfree_func\fP), (\fBpass\fP), (\fBpasslen\fP), (oct), (seq))"
.br
.ti -1c
.RI "#define \fBPKCS12_decrypt_d2i_PKCS7\fP(algor,  d2i_func,  \fBfree_func\fP,  \fBpass\fP,  \fBpasslen\fP,  oct,  seq)   \fBSKM_PKCS12_decrypt_d2i\fP(\fBPKCS7\fP, (algor), (d2i_func), (\fBfree_func\fP), (\fBpass\fP), (\fBpasslen\fP), (oct), (seq))"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_new\fP()   \fBLHM_lh_new\fP(ADDED_OBJ,added_obj)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(ADDED_OBJ,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(ADDED_OBJ,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(ADDED_OBJ,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(ADDED_OBJ,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(ADDED_OBJ,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_error\fP(lh)   \fBLHM_lh_error\fP(ADDED_OBJ,lh)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_num_items\fP(lh)   \fBLHM_lh_num_items\fP(ADDED_OBJ,lh)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_down_load\fP(lh)   \fBLHM_lh_down_load\fP(ADDED_OBJ,lh)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(ADDED_OBJ,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(ADDED_OBJ,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(ADDED_OBJ,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ADDED_OBJ_free\fP(lh)   \fBLHM_lh_free\fP(ADDED_OBJ,lh)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_new\fP()   \fBLHM_lh_new\fP(APP_INFO,app_info)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(APP_INFO,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(APP_INFO,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(APP_INFO,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(APP_INFO,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(APP_INFO,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_error\fP(lh)   \fBLHM_lh_error\fP(APP_INFO,lh)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_num_items\fP(lh)   \fBLHM_lh_num_items\fP(APP_INFO,lh)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_down_load\fP(lh)   \fBLHM_lh_down_load\fP(APP_INFO,lh)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(APP_INFO,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(APP_INFO,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(APP_INFO,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_APP_INFO_free\fP(lh)   \fBLHM_lh_free\fP(APP_INFO,lh)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_new\fP()   \fBLHM_lh_new\fP(\fBCONF_VALUE\fP,conf_value)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBCONF_VALUE\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBCONF_VALUE\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBCONF_VALUE\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBCONF_VALUE\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBCONF_VALUE\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_error\fP(lh)   \fBLHM_lh_error\fP(\fBCONF_VALUE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBCONF_VALUE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBCONF_VALUE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBCONF_VALUE\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBCONF_VALUE\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBCONF_VALUE\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_CONF_VALUE_free\fP(lh)   \fBLHM_lh_free\fP(\fBCONF_VALUE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_new\fP()   \fBLHM_lh_new\fP(ENGINE_PILE,engine_pile)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(ENGINE_PILE,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(ENGINE_PILE,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(ENGINE_PILE,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(ENGINE_PILE,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(ENGINE_PILE,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_error\fP(lh)   \fBLHM_lh_error\fP(ENGINE_PILE,lh)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_num_items\fP(lh)   \fBLHM_lh_num_items\fP(ENGINE_PILE,lh)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_down_load\fP(lh)   \fBLHM_lh_down_load\fP(ENGINE_PILE,lh)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(ENGINE_PILE,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(ENGINE_PILE,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(ENGINE_PILE,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ENGINE_PILE_free\fP(lh)   \fBLHM_lh_free\fP(ENGINE_PILE,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_new\fP()   \fBLHM_lh_new\fP(\fBERR_STATE\fP,err_state)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBERR_STATE\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBERR_STATE\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBERR_STATE\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBERR_STATE\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBERR_STATE\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_error\fP(lh)   \fBLHM_lh_error\fP(\fBERR_STATE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBERR_STATE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBERR_STATE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBERR_STATE\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBERR_STATE\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBERR_STATE\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STATE_free\fP(lh)   \fBLHM_lh_free\fP(\fBERR_STATE\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_new\fP()   \fBLHM_lh_new\fP(\fBERR_STRING_DATA\fP,err_string_data)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBERR_STRING_DATA\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBERR_STRING_DATA\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBERR_STRING_DATA\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBERR_STRING_DATA\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBERR_STRING_DATA\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_error\fP(lh)   \fBLHM_lh_error\fP(\fBERR_STRING_DATA\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBERR_STRING_DATA\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBERR_STRING_DATA\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBERR_STRING_DATA\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBERR_STRING_DATA\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBERR_STRING_DATA\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_ERR_STRING_DATA_free\fP(lh)   \fBLHM_lh_free\fP(\fBERR_STRING_DATA\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_new\fP()   \fBLHM_lh_new\fP(EX_CLASS_ITEM,ex_class_item)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(EX_CLASS_ITEM,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(EX_CLASS_ITEM,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(EX_CLASS_ITEM,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(EX_CLASS_ITEM,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(EX_CLASS_ITEM,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_error\fP(lh)   \fBLHM_lh_error\fP(EX_CLASS_ITEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_num_items\fP(lh)   \fBLHM_lh_num_items\fP(EX_CLASS_ITEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_down_load\fP(lh)   \fBLHM_lh_down_load\fP(EX_CLASS_ITEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(EX_CLASS_ITEM,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(EX_CLASS_ITEM,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(EX_CLASS_ITEM,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_EX_CLASS_ITEM_free\fP(lh)   \fBLHM_lh_free\fP(EX_CLASS_ITEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_new\fP()   \fBLHM_lh_new\fP(\fBFUNCTION\fP,function)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBFUNCTION\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBFUNCTION\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBFUNCTION\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBFUNCTION\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBFUNCTION\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_error\fP(lh)   \fBLHM_lh_error\fP(\fBFUNCTION\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBFUNCTION\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBFUNCTION\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBFUNCTION\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBFUNCTION\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBFUNCTION\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_FUNCTION_free\fP(lh)   \fBLHM_lh_free\fP(\fBFUNCTION\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_MEM_new\fP()   \fBLHM_lh_new\fP(MEM,mem)"
.br
.ti -1c
.RI "#define \fBlh_MEM_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(MEM,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_MEM_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(MEM,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_MEM_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(MEM,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_MEM_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(MEM,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_MEM_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(MEM,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_MEM_error\fP(lh)   \fBLHM_lh_error\fP(MEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_MEM_num_items\fP(lh)   \fBLHM_lh_num_items\fP(MEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_MEM_down_load\fP(lh)   \fBLHM_lh_down_load\fP(MEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_MEM_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(MEM,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_MEM_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(MEM,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_MEM_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(MEM,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_MEM_free\fP(lh)   \fBLHM_lh_free\fP(MEM,lh)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_new\fP()   \fBLHM_lh_new\fP(\fBOBJ_NAME\fP,obj_name)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBOBJ_NAME\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBOBJ_NAME\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBOBJ_NAME\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBOBJ_NAME\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBOBJ_NAME\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_error\fP(lh)   \fBLHM_lh_error\fP(\fBOBJ_NAME\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBOBJ_NAME\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBOBJ_NAME\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBOBJ_NAME\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBOBJ_NAME\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBOBJ_NAME\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OBJ_NAME_free\fP(lh)   \fBLHM_lh_free\fP(\fBOBJ_NAME\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_new\fP()   \fBLHM_lh_new\fP(\fBOPENSSL_CSTRING\fP,openssl_cstring)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBOPENSSL_CSTRING\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBOPENSSL_CSTRING\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBOPENSSL_CSTRING\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBOPENSSL_CSTRING\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBOPENSSL_CSTRING\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_error\fP(lh)   \fBLHM_lh_error\fP(\fBOPENSSL_CSTRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBOPENSSL_CSTRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBOPENSSL_CSTRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBOPENSSL_CSTRING\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBOPENSSL_CSTRING\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBOPENSSL_CSTRING\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_CSTRING_free\fP(lh)   \fBLHM_lh_free\fP(\fBOPENSSL_CSTRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_new\fP()   \fBLHM_lh_new\fP(\fBOPENSSL_STRING\fP,openssl_string)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBOPENSSL_STRING\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBOPENSSL_STRING\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBOPENSSL_STRING\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBOPENSSL_STRING\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBOPENSSL_STRING\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_error\fP(lh)   \fBLHM_lh_error\fP(\fBOPENSSL_STRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBOPENSSL_STRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBOPENSSL_STRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBOPENSSL_STRING\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBOPENSSL_STRING\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBOPENSSL_STRING\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_OPENSSL_STRING_free\fP(lh)   \fBLHM_lh_free\fP(\fBOPENSSL_STRING\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_new\fP()   \fBLHM_lh_new\fP(\fBSSL_SESSION\fP,ssl_session)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_insert\fP(lh,  inst)   \fBLHM_lh_insert\fP(\fBSSL_SESSION\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_retrieve\fP(lh,  inst)   \fBLHM_lh_retrieve\fP(\fBSSL_SESSION\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_delete\fP(lh,  inst)   \fBLHM_lh_delete\fP(\fBSSL_SESSION\fP,lh,inst)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_doall\fP(lh,  fn)   \fBLHM_lh_doall\fP(\fBSSL_SESSION\fP,lh,fn)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_doall_arg\fP(lh,  fn,  arg_type,  arg)   \fBLHM_lh_doall_arg\fP(\fBSSL_SESSION\fP,lh,fn,arg_type,arg)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_error\fP(lh)   \fBLHM_lh_error\fP(\fBSSL_SESSION\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_num_items\fP(lh)   \fBLHM_lh_num_items\fP(\fBSSL_SESSION\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_down_load\fP(lh)   \fBLHM_lh_down_load\fP(\fBSSL_SESSION\fP,lh)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_node_stats_bio\fP(lh,  out)   \fBLHM_lh_node_stats_bio\fP(\fBSSL_SESSION\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_node_usage_stats_bio\fP(lh,  out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBSSL_SESSION\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_stats_bio\fP(lh,  out)   \fBLHM_lh_stats_bio\fP(\fBSSL_SESSION\fP,lh,out)"
.br
.ti -1c
.RI "#define \fBlh_SSL_SESSION_free\fP(lh)   \fBLHM_lh_free\fP(\fBSSL_SESSION\fP,lh)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef char * \fBOPENSSL_STRING\fP"
.br
.ti -1c
.RI "typedef const char * \fBOPENSSL_CSTRING\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP * \fBOPENSSL_BLOCK\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ASN1_seq_pack_ACCESS_DESCRIPTION(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBACCESS_DESCRIPTION\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2248 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_ASN1_INTEGER(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_INTEGER\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2256 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_ASN1_OBJECT(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_OBJECT\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2264 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_ASN1_TYPE(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_TYPE\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2272 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_ASN1_UTF8STRING(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBASN1_UTF8STRING\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2280 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_DIST_POINT(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBDIST_POINT\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2288 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_ESS_CERT_ID(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBESS_CERT_ID\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2296 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_EVP_MD(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBEVP_MD\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2304 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_GENERAL_NAME(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBGENERAL_NAME\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2312 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_OCSP_ONEREQ(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBOCSP_ONEREQ\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2320 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_OCSP_SINGLERESP(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBOCSP_SINGLERESP\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2328 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_PKCS12_SAFEBAG(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS12_SAFEBAG\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2336 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_PKCS7(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS7\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2344 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_PKCS7_RECIP_INFO(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2352 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_PKCS7_SIGNER_INFO(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2360 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_POLICYINFO(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPOLICYINFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2368 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_POLICYQUALINFO(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBPOLICYQUALINFO\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2376 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_SXNETID(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBSXNETID\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2384 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_X509(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2392 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_X509_ALGOR(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_ALGOR\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2400 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_X509_ATTRIBUTE(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_ATTRIBUTE\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2408 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_X509_CRL(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_CRL\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2416 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_X509_EXTENSION(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_EXTENSION\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2424 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_X509_NAME_ENTRY(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_NAME_ENTRY\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2432 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_pack_X509_REVOKED(st, i2d_func, buf, \fBlen\fP)   \fBSKM_ASN1_seq_pack\fP(\fBX509_REVOKED\fP, (st), (i2d_func), (buf), (\fBlen\fP))"

.PP
Definition at line 2440 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_ACCESS_DESCRIPTION(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBACCESS_DESCRIPTION\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2250 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_ASN1_INTEGER(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_INTEGER\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2258 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_ASN1_OBJECT(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_OBJECT\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2266 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_ASN1_TYPE(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_TYPE\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2274 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_ASN1_UTF8STRING(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBASN1_UTF8STRING\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2282 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_DIST_POINT(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBDIST_POINT\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2290 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_ESS_CERT_ID(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBESS_CERT_ID\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2298 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_EVP_MD(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBEVP_MD\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2306 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_GENERAL_NAME(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBGENERAL_NAME\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2314 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_OCSP_ONEREQ(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBOCSP_ONEREQ\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2322 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_OCSP_SINGLERESP(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBOCSP_SINGLERESP\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2330 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_PKCS12_SAFEBAG(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS12_SAFEBAG\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2338 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_PKCS7(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS7\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2346 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_PKCS7_RECIP_INFO(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS7_RECIP_INFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2354 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_PKCS7_SIGNER_INFO(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPKCS7_SIGNER_INFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2362 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_POLICYINFO(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPOLICYINFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2370 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_POLICYQUALINFO(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBPOLICYQUALINFO\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2378 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_SXNETID(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBSXNETID\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2386 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_X509(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2394 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_X509_ALGOR(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_ALGOR\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2402 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_X509_ATTRIBUTE(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_ATTRIBUTE\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2410 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_X509_CRL(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_CRL\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2418 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_X509_EXTENSION(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_EXTENSION\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2426 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_X509_NAME_ENTRY(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_NAME_ENTRY\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2434 of file include/openssl/safestack\&.h\&.
.SS "#define ASN1_seq_unpack_X509_REVOKED(buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   \fBSKM_ASN1_seq_unpack\fP(\fBX509_REVOKED\fP, (buf), (\fBlen\fP), (d2i_func), (\fBfree_func\fP))"

.PP
Definition at line 2442 of file include/openssl/safestack\&.h\&.
.SS "#define CHECKED_PTR_OF(\fBtype\fP, \fBp\fP)   ((\fBvoid\fP*) (1 ? \fBp\fP : (\fBtype\fP*)0))"

.PP
Definition at line 65 of file include/openssl/safestack\&.h\&.
.SS "#define CHECKED_SK_CMP_FUNC(\fBtype\fP, \fBp\fP)"
\fBValue:\fP
.PP
.nf
((int (*)(const void *, const void *)) \
        ((1 ? p : (int (*)(const type * const *, const type * const *))0)))
.fi
.PP
Definition at line 84 of file include/openssl/safestack\&.h\&.
.SS "#define CHECKED_SK_COPY_FUNC(\fBtype\fP, \fBp\fP)   ((\fBvoid\fP *(*)(\fBvoid\fP *)) ((1 ? \fBp\fP : (\fBtype\fP *(*)(const \fBtype\fP *))0)))"

.PP
Definition at line 78 of file include/openssl/safestack\&.h\&.
.SS "#define CHECKED_SK_FREE_FUNC(\fBtype\fP, \fBp\fP)   ((\fBvoid\fP (*)(\fBvoid\fP *)) ((1 ? \fBp\fP : (\fBvoid\fP (*)(\fBtype\fP *))0)))"

.PP
Definition at line 81 of file include/openssl/safestack\&.h\&.
.SS "#define CHECKED_STACK_OF(\fBtype\fP, \fBp\fP)   ((\fB_STACK\fP*) (1 ? \fBp\fP : (\fBSTACK_OF\fP(\fBtype\fP)*)0))"

.PP
Definition at line 75 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_ACCESS_DESCRIPTION(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBACCESS_DESCRIPTION\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2244 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_ASN1_INTEGER(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_INTEGER\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2252 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_ASN1_OBJECT(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_OBJECT\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2260 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_ASN1_TYPE(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_TYPE\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2268 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_ASN1_UTF8STRING(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBASN1_UTF8STRING\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2276 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_DIST_POINT(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBDIST_POINT\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2284 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_ESS_CERT_ID(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBESS_CERT_ID\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2292 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_EVP_MD(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBEVP_MD\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2300 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_GENERAL_NAME(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBGENERAL_NAME\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2308 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_OCSP_ONEREQ(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBOCSP_ONEREQ\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2316 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_OCSP_SINGLERESP(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBOCSP_SINGLERESP\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2324 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_PKCS12_SAFEBAG(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS12_SAFEBAG\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2332 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_PKCS7(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS7\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2340 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_PKCS7_RECIP_INFO(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS7_RECIP_INFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2348 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2356 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_POLICYINFO(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPOLICYINFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2364 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_POLICYQUALINFO(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBPOLICYQUALINFO\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2372 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_SXNETID(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBSXNETID\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2380 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_X509(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2388 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_X509_ALGOR(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_ALGOR\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2396 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_X509_ATTRIBUTE(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_ATTRIBUTE\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2404 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_X509_CRL(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_CRL\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2412 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_X509_EXTENSION(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_EXTENSION\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2420 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_X509_NAME_ENTRY(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_NAME_ENTRY\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2428 of file include/openssl/safestack\&.h\&.
.SS "#define d2i_ASN1_SET_OF_X509_REVOKED(st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)   \fBSKM_ASN1_SET_OF_d2i\fP(\fBX509_REVOKED\fP, (st), (\fBpp\fP), (\fBlength\fP), (d2i_func), (\fBfree_func\fP), (\fBex_tag\fP), (\fBex_class\fP))"

.PP
Definition at line 2436 of file include/openssl/safestack\&.h\&.
.SS "#define DECLARE_SPECIAL_STACK_OF(\fBtype\fP, type2)"
\fBValue:\fP
.PP
.nf
STACK_OF(type) \
    { \
    _STACK stack; \
    };
.fi
.PP
Definition at line 96 of file include/openssl/safestack\&.h\&.
.SS "#define DECLARE_STACK_OF(\fBtype\fP)"
\fBValue:\fP
.PP
.nf
STACK_OF(type) \
    { \
    _STACK stack; \
    };
.fi
.PP
Definition at line 91 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_ACCESS_DESCRIPTION(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBACCESS_DESCRIPTION\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2246 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_ASN1_INTEGER(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_INTEGER\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2254 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_ASN1_OBJECT(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_OBJECT\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2262 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_ASN1_TYPE(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_TYPE\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2270 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_ASN1_UTF8STRING(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBASN1_UTF8STRING\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2278 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_DIST_POINT(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBDIST_POINT\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2286 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_ESS_CERT_ID(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBESS_CERT_ID\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2294 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_EVP_MD(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBEVP_MD\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2302 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_GENERAL_NAME(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBGENERAL_NAME\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2310 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_OCSP_ONEREQ(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBOCSP_ONEREQ\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2318 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_OCSP_SINGLERESP(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBOCSP_SINGLERESP\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2326 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_PKCS12_SAFEBAG(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS12_SAFEBAG\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2334 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_PKCS7(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS7\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2342 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_PKCS7_RECIP_INFO(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS7_RECIP_INFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2350 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2358 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_POLICYINFO(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPOLICYINFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2366 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_POLICYQUALINFO(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBPOLICYQUALINFO\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2374 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_SXNETID(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBSXNETID\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2382 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_X509(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2390 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_X509_ALGOR(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_ALGOR\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2398 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_X509_ATTRIBUTE(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_ATTRIBUTE\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2406 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_X509_CRL(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_CRL\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2414 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_X509_EXTENSION(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_EXTENSION\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2422 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_X509_NAME_ENTRY(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_NAME_ENTRY\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2430 of file include/openssl/safestack\&.h\&.
.SS "#define i2d_ASN1_SET_OF_X509_REVOKED(st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)   \fBSKM_ASN1_SET_OF_i2d\fP(\fBX509_REVOKED\fP, (st), (\fBpp\fP), (i2d_func), (\fBex_tag\fP), (\fBex_class\fP), (is_set))"

.PP
Definition at line 2438 of file include/openssl/safestack\&.h\&.
.SS "#define IMPLEMENT_STACK_OF(\fBtype\fP)"

.PP
Definition at line 103 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_delete(lh, inst)   \fBLHM_lh_delete\fP(ADDED_OBJ,lh,inst)"

.PP
Definition at line 2451 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_doall(lh, fn)   \fBLHM_lh_doall\fP(ADDED_OBJ,lh,fn)"

.PP
Definition at line 2452 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(ADDED_OBJ,lh,fn,arg_type,arg)"

.PP
Definition at line 2453 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_down_load(lh)   \fBLHM_lh_down_load\fP(ADDED_OBJ,lh)"

.PP
Definition at line 2457 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_error(lh)   \fBLHM_lh_error\fP(ADDED_OBJ,lh)"

.PP
Definition at line 2455 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_free(lh)   \fBLHM_lh_free\fP(ADDED_OBJ,lh)"

.PP
Definition at line 2464 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_insert(lh, inst)   \fBLHM_lh_insert\fP(ADDED_OBJ,lh,inst)"

.PP
Definition at line 2449 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_new()   \fBLHM_lh_new\fP(ADDED_OBJ,added_obj)"

.PP
Definition at line 2448 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(ADDED_OBJ,lh,out)"

.PP
Definition at line 2458 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(ADDED_OBJ,lh,out)"

.PP
Definition at line 2460 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_num_items(lh)   \fBLHM_lh_num_items\fP(ADDED_OBJ,lh)"

.PP
Definition at line 2456 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(ADDED_OBJ,lh,inst)"

.PP
Definition at line 2450 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ADDED_OBJ_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(ADDED_OBJ,lh,out)"

.PP
Definition at line 2462 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_delete(lh, inst)   \fBLHM_lh_delete\fP(APP_INFO,lh,inst)"

.PP
Definition at line 2468 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_doall(lh, fn)   \fBLHM_lh_doall\fP(APP_INFO,lh,fn)"

.PP
Definition at line 2469 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(APP_INFO,lh,fn,arg_type,arg)"

.PP
Definition at line 2470 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_down_load(lh)   \fBLHM_lh_down_load\fP(APP_INFO,lh)"

.PP
Definition at line 2474 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_error(lh)   \fBLHM_lh_error\fP(APP_INFO,lh)"

.PP
Definition at line 2472 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_free(lh)   \fBLHM_lh_free\fP(APP_INFO,lh)"

.PP
Definition at line 2481 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_insert(lh, inst)   \fBLHM_lh_insert\fP(APP_INFO,lh,inst)"

.PP
Definition at line 2466 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_new()   \fBLHM_lh_new\fP(APP_INFO,app_info)"

.PP
Definition at line 2465 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(APP_INFO,lh,out)"

.PP
Definition at line 2475 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(APP_INFO,lh,out)"

.PP
Definition at line 2477 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_num_items(lh)   \fBLHM_lh_num_items\fP(APP_INFO,lh)"

.PP
Definition at line 2473 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(APP_INFO,lh,inst)"

.PP
Definition at line 2467 of file include/openssl/safestack\&.h\&.
.SS "#define lh_APP_INFO_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(APP_INFO,lh,out)"

.PP
Definition at line 2479 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBCONF_VALUE\fP,lh,inst)"

.PP
Definition at line 2485 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBCONF_VALUE\fP,lh,fn)"

.PP
Definition at line 2486 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBCONF_VALUE\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2487 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_down_load(lh)   \fBLHM_lh_down_load\fP(\fBCONF_VALUE\fP,lh)"

.PP
Definition at line 2491 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_error(lh)   \fBLHM_lh_error\fP(\fBCONF_VALUE\fP,lh)"

.PP
Definition at line 2489 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_free(lh)   \fBLHM_lh_free\fP(\fBCONF_VALUE\fP,lh)"

.PP
Definition at line 2498 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBCONF_VALUE\fP,lh,inst)"

.PP
Definition at line 2483 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_new()   \fBLHM_lh_new\fP(\fBCONF_VALUE\fP,conf_value)"

.PP
Definition at line 2482 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBCONF_VALUE\fP,lh,out)"

.PP
Definition at line 2492 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBCONF_VALUE\fP,lh,out)"

.PP
Definition at line 2494 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_num_items(lh)   \fBLHM_lh_num_items\fP(\fBCONF_VALUE\fP,lh)"

.PP
Definition at line 2490 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBCONF_VALUE\fP,lh,inst)"

.PP
Definition at line 2484 of file include/openssl/safestack\&.h\&.
.SS "#define lh_CONF_VALUE_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBCONF_VALUE\fP,lh,out)"

.PP
Definition at line 2496 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_delete(lh, inst)   \fBLHM_lh_delete\fP(ENGINE_PILE,lh,inst)"

.PP
Definition at line 2502 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_doall(lh, fn)   \fBLHM_lh_doall\fP(ENGINE_PILE,lh,fn)"

.PP
Definition at line 2503 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(ENGINE_PILE,lh,fn,arg_type,arg)"

.PP
Definition at line 2504 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_down_load(lh)   \fBLHM_lh_down_load\fP(ENGINE_PILE,lh)"

.PP
Definition at line 2508 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_error(lh)   \fBLHM_lh_error\fP(ENGINE_PILE,lh)"

.PP
Definition at line 2506 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_free(lh)   \fBLHM_lh_free\fP(ENGINE_PILE,lh)"

.PP
Definition at line 2515 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_insert(lh, inst)   \fBLHM_lh_insert\fP(ENGINE_PILE,lh,inst)"

.PP
Definition at line 2500 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_new()   \fBLHM_lh_new\fP(ENGINE_PILE,engine_pile)"

.PP
Definition at line 2499 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(ENGINE_PILE,lh,out)"

.PP
Definition at line 2509 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(ENGINE_PILE,lh,out)"

.PP
Definition at line 2511 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_num_items(lh)   \fBLHM_lh_num_items\fP(ENGINE_PILE,lh)"

.PP
Definition at line 2507 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(ENGINE_PILE,lh,inst)"

.PP
Definition at line 2501 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ENGINE_PILE_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(ENGINE_PILE,lh,out)"

.PP
Definition at line 2513 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBERR_STATE\fP,lh,inst)"

.PP
Definition at line 2519 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBERR_STATE\fP,lh,fn)"

.PP
Definition at line 2520 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBERR_STATE\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2521 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_down_load(lh)   \fBLHM_lh_down_load\fP(\fBERR_STATE\fP,lh)"

.PP
Definition at line 2525 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_error(lh)   \fBLHM_lh_error\fP(\fBERR_STATE\fP,lh)"

.PP
Definition at line 2523 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_free(lh)   \fBLHM_lh_free\fP(\fBERR_STATE\fP,lh)"

.PP
Definition at line 2532 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBERR_STATE\fP,lh,inst)"

.PP
Definition at line 2517 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_new()   \fBLHM_lh_new\fP(\fBERR_STATE\fP,err_state)"

.PP
Definition at line 2516 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBERR_STATE\fP,lh,out)"

.PP
Definition at line 2526 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBERR_STATE\fP,lh,out)"

.PP
Definition at line 2528 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_num_items(lh)   \fBLHM_lh_num_items\fP(\fBERR_STATE\fP,lh)"

.PP
Definition at line 2524 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBERR_STATE\fP,lh,inst)"

.PP
Definition at line 2518 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STATE_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBERR_STATE\fP,lh,out)"

.PP
Definition at line 2530 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBERR_STRING_DATA\fP,lh,inst)"

.PP
Definition at line 2536 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBERR_STRING_DATA\fP,lh,fn)"

.PP
Definition at line 2537 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBERR_STRING_DATA\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2538 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_down_load(lh)   \fBLHM_lh_down_load\fP(\fBERR_STRING_DATA\fP,lh)"

.PP
Definition at line 2542 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_error(lh)   \fBLHM_lh_error\fP(\fBERR_STRING_DATA\fP,lh)"

.PP
Definition at line 2540 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_free(lh)   \fBLHM_lh_free\fP(\fBERR_STRING_DATA\fP,lh)"

.PP
Definition at line 2549 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBERR_STRING_DATA\fP,lh,inst)"

.PP
Definition at line 2534 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_new()   \fBLHM_lh_new\fP(\fBERR_STRING_DATA\fP,err_string_data)"

.PP
Definition at line 2533 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBERR_STRING_DATA\fP,lh,out)"

.PP
Definition at line 2543 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBERR_STRING_DATA\fP,lh,out)"

.PP
Definition at line 2545 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_num_items(lh)   \fBLHM_lh_num_items\fP(\fBERR_STRING_DATA\fP,lh)"

.PP
Definition at line 2541 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBERR_STRING_DATA\fP,lh,inst)"

.PP
Definition at line 2535 of file include/openssl/safestack\&.h\&.
.SS "#define lh_ERR_STRING_DATA_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBERR_STRING_DATA\fP,lh,out)"

.PP
Definition at line 2547 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_delete(lh, inst)   \fBLHM_lh_delete\fP(EX_CLASS_ITEM,lh,inst)"

.PP
Definition at line 2553 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_doall(lh, fn)   \fBLHM_lh_doall\fP(EX_CLASS_ITEM,lh,fn)"

.PP
Definition at line 2554 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(EX_CLASS_ITEM,lh,fn,arg_type,arg)"

.PP
Definition at line 2555 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_down_load(lh)   \fBLHM_lh_down_load\fP(EX_CLASS_ITEM,lh)"

.PP
Definition at line 2559 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_error(lh)   \fBLHM_lh_error\fP(EX_CLASS_ITEM,lh)"

.PP
Definition at line 2557 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_free(lh)   \fBLHM_lh_free\fP(EX_CLASS_ITEM,lh)"

.PP
Definition at line 2566 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_insert(lh, inst)   \fBLHM_lh_insert\fP(EX_CLASS_ITEM,lh,inst)"

.PP
Definition at line 2551 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_new()   \fBLHM_lh_new\fP(EX_CLASS_ITEM,ex_class_item)"

.PP
Definition at line 2550 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(EX_CLASS_ITEM,lh,out)"

.PP
Definition at line 2560 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(EX_CLASS_ITEM,lh,out)"

.PP
Definition at line 2562 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_num_items(lh)   \fBLHM_lh_num_items\fP(EX_CLASS_ITEM,lh)"

.PP
Definition at line 2558 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(EX_CLASS_ITEM,lh,inst)"

.PP
Definition at line 2552 of file include/openssl/safestack\&.h\&.
.SS "#define lh_EX_CLASS_ITEM_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(EX_CLASS_ITEM,lh,out)"

.PP
Definition at line 2564 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBFUNCTION\fP,lh,inst)"

.PP
Definition at line 2570 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBFUNCTION\fP,lh,fn)"

.PP
Definition at line 2571 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBFUNCTION\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2572 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_down_load(lh)   \fBLHM_lh_down_load\fP(\fBFUNCTION\fP,lh)"

.PP
Definition at line 2576 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_error(lh)   \fBLHM_lh_error\fP(\fBFUNCTION\fP,lh)"

.PP
Definition at line 2574 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_free(lh)   \fBLHM_lh_free\fP(\fBFUNCTION\fP,lh)"

.PP
Definition at line 2583 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBFUNCTION\fP,lh,inst)"

.PP
Definition at line 2568 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_new()   \fBLHM_lh_new\fP(\fBFUNCTION\fP,function)"

.PP
Definition at line 2567 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBFUNCTION\fP,lh,out)"

.PP
Definition at line 2577 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBFUNCTION\fP,lh,out)"

.PP
Definition at line 2579 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_num_items(lh)   \fBLHM_lh_num_items\fP(\fBFUNCTION\fP,lh)"

.PP
Definition at line 2575 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBFUNCTION\fP,lh,inst)"

.PP
Definition at line 2569 of file include/openssl/safestack\&.h\&.
.SS "#define lh_FUNCTION_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBFUNCTION\fP,lh,out)"

.PP
Definition at line 2581 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_delete(lh, inst)   \fBLHM_lh_delete\fP(MEM,lh,inst)"

.PP
Definition at line 2587 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_doall(lh, fn)   \fBLHM_lh_doall\fP(MEM,lh,fn)"

.PP
Definition at line 2588 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(MEM,lh,fn,arg_type,arg)"

.PP
Definition at line 2589 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_down_load(lh)   \fBLHM_lh_down_load\fP(MEM,lh)"

.PP
Definition at line 2593 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_error(lh)   \fBLHM_lh_error\fP(MEM,lh)"

.PP
Definition at line 2591 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_free(lh)   \fBLHM_lh_free\fP(MEM,lh)"

.PP
Definition at line 2600 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_insert(lh, inst)   \fBLHM_lh_insert\fP(MEM,lh,inst)"

.PP
Definition at line 2585 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_new()   \fBLHM_lh_new\fP(MEM,mem)"

.PP
Definition at line 2584 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(MEM,lh,out)"

.PP
Definition at line 2594 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(MEM,lh,out)"

.PP
Definition at line 2596 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_num_items(lh)   \fBLHM_lh_num_items\fP(MEM,lh)"

.PP
Definition at line 2592 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(MEM,lh,inst)"

.PP
Definition at line 2586 of file include/openssl/safestack\&.h\&.
.SS "#define lh_MEM_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(MEM,lh,out)"

.PP
Definition at line 2598 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBOBJ_NAME\fP,lh,inst)"

.PP
Definition at line 2604 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBOBJ_NAME\fP,lh,fn)"

.PP
Definition at line 2605 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBOBJ_NAME\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2606 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_down_load(lh)   \fBLHM_lh_down_load\fP(\fBOBJ_NAME\fP,lh)"

.PP
Definition at line 2610 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_error(lh)   \fBLHM_lh_error\fP(\fBOBJ_NAME\fP,lh)"

.PP
Definition at line 2608 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_free(lh)   \fBLHM_lh_free\fP(\fBOBJ_NAME\fP,lh)"

.PP
Definition at line 2617 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBOBJ_NAME\fP,lh,inst)"

.PP
Definition at line 2602 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_new()   \fBLHM_lh_new\fP(\fBOBJ_NAME\fP,obj_name)"

.PP
Definition at line 2601 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBOBJ_NAME\fP,lh,out)"

.PP
Definition at line 2611 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBOBJ_NAME\fP,lh,out)"

.PP
Definition at line 2613 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_num_items(lh)   \fBLHM_lh_num_items\fP(\fBOBJ_NAME\fP,lh)"

.PP
Definition at line 2609 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBOBJ_NAME\fP,lh,inst)"

.PP
Definition at line 2603 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OBJ_NAME_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBOBJ_NAME\fP,lh,out)"

.PP
Definition at line 2615 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBOPENSSL_CSTRING\fP,lh,inst)"

.PP
Definition at line 2621 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBOPENSSL_CSTRING\fP,lh,fn)"

.PP
Definition at line 2622 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBOPENSSL_CSTRING\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2623 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_down_load(lh)   \fBLHM_lh_down_load\fP(\fBOPENSSL_CSTRING\fP,lh)"

.PP
Definition at line 2627 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_error(lh)   \fBLHM_lh_error\fP(\fBOPENSSL_CSTRING\fP,lh)"

.PP
Definition at line 2625 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_free(lh)   \fBLHM_lh_free\fP(\fBOPENSSL_CSTRING\fP,lh)"

.PP
Definition at line 2634 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBOPENSSL_CSTRING\fP,lh,inst)"

.PP
Definition at line 2619 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_new()   \fBLHM_lh_new\fP(\fBOPENSSL_CSTRING\fP,openssl_cstring)"

.PP
Definition at line 2618 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBOPENSSL_CSTRING\fP,lh,out)"

.PP
Definition at line 2628 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBOPENSSL_CSTRING\fP,lh,out)"

.PP
Definition at line 2630 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_num_items(lh)   \fBLHM_lh_num_items\fP(\fBOPENSSL_CSTRING\fP,lh)"

.PP
Definition at line 2626 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBOPENSSL_CSTRING\fP,lh,inst)"

.PP
Definition at line 2620 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_CSTRING_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBOPENSSL_CSTRING\fP,lh,out)"

.PP
Definition at line 2632 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBOPENSSL_STRING\fP,lh,inst)"

.PP
Definition at line 2638 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBOPENSSL_STRING\fP,lh,fn)"

.PP
Definition at line 2639 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBOPENSSL_STRING\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2640 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_down_load(lh)   \fBLHM_lh_down_load\fP(\fBOPENSSL_STRING\fP,lh)"

.PP
Definition at line 2644 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_error(lh)   \fBLHM_lh_error\fP(\fBOPENSSL_STRING\fP,lh)"

.PP
Definition at line 2642 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_free(lh)   \fBLHM_lh_free\fP(\fBOPENSSL_STRING\fP,lh)"

.PP
Definition at line 2651 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBOPENSSL_STRING\fP,lh,inst)"

.PP
Definition at line 2636 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_new()   \fBLHM_lh_new\fP(\fBOPENSSL_STRING\fP,openssl_string)"

.PP
Definition at line 2635 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBOPENSSL_STRING\fP,lh,out)"

.PP
Definition at line 2645 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBOPENSSL_STRING\fP,lh,out)"

.PP
Definition at line 2647 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_num_items(lh)   \fBLHM_lh_num_items\fP(\fBOPENSSL_STRING\fP,lh)"

.PP
Definition at line 2643 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBOPENSSL_STRING\fP,lh,inst)"

.PP
Definition at line 2637 of file include/openssl/safestack\&.h\&.
.SS "#define lh_OPENSSL_STRING_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBOPENSSL_STRING\fP,lh,out)"

.PP
Definition at line 2649 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_delete(lh, inst)   \fBLHM_lh_delete\fP(\fBSSL_SESSION\fP,lh,inst)"

.PP
Definition at line 2655 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_doall(lh, fn)   \fBLHM_lh_doall\fP(\fBSSL_SESSION\fP,lh,fn)"

.PP
Definition at line 2656 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_doall_arg(lh, fn, arg_type, arg)   \fBLHM_lh_doall_arg\fP(\fBSSL_SESSION\fP,lh,fn,arg_type,arg)"

.PP
Definition at line 2657 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_down_load(lh)   \fBLHM_lh_down_load\fP(\fBSSL_SESSION\fP,lh)"

.PP
Definition at line 2661 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_error(lh)   \fBLHM_lh_error\fP(\fBSSL_SESSION\fP,lh)"

.PP
Definition at line 2659 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_free(lh)   \fBLHM_lh_free\fP(\fBSSL_SESSION\fP,lh)"

.PP
Definition at line 2668 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_insert(lh, inst)   \fBLHM_lh_insert\fP(\fBSSL_SESSION\fP,lh,inst)"

.PP
Definition at line 2653 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_new()   \fBLHM_lh_new\fP(\fBSSL_SESSION\fP,ssl_session)"

.PP
Definition at line 2652 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_node_stats_bio(lh, out)   \fBLHM_lh_node_stats_bio\fP(\fBSSL_SESSION\fP,lh,out)"

.PP
Definition at line 2662 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_node_usage_stats_bio(lh, out)   \fBLHM_lh_node_usage_stats_bio\fP(\fBSSL_SESSION\fP,lh,out)"

.PP
Definition at line 2664 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_num_items(lh)   \fBLHM_lh_num_items\fP(\fBSSL_SESSION\fP,lh)"

.PP
Definition at line 2660 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_retrieve(lh, inst)   \fBLHM_lh_retrieve\fP(\fBSSL_SESSION\fP,lh,inst)"

.PP
Definition at line 2654 of file include/openssl/safestack\&.h\&.
.SS "#define lh_SSL_SESSION_stats_bio(lh, out)   \fBLHM_lh_stats_bio\fP(\fBSSL_SESSION\fP,lh,out)"

.PP
Definition at line 2666 of file include/openssl/safestack\&.h\&.
.SS "#define PKCS12_decrypt_d2i_PKCS12_SAFEBAG(algor, d2i_func, \fBfree_func\fP, \fBpass\fP, \fBpasslen\fP, oct, seq)   \fBSKM_PKCS12_decrypt_d2i\fP(\fBPKCS12_SAFEBAG\fP, (algor), (d2i_func), (\fBfree_func\fP), (\fBpass\fP), (\fBpasslen\fP), (oct), (seq))"

.PP
Definition at line 2444 of file include/openssl/safestack\&.h\&.
.SS "#define PKCS12_decrypt_d2i_PKCS7(algor, d2i_func, \fBfree_func\fP, \fBpass\fP, \fBpasslen\fP, oct, seq)   \fBSKM_PKCS12_decrypt_d2i\fP(\fBPKCS7\fP, (algor), (d2i_func), (\fBfree_func\fP), (\fBpass\fP), (\fBpasslen\fP), (oct), (seq))"

.PP
Definition at line 2446 of file include/openssl/safestack\&.h\&.
.SS "#define PREDECLARE_STACK_OF(\fBtype\fP)   \fBSTACK_OF\fP(\fBtype\fP);"

.PP
Definition at line 89 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBACCESS_DESCRIPTION\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 231 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_delete(st, i)   \fBSKM_sk_delete\fP(\fBACCESS_DESCRIPTION\fP, (st), (i))"

.PP
Definition at line 225 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBACCESS_DESCRIPTION\fP, (st), (ptr))"

.PP
Definition at line 226 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_dup(st)   \fBSKM_sk_dup\fP(\fBACCESS_DESCRIPTION\fP, st)"

.PP
Definition at line 229 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_find(st, val)   \fBSKM_sk_find\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"

.PP
Definition at line 223 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"

.PP
Definition at line 224 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_free(st)   \fBSKM_sk_free\fP(\fBACCESS_DESCRIPTION\fP, (st))"

.PP
Definition at line 216 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBACCESS_DESCRIPTION\fP, (st), (val), (i))"

.PP
Definition at line 227 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBACCESS_DESCRIPTION\fP, (st))"

.PP
Definition at line 235 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_new(cmp)   \fBSKM_sk_new\fP(\fBACCESS_DESCRIPTION\fP, (cmp))"

.PP
Definition at line 214 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_new_null()   \fBSKM_sk_new_null\fP(\fBACCESS_DESCRIPTION\fP)"

.PP
Definition at line 215 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_num(st)   \fBSKM_sk_num\fP(\fBACCESS_DESCRIPTION\fP, (st))"

.PP
Definition at line 217 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_pop(st)   \fBSKM_sk_pop\fP(\fBACCESS_DESCRIPTION\fP, (st))"

.PP
Definition at line 233 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBACCESS_DESCRIPTION\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 230 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_push(st, val)   \fBSKM_sk_push\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"

.PP
Definition at line 221 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_set(st, i, val)   \fBSKM_sk_set\fP(\fBACCESS_DESCRIPTION\fP, (st), (i), (val))"

.PP
Definition at line 219 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBACCESS_DESCRIPTION\fP, (st), (cmp))"

.PP
Definition at line 228 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_shift(st)   \fBSKM_sk_shift\fP(\fBACCESS_DESCRIPTION\fP, (st))"

.PP
Definition at line 232 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_sort(st)   \fBSKM_sk_sort\fP(\fBACCESS_DESCRIPTION\fP, (st))"

.PP
Definition at line 234 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBACCESS_DESCRIPTION\fP, (st), (val))"

.PP
Definition at line 222 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_value(st, i)   \fBSKM_sk_value\fP(\fBACCESS_DESCRIPTION\fP, (st), (i))"

.PP
Definition at line 218 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ACCESS_DESCRIPTION_zero(st)   \fBSKM_sk_zero\fP(\fBACCESS_DESCRIPTION\fP, (st))"

.PP
Definition at line 220 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASIdOrRange\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 253 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_delete(st, i)   \fBSKM_sk_delete\fP(\fBASIdOrRange\fP, (st), (i))"

.PP
Definition at line 247 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASIdOrRange\fP, (st), (ptr))"

.PP
Definition at line 248 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_dup(st)   \fBSKM_sk_dup\fP(\fBASIdOrRange\fP, st)"

.PP
Definition at line 251 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_find(st, val)   \fBSKM_sk_find\fP(\fBASIdOrRange\fP, (st), (val))"

.PP
Definition at line 245 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASIdOrRange\fP, (st), (val))"

.PP
Definition at line 246 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_free(st)   \fBSKM_sk_free\fP(\fBASIdOrRange\fP, (st))"

.PP
Definition at line 238 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASIdOrRange\fP, (st), (val), (i))"

.PP
Definition at line 249 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASIdOrRange\fP, (st))"

.PP
Definition at line 257 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_new(cmp)   \fBSKM_sk_new\fP(\fBASIdOrRange\fP, (cmp))"

.PP
Definition at line 236 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_new_null()   \fBSKM_sk_new_null\fP(\fBASIdOrRange\fP)"

.PP
Definition at line 237 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_num(st)   \fBSKM_sk_num\fP(\fBASIdOrRange\fP, (st))"

.PP
Definition at line 239 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_pop(st)   \fBSKM_sk_pop\fP(\fBASIdOrRange\fP, (st))"

.PP
Definition at line 255 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASIdOrRange\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 252 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_push(st, val)   \fBSKM_sk_push\fP(\fBASIdOrRange\fP, (st), (val))"

.PP
Definition at line 243 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_set(st, i, val)   \fBSKM_sk_set\fP(\fBASIdOrRange\fP, (st), (i), (val))"

.PP
Definition at line 241 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASIdOrRange\fP, (st), (cmp))"

.PP
Definition at line 250 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_shift(st)   \fBSKM_sk_shift\fP(\fBASIdOrRange\fP, (st))"

.PP
Definition at line 254 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_sort(st)   \fBSKM_sk_sort\fP(\fBASIdOrRange\fP, (st))"

.PP
Definition at line 256 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASIdOrRange\fP, (st), (val))"

.PP
Definition at line 244 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_value(st, i)   \fBSKM_sk_value\fP(\fBASIdOrRange\fP, (st), (i))"

.PP
Definition at line 240 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASIdOrRange_zero(st)   \fBSKM_sk_zero\fP(\fBASIdOrRange\fP, (st))"

.PP
Definition at line 242 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_GENERALSTRING\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 275 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_delete(st, i)   \fBSKM_sk_delete\fP(\fBASN1_GENERALSTRING\fP, (st), (i))"

.PP
Definition at line 269 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_GENERALSTRING\fP, (st), (ptr))"

.PP
Definition at line 270 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_dup(st)   \fBSKM_sk_dup\fP(\fBASN1_GENERALSTRING\fP, st)"

.PP
Definition at line 273 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_find(st, val)   \fBSKM_sk_find\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"

.PP
Definition at line 267 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"

.PP
Definition at line 268 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_free(st)   \fBSKM_sk_free\fP(\fBASN1_GENERALSTRING\fP, (st))"

.PP
Definition at line 260 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASN1_GENERALSTRING\fP, (st), (val), (i))"

.PP
Definition at line 271 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_GENERALSTRING\fP, (st))"

.PP
Definition at line 279 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_new(cmp)   \fBSKM_sk_new\fP(\fBASN1_GENERALSTRING\fP, (cmp))"

.PP
Definition at line 258 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_new_null()   \fBSKM_sk_new_null\fP(\fBASN1_GENERALSTRING\fP)"

.PP
Definition at line 259 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_num(st)   \fBSKM_sk_num\fP(\fBASN1_GENERALSTRING\fP, (st))"

.PP
Definition at line 261 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_pop(st)   \fBSKM_sk_pop\fP(\fBASN1_GENERALSTRING\fP, (st))"

.PP
Definition at line 277 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_GENERALSTRING\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 274 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_push(st, val)   \fBSKM_sk_push\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"

.PP
Definition at line 265 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_set(st, i, val)   \fBSKM_sk_set\fP(\fBASN1_GENERALSTRING\fP, (st), (i), (val))"

.PP
Definition at line 263 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_GENERALSTRING\fP, (st), (cmp))"

.PP
Definition at line 272 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_shift(st)   \fBSKM_sk_shift\fP(\fBASN1_GENERALSTRING\fP, (st))"

.PP
Definition at line 276 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_sort(st)   \fBSKM_sk_sort\fP(\fBASN1_GENERALSTRING\fP, (st))"

.PP
Definition at line 278 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASN1_GENERALSTRING\fP, (st), (val))"

.PP
Definition at line 266 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_value(st, i)   \fBSKM_sk_value\fP(\fBASN1_GENERALSTRING\fP, (st), (i))"

.PP
Definition at line 262 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_GENERALSTRING_zero(st)   \fBSKM_sk_zero\fP(\fBASN1_GENERALSTRING\fP, (st))"

.PP
Definition at line 264 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_INTEGER\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 297 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_delete(st, i)   \fBSKM_sk_delete\fP(\fBASN1_INTEGER\fP, (st), (i))"

.PP
Definition at line 291 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_INTEGER\fP, (st), (ptr))"

.PP
Definition at line 292 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_dup(st)   \fBSKM_sk_dup\fP(\fBASN1_INTEGER\fP, st)"

.PP
Definition at line 295 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_find(st, val)   \fBSKM_sk_find\fP(\fBASN1_INTEGER\fP, (st), (val))"

.PP
Definition at line 289 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASN1_INTEGER\fP, (st), (val))"

.PP
Definition at line 290 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_free(st)   \fBSKM_sk_free\fP(\fBASN1_INTEGER\fP, (st))"

.PP
Definition at line 282 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASN1_INTEGER\fP, (st), (val), (i))"

.PP
Definition at line 293 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_INTEGER\fP, (st))"

.PP
Definition at line 301 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_new(cmp)   \fBSKM_sk_new\fP(\fBASN1_INTEGER\fP, (cmp))"

.PP
Definition at line 280 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_new_null()   \fBSKM_sk_new_null\fP(\fBASN1_INTEGER\fP)"

.PP
Definition at line 281 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_num(st)   \fBSKM_sk_num\fP(\fBASN1_INTEGER\fP, (st))"

.PP
Definition at line 283 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_pop(st)   \fBSKM_sk_pop\fP(\fBASN1_INTEGER\fP, (st))"

.PP
Definition at line 299 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_INTEGER\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 296 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_push(st, val)   \fBSKM_sk_push\fP(\fBASN1_INTEGER\fP, (st), (val))"

.PP
Definition at line 287 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_set(st, i, val)   \fBSKM_sk_set\fP(\fBASN1_INTEGER\fP, (st), (i), (val))"

.PP
Definition at line 285 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_INTEGER\fP, (st), (cmp))"

.PP
Definition at line 294 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_shift(st)   \fBSKM_sk_shift\fP(\fBASN1_INTEGER\fP, (st))"

.PP
Definition at line 298 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_sort(st)   \fBSKM_sk_sort\fP(\fBASN1_INTEGER\fP, (st))"

.PP
Definition at line 300 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASN1_INTEGER\fP, (st), (val))"

.PP
Definition at line 288 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_value(st, i)   \fBSKM_sk_value\fP(\fBASN1_INTEGER\fP, (st), (i))"

.PP
Definition at line 284 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_INTEGER_zero(st)   \fBSKM_sk_zero\fP(\fBASN1_INTEGER\fP, (st))"

.PP
Definition at line 286 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_OBJECT\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 319 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_delete(st, i)   \fBSKM_sk_delete\fP(\fBASN1_OBJECT\fP, (st), (i))"

.PP
Definition at line 313 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_OBJECT\fP, (st), (ptr))"

.PP
Definition at line 314 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_dup(st)   \fBSKM_sk_dup\fP(\fBASN1_OBJECT\fP, st)"

.PP
Definition at line 317 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_find(st, val)   \fBSKM_sk_find\fP(\fBASN1_OBJECT\fP, (st), (val))"

.PP
Definition at line 311 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASN1_OBJECT\fP, (st), (val))"

.PP
Definition at line 312 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_free(st)   \fBSKM_sk_free\fP(\fBASN1_OBJECT\fP, (st))"

.PP
Definition at line 304 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASN1_OBJECT\fP, (st), (val), (i))"

.PP
Definition at line 315 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_OBJECT\fP, (st))"

.PP
Definition at line 323 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_new(cmp)   \fBSKM_sk_new\fP(\fBASN1_OBJECT\fP, (cmp))"

.PP
Definition at line 302 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_new_null()   \fBSKM_sk_new_null\fP(\fBASN1_OBJECT\fP)"

.PP
Definition at line 303 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_num(st)   \fBSKM_sk_num\fP(\fBASN1_OBJECT\fP, (st))"

.PP
Definition at line 305 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_pop(st)   \fBSKM_sk_pop\fP(\fBASN1_OBJECT\fP, (st))"

.PP
Definition at line 321 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_OBJECT\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 318 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_push(st, val)   \fBSKM_sk_push\fP(\fBASN1_OBJECT\fP, (st), (val))"

.PP
Definition at line 309 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_set(st, i, val)   \fBSKM_sk_set\fP(\fBASN1_OBJECT\fP, (st), (i), (val))"

.PP
Definition at line 307 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_OBJECT\fP, (st), (cmp))"

.PP
Definition at line 316 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_shift(st)   \fBSKM_sk_shift\fP(\fBASN1_OBJECT\fP, (st))"

.PP
Definition at line 320 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_sort(st)   \fBSKM_sk_sort\fP(\fBASN1_OBJECT\fP, (st))"

.PP
Definition at line 322 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASN1_OBJECT\fP, (st), (val))"

.PP
Definition at line 310 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_value(st, i)   \fBSKM_sk_value\fP(\fBASN1_OBJECT\fP, (st), (i))"

.PP
Definition at line 306 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_OBJECT_zero(st)   \fBSKM_sk_zero\fP(\fBASN1_OBJECT\fP, (st))"

.PP
Definition at line 308 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_STRING_TABLE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 341 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_delete(st, i)   \fBSKM_sk_delete\fP(\fBASN1_STRING_TABLE\fP, (st), (i))"

.PP
Definition at line 335 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_STRING_TABLE\fP, (st), (ptr))"

.PP
Definition at line 336 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_dup(st)   \fBSKM_sk_dup\fP(\fBASN1_STRING_TABLE\fP, st)"

.PP
Definition at line 339 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_find(st, val)   \fBSKM_sk_find\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"

.PP
Definition at line 333 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"

.PP
Definition at line 334 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_free(st)   \fBSKM_sk_free\fP(\fBASN1_STRING_TABLE\fP, (st))"

.PP
Definition at line 326 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASN1_STRING_TABLE\fP, (st), (val), (i))"

.PP
Definition at line 337 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_STRING_TABLE\fP, (st))"

.PP
Definition at line 345 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_new(cmp)   \fBSKM_sk_new\fP(\fBASN1_STRING_TABLE\fP, (cmp))"

.PP
Definition at line 324 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_new_null()   \fBSKM_sk_new_null\fP(\fBASN1_STRING_TABLE\fP)"

.PP
Definition at line 325 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_num(st)   \fBSKM_sk_num\fP(\fBASN1_STRING_TABLE\fP, (st))"

.PP
Definition at line 327 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_pop(st)   \fBSKM_sk_pop\fP(\fBASN1_STRING_TABLE\fP, (st))"

.PP
Definition at line 343 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_STRING_TABLE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 340 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_push(st, val)   \fBSKM_sk_push\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"

.PP
Definition at line 331 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_set(st, i, val)   \fBSKM_sk_set\fP(\fBASN1_STRING_TABLE\fP, (st), (i), (val))"

.PP
Definition at line 329 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_STRING_TABLE\fP, (st), (cmp))"

.PP
Definition at line 338 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_shift(st)   \fBSKM_sk_shift\fP(\fBASN1_STRING_TABLE\fP, (st))"

.PP
Definition at line 342 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_sort(st)   \fBSKM_sk_sort\fP(\fBASN1_STRING_TABLE\fP, (st))"

.PP
Definition at line 344 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASN1_STRING_TABLE\fP, (st), (val))"

.PP
Definition at line 332 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_value(st, i)   \fBSKM_sk_value\fP(\fBASN1_STRING_TABLE\fP, (st), (i))"

.PP
Definition at line 328 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_STRING_TABLE_zero(st)   \fBSKM_sk_zero\fP(\fBASN1_STRING_TABLE\fP, (st))"

.PP
Definition at line 330 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_TYPE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 363 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_delete(st, i)   \fBSKM_sk_delete\fP(\fBASN1_TYPE\fP, (st), (i))"

.PP
Definition at line 357 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_TYPE\fP, (st), (ptr))"

.PP
Definition at line 358 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_dup(st)   \fBSKM_sk_dup\fP(\fBASN1_TYPE\fP, st)"

.PP
Definition at line 361 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_find(st, val)   \fBSKM_sk_find\fP(\fBASN1_TYPE\fP, (st), (val))"

.PP
Definition at line 355 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASN1_TYPE\fP, (st), (val))"

.PP
Definition at line 356 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_free(st)   \fBSKM_sk_free\fP(\fBASN1_TYPE\fP, (st))"

.PP
Definition at line 348 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASN1_TYPE\fP, (st), (val), (i))"

.PP
Definition at line 359 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_TYPE\fP, (st))"

.PP
Definition at line 367 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_new(cmp)   \fBSKM_sk_new\fP(\fBASN1_TYPE\fP, (cmp))"

.PP
Definition at line 346 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_new_null()   \fBSKM_sk_new_null\fP(\fBASN1_TYPE\fP)"

.PP
Definition at line 347 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_num(st)   \fBSKM_sk_num\fP(\fBASN1_TYPE\fP, (st))"

.PP
Definition at line 349 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_pop(st)   \fBSKM_sk_pop\fP(\fBASN1_TYPE\fP, (st))"

.PP
Definition at line 365 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_TYPE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 362 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_push(st, val)   \fBSKM_sk_push\fP(\fBASN1_TYPE\fP, (st), (val))"

.PP
Definition at line 353 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_set(st, i, val)   \fBSKM_sk_set\fP(\fBASN1_TYPE\fP, (st), (i), (val))"

.PP
Definition at line 351 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_TYPE\fP, (st), (cmp))"

.PP
Definition at line 360 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_shift(st)   \fBSKM_sk_shift\fP(\fBASN1_TYPE\fP, (st))"

.PP
Definition at line 364 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_sort(st)   \fBSKM_sk_sort\fP(\fBASN1_TYPE\fP, (st))"

.PP
Definition at line 366 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASN1_TYPE\fP, (st), (val))"

.PP
Definition at line 354 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_value(st, i)   \fBSKM_sk_value\fP(\fBASN1_TYPE\fP, (st), (i))"

.PP
Definition at line 350 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_TYPE_zero(st)   \fBSKM_sk_zero\fP(\fBASN1_TYPE\fP, (st))"

.PP
Definition at line 352 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_UTF8STRING\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 385 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_delete(st, i)   \fBSKM_sk_delete\fP(\fBASN1_UTF8STRING\fP, (st), (i))"

.PP
Definition at line 379 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_UTF8STRING\fP, (st), (ptr))"

.PP
Definition at line 380 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_dup(st)   \fBSKM_sk_dup\fP(\fBASN1_UTF8STRING\fP, st)"

.PP
Definition at line 383 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_find(st, val)   \fBSKM_sk_find\fP(\fBASN1_UTF8STRING\fP, (st), (val))"

.PP
Definition at line 377 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASN1_UTF8STRING\fP, (st), (val))"

.PP
Definition at line 378 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_free(st)   \fBSKM_sk_free\fP(\fBASN1_UTF8STRING\fP, (st))"

.PP
Definition at line 370 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASN1_UTF8STRING\fP, (st), (val), (i))"

.PP
Definition at line 381 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_UTF8STRING\fP, (st))"

.PP
Definition at line 389 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_new(cmp)   \fBSKM_sk_new\fP(\fBASN1_UTF8STRING\fP, (cmp))"

.PP
Definition at line 368 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_new_null()   \fBSKM_sk_new_null\fP(\fBASN1_UTF8STRING\fP)"

.PP
Definition at line 369 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_num(st)   \fBSKM_sk_num\fP(\fBASN1_UTF8STRING\fP, (st))"

.PP
Definition at line 371 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_pop(st)   \fBSKM_sk_pop\fP(\fBASN1_UTF8STRING\fP, (st))"

.PP
Definition at line 387 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_UTF8STRING\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 384 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_push(st, val)   \fBSKM_sk_push\fP(\fBASN1_UTF8STRING\fP, (st), (val))"

.PP
Definition at line 375 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_set(st, i, val)   \fBSKM_sk_set\fP(\fBASN1_UTF8STRING\fP, (st), (i), (val))"

.PP
Definition at line 373 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_UTF8STRING\fP, (st), (cmp))"

.PP
Definition at line 382 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_shift(st)   \fBSKM_sk_shift\fP(\fBASN1_UTF8STRING\fP, (st))"

.PP
Definition at line 386 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_sort(st)   \fBSKM_sk_sort\fP(\fBASN1_UTF8STRING\fP, (st))"

.PP
Definition at line 388 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASN1_UTF8STRING\fP, (st), (val))"

.PP
Definition at line 376 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_value(st, i)   \fBSKM_sk_value\fP(\fBASN1_UTF8STRING\fP, (st), (i))"

.PP
Definition at line 372 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_UTF8STRING_zero(st)   \fBSKM_sk_zero\fP(\fBASN1_UTF8STRING\fP, (st))"

.PP
Definition at line 374 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBASN1_VALUE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 407 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_delete(st, i)   \fBSKM_sk_delete\fP(\fBASN1_VALUE\fP, (st), (i))"

.PP
Definition at line 401 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBASN1_VALUE\fP, (st), (ptr))"

.PP
Definition at line 402 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_dup(st)   \fBSKM_sk_dup\fP(\fBASN1_VALUE\fP, st)"

.PP
Definition at line 405 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_find(st, val)   \fBSKM_sk_find\fP(\fBASN1_VALUE\fP, (st), (val))"

.PP
Definition at line 399 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBASN1_VALUE\fP, (st), (val))"

.PP
Definition at line 400 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_free(st)   \fBSKM_sk_free\fP(\fBASN1_VALUE\fP, (st))"

.PP
Definition at line 392 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBASN1_VALUE\fP, (st), (val), (i))"

.PP
Definition at line 403 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBASN1_VALUE\fP, (st))"

.PP
Definition at line 411 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_new(cmp)   \fBSKM_sk_new\fP(\fBASN1_VALUE\fP, (cmp))"

.PP
Definition at line 390 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_new_null()   \fBSKM_sk_new_null\fP(\fBASN1_VALUE\fP)"

.PP
Definition at line 391 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_num(st)   \fBSKM_sk_num\fP(\fBASN1_VALUE\fP, (st))"

.PP
Definition at line 393 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_pop(st)   \fBSKM_sk_pop\fP(\fBASN1_VALUE\fP, (st))"

.PP
Definition at line 409 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBASN1_VALUE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 406 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_push(st, val)   \fBSKM_sk_push\fP(\fBASN1_VALUE\fP, (st), (val))"

.PP
Definition at line 397 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_set(st, i, val)   \fBSKM_sk_set\fP(\fBASN1_VALUE\fP, (st), (i), (val))"

.PP
Definition at line 395 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBASN1_VALUE\fP, (st), (cmp))"

.PP
Definition at line 404 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_shift(st)   \fBSKM_sk_shift\fP(\fBASN1_VALUE\fP, (st))"

.PP
Definition at line 408 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_sort(st)   \fBSKM_sk_sort\fP(\fBASN1_VALUE\fP, (st))"

.PP
Definition at line 410 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBASN1_VALUE\fP, (st), (val))"

.PP
Definition at line 398 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_value(st, i)   \fBSKM_sk_value\fP(\fBASN1_VALUE\fP, (st), (i))"

.PP
Definition at line 394 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ASN1_VALUE_zero(st)   \fBSKM_sk_zero\fP(\fBASN1_VALUE\fP, (st))"

.PP
Definition at line 396 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBBIO\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 429 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_delete(st, i)   \fBSKM_sk_delete\fP(\fBBIO\fP, (st), (i))"

.PP
Definition at line 423 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBBIO\fP, (st), (ptr))"

.PP
Definition at line 424 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_dup(st)   \fBSKM_sk_dup\fP(\fBBIO\fP, st)"

.PP
Definition at line 427 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_find(st, val)   \fBSKM_sk_find\fP(\fBBIO\fP, (st), (val))"

.PP
Definition at line 421 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBBIO\fP, (st), (val))"

.PP
Definition at line 422 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_free(st)   \fBSKM_sk_free\fP(\fBBIO\fP, (st))"

.PP
Definition at line 414 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBBIO\fP, (st), (val), (i))"

.PP
Definition at line 425 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBBIO\fP, (st))"

.PP
Definition at line 433 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_new(cmp)   \fBSKM_sk_new\fP(\fBBIO\fP, (cmp))"

.PP
Definition at line 412 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_new_null()   \fBSKM_sk_new_null\fP(\fBBIO\fP)"

.PP
Definition at line 413 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_num(st)   \fBSKM_sk_num\fP(\fBBIO\fP, (st))"

.PP
Definition at line 415 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_pop(st)   \fBSKM_sk_pop\fP(\fBBIO\fP, (st))"

.PP
Definition at line 431 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBBIO\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 428 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_push(st, val)   \fBSKM_sk_push\fP(\fBBIO\fP, (st), (val))"

.PP
Definition at line 419 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_set(st, i, val)   \fBSKM_sk_set\fP(\fBBIO\fP, (st), (i), (val))"

.PP
Definition at line 417 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBBIO\fP, (st), (cmp))"

.PP
Definition at line 426 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_shift(st)   \fBSKM_sk_shift\fP(\fBBIO\fP, (st))"

.PP
Definition at line 430 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_sort(st)   \fBSKM_sk_sort\fP(\fBBIO\fP, (st))"

.PP
Definition at line 432 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBBIO\fP, (st), (val))"

.PP
Definition at line 420 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_value(st, i)   \fBSKM_sk_value\fP(\fBBIO\fP, (st), (i))"

.PP
Definition at line 416 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BIO_zero(st)   \fBSKM_sk_zero\fP(\fBBIO\fP, (st))"

.PP
Definition at line 418 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(BY_DIR_ENTRY, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 451 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_delete(st, i)   \fBSKM_sk_delete\fP(BY_DIR_ENTRY, (st), (i))"

.PP
Definition at line 445 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(BY_DIR_ENTRY, (st), (ptr))"

.PP
Definition at line 446 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_dup(st)   \fBSKM_sk_dup\fP(BY_DIR_ENTRY, st)"

.PP
Definition at line 449 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_find(st, val)   \fBSKM_sk_find\fP(BY_DIR_ENTRY, (st), (val))"

.PP
Definition at line 443 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_find_ex(st, val)   \fBSKM_sk_find_ex\fP(BY_DIR_ENTRY, (st), (val))"

.PP
Definition at line 444 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_free(st)   \fBSKM_sk_free\fP(BY_DIR_ENTRY, (st))"

.PP
Definition at line 436 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_insert(st, val, i)   \fBSKM_sk_insert\fP(BY_DIR_ENTRY, (st), (val), (i))"

.PP
Definition at line 447 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_is_sorted(st)   \fBSKM_sk_is_sorted\fP(BY_DIR_ENTRY, (st))"

.PP
Definition at line 455 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_new(cmp)   \fBSKM_sk_new\fP(BY_DIR_ENTRY, (cmp))"

.PP
Definition at line 434 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_new_null()   \fBSKM_sk_new_null\fP(BY_DIR_ENTRY)"

.PP
Definition at line 435 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_num(st)   \fBSKM_sk_num\fP(BY_DIR_ENTRY, (st))"

.PP
Definition at line 437 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_pop(st)   \fBSKM_sk_pop\fP(BY_DIR_ENTRY, (st))"

.PP
Definition at line 453 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(BY_DIR_ENTRY, (st), (\fBfree_func\fP))"

.PP
Definition at line 450 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_push(st, val)   \fBSKM_sk_push\fP(BY_DIR_ENTRY, (st), (val))"

.PP
Definition at line 441 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_set(st, i, val)   \fBSKM_sk_set\fP(BY_DIR_ENTRY, (st), (i), (val))"

.PP
Definition at line 439 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(BY_DIR_ENTRY, (st), (cmp))"

.PP
Definition at line 448 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_shift(st)   \fBSKM_sk_shift\fP(BY_DIR_ENTRY, (st))"

.PP
Definition at line 452 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_sort(st)   \fBSKM_sk_sort\fP(BY_DIR_ENTRY, (st))"

.PP
Definition at line 454 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_unshift(st, val)   \fBSKM_sk_unshift\fP(BY_DIR_ENTRY, (st), (val))"

.PP
Definition at line 442 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_value(st, i)   \fBSKM_sk_value\fP(BY_DIR_ENTRY, (st), (i))"

.PP
Definition at line 438 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_ENTRY_zero(st)   \fBSKM_sk_zero\fP(BY_DIR_ENTRY, (st))"

.PP
Definition at line 440 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(BY_DIR_HASH, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 473 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_delete(st, i)   \fBSKM_sk_delete\fP(BY_DIR_HASH, (st), (i))"

.PP
Definition at line 467 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(BY_DIR_HASH, (st), (ptr))"

.PP
Definition at line 468 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_dup(st)   \fBSKM_sk_dup\fP(BY_DIR_HASH, st)"

.PP
Definition at line 471 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_find(st, val)   \fBSKM_sk_find\fP(BY_DIR_HASH, (st), (val))"

.PP
Definition at line 465 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_find_ex(st, val)   \fBSKM_sk_find_ex\fP(BY_DIR_HASH, (st), (val))"

.PP
Definition at line 466 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_free(st)   \fBSKM_sk_free\fP(BY_DIR_HASH, (st))"

.PP
Definition at line 458 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_insert(st, val, i)   \fBSKM_sk_insert\fP(BY_DIR_HASH, (st), (val), (i))"

.PP
Definition at line 469 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_is_sorted(st)   \fBSKM_sk_is_sorted\fP(BY_DIR_HASH, (st))"

.PP
Definition at line 477 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_new(cmp)   \fBSKM_sk_new\fP(BY_DIR_HASH, (cmp))"

.PP
Definition at line 456 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_new_null()   \fBSKM_sk_new_null\fP(BY_DIR_HASH)"

.PP
Definition at line 457 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_num(st)   \fBSKM_sk_num\fP(BY_DIR_HASH, (st))"

.PP
Definition at line 459 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_pop(st)   \fBSKM_sk_pop\fP(BY_DIR_HASH, (st))"

.PP
Definition at line 475 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(BY_DIR_HASH, (st), (\fBfree_func\fP))"

.PP
Definition at line 472 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_push(st, val)   \fBSKM_sk_push\fP(BY_DIR_HASH, (st), (val))"

.PP
Definition at line 463 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_set(st, i, val)   \fBSKM_sk_set\fP(BY_DIR_HASH, (st), (i), (val))"

.PP
Definition at line 461 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(BY_DIR_HASH, (st), (cmp))"

.PP
Definition at line 470 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_shift(st)   \fBSKM_sk_shift\fP(BY_DIR_HASH, (st))"

.PP
Definition at line 474 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_sort(st)   \fBSKM_sk_sort\fP(BY_DIR_HASH, (st))"

.PP
Definition at line 476 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_unshift(st, val)   \fBSKM_sk_unshift\fP(BY_DIR_HASH, (st), (val))"

.PP
Definition at line 464 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_value(st, i)   \fBSKM_sk_value\fP(BY_DIR_HASH, (st), (i))"

.PP
Definition at line 460 of file include/openssl/safestack\&.h\&.
.SS "#define sk_BY_DIR_HASH_zero(st)   \fBSKM_sk_zero\fP(BY_DIR_HASH, (st))"

.PP
Definition at line 462 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_CertificateChoices\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 495 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_delete(st, i)   \fBSKM_sk_delete\fP(\fBCMS_CertificateChoices\fP, (st), (i))"

.PP
Definition at line 489 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_CertificateChoices\fP, (st), (ptr))"

.PP
Definition at line 490 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_dup(st)   \fBSKM_sk_dup\fP(\fBCMS_CertificateChoices\fP, st)"

.PP
Definition at line 493 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_find(st, val)   \fBSKM_sk_find\fP(\fBCMS_CertificateChoices\fP, (st), (val))"

.PP
Definition at line 487 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCMS_CertificateChoices\fP, (st), (val))"

.PP
Definition at line 488 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_free(st)   \fBSKM_sk_free\fP(\fBCMS_CertificateChoices\fP, (st))"

.PP
Definition at line 480 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCMS_CertificateChoices\fP, (st), (val), (i))"

.PP
Definition at line 491 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_CertificateChoices\fP, (st))"

.PP
Definition at line 499 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_new(cmp)   \fBSKM_sk_new\fP(\fBCMS_CertificateChoices\fP, (cmp))"

.PP
Definition at line 478 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_new_null()   \fBSKM_sk_new_null\fP(\fBCMS_CertificateChoices\fP)"

.PP
Definition at line 479 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_num(st)   \fBSKM_sk_num\fP(\fBCMS_CertificateChoices\fP, (st))"

.PP
Definition at line 481 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_pop(st)   \fBSKM_sk_pop\fP(\fBCMS_CertificateChoices\fP, (st))"

.PP
Definition at line 497 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_CertificateChoices\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 494 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_push(st, val)   \fBSKM_sk_push\fP(\fBCMS_CertificateChoices\fP, (st), (val))"

.PP
Definition at line 485 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_set(st, i, val)   \fBSKM_sk_set\fP(\fBCMS_CertificateChoices\fP, (st), (i), (val))"

.PP
Definition at line 483 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_CertificateChoices\fP, (st), (cmp))"

.PP
Definition at line 492 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_shift(st)   \fBSKM_sk_shift\fP(\fBCMS_CertificateChoices\fP, (st))"

.PP
Definition at line 496 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_sort(st)   \fBSKM_sk_sort\fP(\fBCMS_CertificateChoices\fP, (st))"

.PP
Definition at line 498 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCMS_CertificateChoices\fP, (st), (val))"

.PP
Definition at line 486 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_value(st, i)   \fBSKM_sk_value\fP(\fBCMS_CertificateChoices\fP, (st), (i))"

.PP
Definition at line 482 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_CertificateChoices_zero(st)   \fBSKM_sk_zero\fP(\fBCMS_CertificateChoices\fP, (st))"

.PP
Definition at line 484 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 517 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_delete(st, i)   \fBSKM_sk_delete\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (i))"

.PP
Definition at line 511 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (ptr))"

.PP
Definition at line 512 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_dup(st)   \fBSKM_sk_dup\fP(\fBCMS_RecipientEncryptedKey\fP, st)"

.PP
Definition at line 515 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_find(st, val)   \fBSKM_sk_find\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"

.PP
Definition at line 509 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"

.PP
Definition at line 510 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_free(st)   \fBSKM_sk_free\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"

.PP
Definition at line 502 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val), (i))"

.PP
Definition at line 513 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"

.PP
Definition at line 521 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_new(cmp)   \fBSKM_sk_new\fP(\fBCMS_RecipientEncryptedKey\fP, (cmp))"

.PP
Definition at line 500 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_new_null()   \fBSKM_sk_new_null\fP(\fBCMS_RecipientEncryptedKey\fP)"

.PP
Definition at line 501 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_num(st)   \fBSKM_sk_num\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"

.PP
Definition at line 503 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_pop(st)   \fBSKM_sk_pop\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"

.PP
Definition at line 519 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 516 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_push(st, val)   \fBSKM_sk_push\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"

.PP
Definition at line 507 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_set(st, i, val)   \fBSKM_sk_set\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (i), (val))"

.PP
Definition at line 505 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (cmp))"

.PP
Definition at line 514 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_shift(st)   \fBSKM_sk_shift\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"

.PP
Definition at line 518 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_sort(st)   \fBSKM_sk_sort\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"

.PP
Definition at line 520 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (val))"

.PP
Definition at line 508 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_value(st, i)   \fBSKM_sk_value\fP(\fBCMS_RecipientEncryptedKey\fP, (st), (i))"

.PP
Definition at line 504 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientEncryptedKey_zero(st)   \fBSKM_sk_zero\fP(\fBCMS_RecipientEncryptedKey\fP, (st))"

.PP
Definition at line 506 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_RecipientInfo\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 539 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_delete(st, i)   \fBSKM_sk_delete\fP(\fBCMS_RecipientInfo\fP, (st), (i))"

.PP
Definition at line 533 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_RecipientInfo\fP, (st), (ptr))"

.PP
Definition at line 534 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_dup(st)   \fBSKM_sk_dup\fP(\fBCMS_RecipientInfo\fP, st)"

.PP
Definition at line 537 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_find(st, val)   \fBSKM_sk_find\fP(\fBCMS_RecipientInfo\fP, (st), (val))"

.PP
Definition at line 531 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCMS_RecipientInfo\fP, (st), (val))"

.PP
Definition at line 532 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_free(st)   \fBSKM_sk_free\fP(\fBCMS_RecipientInfo\fP, (st))"

.PP
Definition at line 524 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCMS_RecipientInfo\fP, (st), (val), (i))"

.PP
Definition at line 535 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_RecipientInfo\fP, (st))"

.PP
Definition at line 543 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_new(cmp)   \fBSKM_sk_new\fP(\fBCMS_RecipientInfo\fP, (cmp))"

.PP
Definition at line 522 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_new_null()   \fBSKM_sk_new_null\fP(\fBCMS_RecipientInfo\fP)"

.PP
Definition at line 523 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_num(st)   \fBSKM_sk_num\fP(\fBCMS_RecipientInfo\fP, (st))"

.PP
Definition at line 525 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_pop(st)   \fBSKM_sk_pop\fP(\fBCMS_RecipientInfo\fP, (st))"

.PP
Definition at line 541 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_RecipientInfo\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 538 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_push(st, val)   \fBSKM_sk_push\fP(\fBCMS_RecipientInfo\fP, (st), (val))"

.PP
Definition at line 529 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_set(st, i, val)   \fBSKM_sk_set\fP(\fBCMS_RecipientInfo\fP, (st), (i), (val))"

.PP
Definition at line 527 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_RecipientInfo\fP, (st), (cmp))"

.PP
Definition at line 536 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_shift(st)   \fBSKM_sk_shift\fP(\fBCMS_RecipientInfo\fP, (st))"

.PP
Definition at line 540 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_sort(st)   \fBSKM_sk_sort\fP(\fBCMS_RecipientInfo\fP, (st))"

.PP
Definition at line 542 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCMS_RecipientInfo\fP, (st), (val))"

.PP
Definition at line 530 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_value(st, i)   \fBSKM_sk_value\fP(\fBCMS_RecipientInfo\fP, (st), (i))"

.PP
Definition at line 526 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RecipientInfo_zero(st)   \fBSKM_sk_zero\fP(\fBCMS_RecipientInfo\fP, (st))"

.PP
Definition at line 528 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_RevocationInfoChoice\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 561 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_delete(st, i)   \fBSKM_sk_delete\fP(\fBCMS_RevocationInfoChoice\fP, (st), (i))"

.PP
Definition at line 555 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_RevocationInfoChoice\fP, (st), (ptr))"

.PP
Definition at line 556 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_dup(st)   \fBSKM_sk_dup\fP(\fBCMS_RevocationInfoChoice\fP, st)"

.PP
Definition at line 559 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_find(st, val)   \fBSKM_sk_find\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"

.PP
Definition at line 553 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"

.PP
Definition at line 554 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_free(st)   \fBSKM_sk_free\fP(\fBCMS_RevocationInfoChoice\fP, (st))"

.PP
Definition at line 546 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val), (i))"

.PP
Definition at line 557 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_RevocationInfoChoice\fP, (st))"

.PP
Definition at line 565 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_new(cmp)   \fBSKM_sk_new\fP(\fBCMS_RevocationInfoChoice\fP, (cmp))"

.PP
Definition at line 544 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_new_null()   \fBSKM_sk_new_null\fP(\fBCMS_RevocationInfoChoice\fP)"

.PP
Definition at line 545 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_num(st)   \fBSKM_sk_num\fP(\fBCMS_RevocationInfoChoice\fP, (st))"

.PP
Definition at line 547 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_pop(st)   \fBSKM_sk_pop\fP(\fBCMS_RevocationInfoChoice\fP, (st))"

.PP
Definition at line 563 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_RevocationInfoChoice\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 560 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_push(st, val)   \fBSKM_sk_push\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"

.PP
Definition at line 551 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_set(st, i, val)   \fBSKM_sk_set\fP(\fBCMS_RevocationInfoChoice\fP, (st), (i), (val))"

.PP
Definition at line 549 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_RevocationInfoChoice\fP, (st), (cmp))"

.PP
Definition at line 558 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_shift(st)   \fBSKM_sk_shift\fP(\fBCMS_RevocationInfoChoice\fP, (st))"

.PP
Definition at line 562 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_sort(st)   \fBSKM_sk_sort\fP(\fBCMS_RevocationInfoChoice\fP, (st))"

.PP
Definition at line 564 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCMS_RevocationInfoChoice\fP, (st), (val))"

.PP
Definition at line 552 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_value(st, i)   \fBSKM_sk_value\fP(\fBCMS_RevocationInfoChoice\fP, (st), (i))"

.PP
Definition at line 548 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_RevocationInfoChoice_zero(st)   \fBSKM_sk_zero\fP(\fBCMS_RevocationInfoChoice\fP, (st))"

.PP
Definition at line 550 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCMS_SignerInfo\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 583 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_delete(st, i)   \fBSKM_sk_delete\fP(\fBCMS_SignerInfo\fP, (st), (i))"

.PP
Definition at line 577 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCMS_SignerInfo\fP, (st), (ptr))"

.PP
Definition at line 578 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_dup(st)   \fBSKM_sk_dup\fP(\fBCMS_SignerInfo\fP, st)"

.PP
Definition at line 581 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_find(st, val)   \fBSKM_sk_find\fP(\fBCMS_SignerInfo\fP, (st), (val))"

.PP
Definition at line 575 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCMS_SignerInfo\fP, (st), (val))"

.PP
Definition at line 576 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_free(st)   \fBSKM_sk_free\fP(\fBCMS_SignerInfo\fP, (st))"

.PP
Definition at line 568 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCMS_SignerInfo\fP, (st), (val), (i))"

.PP
Definition at line 579 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCMS_SignerInfo\fP, (st))"

.PP
Definition at line 587 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_new(cmp)   \fBSKM_sk_new\fP(\fBCMS_SignerInfo\fP, (cmp))"

.PP
Definition at line 566 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_new_null()   \fBSKM_sk_new_null\fP(\fBCMS_SignerInfo\fP)"

.PP
Definition at line 567 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_num(st)   \fBSKM_sk_num\fP(\fBCMS_SignerInfo\fP, (st))"

.PP
Definition at line 569 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_pop(st)   \fBSKM_sk_pop\fP(\fBCMS_SignerInfo\fP, (st))"

.PP
Definition at line 585 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCMS_SignerInfo\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 582 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_push(st, val)   \fBSKM_sk_push\fP(\fBCMS_SignerInfo\fP, (st), (val))"

.PP
Definition at line 573 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_set(st, i, val)   \fBSKM_sk_set\fP(\fBCMS_SignerInfo\fP, (st), (i), (val))"

.PP
Definition at line 571 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCMS_SignerInfo\fP, (st), (cmp))"

.PP
Definition at line 580 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_shift(st)   \fBSKM_sk_shift\fP(\fBCMS_SignerInfo\fP, (st))"

.PP
Definition at line 584 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_sort(st)   \fBSKM_sk_sort\fP(\fBCMS_SignerInfo\fP, (st))"

.PP
Definition at line 586 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCMS_SignerInfo\fP, (st), (val))"

.PP
Definition at line 574 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_value(st, i)   \fBSKM_sk_value\fP(\fBCMS_SignerInfo\fP, (st), (i))"

.PP
Definition at line 570 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CMS_SignerInfo_zero(st)   \fBSKM_sk_zero\fP(\fBCMS_SignerInfo\fP, (st))"

.PP
Definition at line 572 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCONF_IMODULE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 605 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_delete(st, i)   \fBSKM_sk_delete\fP(\fBCONF_IMODULE\fP, (st), (i))"

.PP
Definition at line 599 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCONF_IMODULE\fP, (st), (ptr))"

.PP
Definition at line 600 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_dup(st)   \fBSKM_sk_dup\fP(\fBCONF_IMODULE\fP, st)"

.PP
Definition at line 603 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_find(st, val)   \fBSKM_sk_find\fP(\fBCONF_IMODULE\fP, (st), (val))"

.PP
Definition at line 597 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCONF_IMODULE\fP, (st), (val))"

.PP
Definition at line 598 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_free(st)   \fBSKM_sk_free\fP(\fBCONF_IMODULE\fP, (st))"

.PP
Definition at line 590 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCONF_IMODULE\fP, (st), (val), (i))"

.PP
Definition at line 601 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCONF_IMODULE\fP, (st))"

.PP
Definition at line 609 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_new(cmp)   \fBSKM_sk_new\fP(\fBCONF_IMODULE\fP, (cmp))"

.PP
Definition at line 588 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_new_null()   \fBSKM_sk_new_null\fP(\fBCONF_IMODULE\fP)"

.PP
Definition at line 589 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_num(st)   \fBSKM_sk_num\fP(\fBCONF_IMODULE\fP, (st))"

.PP
Definition at line 591 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_pop(st)   \fBSKM_sk_pop\fP(\fBCONF_IMODULE\fP, (st))"

.PP
Definition at line 607 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCONF_IMODULE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 604 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_push(st, val)   \fBSKM_sk_push\fP(\fBCONF_IMODULE\fP, (st), (val))"

.PP
Definition at line 595 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_set(st, i, val)   \fBSKM_sk_set\fP(\fBCONF_IMODULE\fP, (st), (i), (val))"

.PP
Definition at line 593 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCONF_IMODULE\fP, (st), (cmp))"

.PP
Definition at line 602 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_shift(st)   \fBSKM_sk_shift\fP(\fBCONF_IMODULE\fP, (st))"

.PP
Definition at line 606 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_sort(st)   \fBSKM_sk_sort\fP(\fBCONF_IMODULE\fP, (st))"

.PP
Definition at line 608 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCONF_IMODULE\fP, (st), (val))"

.PP
Definition at line 596 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_value(st, i)   \fBSKM_sk_value\fP(\fBCONF_IMODULE\fP, (st), (i))"

.PP
Definition at line 592 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_IMODULE_zero(st)   \fBSKM_sk_zero\fP(\fBCONF_IMODULE\fP, (st))"

.PP
Definition at line 594 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCONF_MODULE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 627 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_delete(st, i)   \fBSKM_sk_delete\fP(\fBCONF_MODULE\fP, (st), (i))"

.PP
Definition at line 621 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCONF_MODULE\fP, (st), (ptr))"

.PP
Definition at line 622 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_dup(st)   \fBSKM_sk_dup\fP(\fBCONF_MODULE\fP, st)"

.PP
Definition at line 625 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_find(st, val)   \fBSKM_sk_find\fP(\fBCONF_MODULE\fP, (st), (val))"

.PP
Definition at line 619 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCONF_MODULE\fP, (st), (val))"

.PP
Definition at line 620 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_free(st)   \fBSKM_sk_free\fP(\fBCONF_MODULE\fP, (st))"

.PP
Definition at line 612 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCONF_MODULE\fP, (st), (val), (i))"

.PP
Definition at line 623 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCONF_MODULE\fP, (st))"

.PP
Definition at line 631 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_new(cmp)   \fBSKM_sk_new\fP(\fBCONF_MODULE\fP, (cmp))"

.PP
Definition at line 610 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_new_null()   \fBSKM_sk_new_null\fP(\fBCONF_MODULE\fP)"

.PP
Definition at line 611 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_num(st)   \fBSKM_sk_num\fP(\fBCONF_MODULE\fP, (st))"

.PP
Definition at line 613 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_pop(st)   \fBSKM_sk_pop\fP(\fBCONF_MODULE\fP, (st))"

.PP
Definition at line 629 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCONF_MODULE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 626 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_push(st, val)   \fBSKM_sk_push\fP(\fBCONF_MODULE\fP, (st), (val))"

.PP
Definition at line 617 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_set(st, i, val)   \fBSKM_sk_set\fP(\fBCONF_MODULE\fP, (st), (i), (val))"

.PP
Definition at line 615 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCONF_MODULE\fP, (st), (cmp))"

.PP
Definition at line 624 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_shift(st)   \fBSKM_sk_shift\fP(\fBCONF_MODULE\fP, (st))"

.PP
Definition at line 628 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_sort(st)   \fBSKM_sk_sort\fP(\fBCONF_MODULE\fP, (st))"

.PP
Definition at line 630 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCONF_MODULE\fP, (st), (val))"

.PP
Definition at line 618 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_value(st, i)   \fBSKM_sk_value\fP(\fBCONF_MODULE\fP, (st), (i))"

.PP
Definition at line 614 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_MODULE_zero(st)   \fBSKM_sk_zero\fP(\fBCONF_MODULE\fP, (st))"

.PP
Definition at line 616 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCONF_VALUE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 649 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_delete(st, i)   \fBSKM_sk_delete\fP(\fBCONF_VALUE\fP, (st), (i))"

.PP
Definition at line 643 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCONF_VALUE\fP, (st), (ptr))"

.PP
Definition at line 644 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_dup(st)   \fBSKM_sk_dup\fP(\fBCONF_VALUE\fP, st)"

.PP
Definition at line 647 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_find(st, val)   \fBSKM_sk_find\fP(\fBCONF_VALUE\fP, (st), (val))"

.PP
Definition at line 641 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCONF_VALUE\fP, (st), (val))"

.PP
Definition at line 642 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_free(st)   \fBSKM_sk_free\fP(\fBCONF_VALUE\fP, (st))"

.PP
Definition at line 634 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCONF_VALUE\fP, (st), (val), (i))"

.PP
Definition at line 645 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCONF_VALUE\fP, (st))"

.PP
Definition at line 653 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_new(cmp)   \fBSKM_sk_new\fP(\fBCONF_VALUE\fP, (cmp))"

.PP
Definition at line 632 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_new_null()   \fBSKM_sk_new_null\fP(\fBCONF_VALUE\fP)"

.PP
Definition at line 633 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_num(st)   \fBSKM_sk_num\fP(\fBCONF_VALUE\fP, (st))"

.PP
Definition at line 635 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_pop(st)   \fBSKM_sk_pop\fP(\fBCONF_VALUE\fP, (st))"

.PP
Definition at line 651 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCONF_VALUE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 648 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_push(st, val)   \fBSKM_sk_push\fP(\fBCONF_VALUE\fP, (st), (val))"

.PP
Definition at line 639 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_set(st, i, val)   \fBSKM_sk_set\fP(\fBCONF_VALUE\fP, (st), (i), (val))"

.PP
Definition at line 637 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCONF_VALUE\fP, (st), (cmp))"

.PP
Definition at line 646 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_shift(st)   \fBSKM_sk_shift\fP(\fBCONF_VALUE\fP, (st))"

.PP
Definition at line 650 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_sort(st)   \fBSKM_sk_sort\fP(\fBCONF_VALUE\fP, (st))"

.PP
Definition at line 652 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCONF_VALUE\fP, (st), (val))"

.PP
Definition at line 640 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_value(st, i)   \fBSKM_sk_value\fP(\fBCONF_VALUE\fP, (st), (i))"

.PP
Definition at line 636 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CONF_VALUE_zero(st)   \fBSKM_sk_zero\fP(\fBCONF_VALUE\fP, (st))"

.PP
Definition at line 638 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCRYPTO_dynlock\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 693 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_delete(st, i)   \fBSKM_sk_delete\fP(\fBCRYPTO_dynlock\fP, (st), (i))"

.PP
Definition at line 687 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCRYPTO_dynlock\fP, (st), (ptr))"

.PP
Definition at line 688 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_dup(st)   \fBSKM_sk_dup\fP(\fBCRYPTO_dynlock\fP, st)"

.PP
Definition at line 691 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_find(st, val)   \fBSKM_sk_find\fP(\fBCRYPTO_dynlock\fP, (st), (val))"

.PP
Definition at line 685 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCRYPTO_dynlock\fP, (st), (val))"

.PP
Definition at line 686 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_free(st)   \fBSKM_sk_free\fP(\fBCRYPTO_dynlock\fP, (st))"

.PP
Definition at line 678 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCRYPTO_dynlock\fP, (st), (val), (i))"

.PP
Definition at line 689 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCRYPTO_dynlock\fP, (st))"

.PP
Definition at line 697 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_new(cmp)   \fBSKM_sk_new\fP(\fBCRYPTO_dynlock\fP, (cmp))"

.PP
Definition at line 676 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_new_null()   \fBSKM_sk_new_null\fP(\fBCRYPTO_dynlock\fP)"

.PP
Definition at line 677 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_num(st)   \fBSKM_sk_num\fP(\fBCRYPTO_dynlock\fP, (st))"

.PP
Definition at line 679 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_pop(st)   \fBSKM_sk_pop\fP(\fBCRYPTO_dynlock\fP, (st))"

.PP
Definition at line 695 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCRYPTO_dynlock\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 692 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_push(st, val)   \fBSKM_sk_push\fP(\fBCRYPTO_dynlock\fP, (st), (val))"

.PP
Definition at line 683 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_set(st, i, val)   \fBSKM_sk_set\fP(\fBCRYPTO_dynlock\fP, (st), (i), (val))"

.PP
Definition at line 681 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCRYPTO_dynlock\fP, (st), (cmp))"

.PP
Definition at line 690 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_shift(st)   \fBSKM_sk_shift\fP(\fBCRYPTO_dynlock\fP, (st))"

.PP
Definition at line 694 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_sort(st)   \fBSKM_sk_sort\fP(\fBCRYPTO_dynlock\fP, (st))"

.PP
Definition at line 696 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCRYPTO_dynlock\fP, (st), (val))"

.PP
Definition at line 684 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_value(st, i)   \fBSKM_sk_value\fP(\fBCRYPTO_dynlock\fP, (st), (i))"

.PP
Definition at line 680 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_dynlock_zero(st)   \fBSKM_sk_zero\fP(\fBCRYPTO_dynlock\fP, (st))"

.PP
Definition at line 682 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 671 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_delete(st, i)   \fBSKM_sk_delete\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (i))"

.PP
Definition at line 665 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (ptr))"

.PP
Definition at line 666 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_dup(st)   \fBSKM_sk_dup\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, st)"

.PP
Definition at line 669 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_find(st, val)   \fBSKM_sk_find\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"

.PP
Definition at line 663 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"

.PP
Definition at line 664 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_free(st)   \fBSKM_sk_free\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"

.PP
Definition at line 656 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val), (i))"

.PP
Definition at line 667 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"

.PP
Definition at line 675 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_new(cmp)   \fBSKM_sk_new\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (cmp))"

.PP
Definition at line 654 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_new_null()   \fBSKM_sk_new_null\fP(\fBCRYPTO_EX_DATA_FUNCS\fP)"

.PP
Definition at line 655 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_num(st)   \fBSKM_sk_num\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"

.PP
Definition at line 657 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_pop(st)   \fBSKM_sk_pop\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"

.PP
Definition at line 673 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 670 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_push(st, val)   \fBSKM_sk_push\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"

.PP
Definition at line 661 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_set(st, i, val)   \fBSKM_sk_set\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (i), (val))"

.PP
Definition at line 659 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (cmp))"

.PP
Definition at line 668 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_shift(st)   \fBSKM_sk_shift\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"

.PP
Definition at line 672 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_sort(st)   \fBSKM_sk_sort\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"

.PP
Definition at line 674 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (val))"

.PP
Definition at line 662 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_value(st, i)   \fBSKM_sk_value\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st), (i))"

.PP
Definition at line 658 of file include/openssl/safestack\&.h\&.
.SS "#define sk_CRYPTO_EX_DATA_FUNCS_zero(st)   \fBSKM_sk_zero\fP(\fBCRYPTO_EX_DATA_FUNCS\fP, (st))"

.PP
Definition at line 660 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBDIST_POINT\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 715 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_delete(st, i)   \fBSKM_sk_delete\fP(\fBDIST_POINT\fP, (st), (i))"

.PP
Definition at line 709 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBDIST_POINT\fP, (st), (ptr))"

.PP
Definition at line 710 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_dup(st)   \fBSKM_sk_dup\fP(\fBDIST_POINT\fP, st)"

.PP
Definition at line 713 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_find(st, val)   \fBSKM_sk_find\fP(\fBDIST_POINT\fP, (st), (val))"

.PP
Definition at line 707 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBDIST_POINT\fP, (st), (val))"

.PP
Definition at line 708 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_free(st)   \fBSKM_sk_free\fP(\fBDIST_POINT\fP, (st))"

.PP
Definition at line 700 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBDIST_POINT\fP, (st), (val), (i))"

.PP
Definition at line 711 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBDIST_POINT\fP, (st))"

.PP
Definition at line 719 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_new(cmp)   \fBSKM_sk_new\fP(\fBDIST_POINT\fP, (cmp))"

.PP
Definition at line 698 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_new_null()   \fBSKM_sk_new_null\fP(\fBDIST_POINT\fP)"

.PP
Definition at line 699 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_num(st)   \fBSKM_sk_num\fP(\fBDIST_POINT\fP, (st))"

.PP
Definition at line 701 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_pop(st)   \fBSKM_sk_pop\fP(\fBDIST_POINT\fP, (st))"

.PP
Definition at line 717 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBDIST_POINT\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 714 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_push(st, val)   \fBSKM_sk_push\fP(\fBDIST_POINT\fP, (st), (val))"

.PP
Definition at line 705 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_set(st, i, val)   \fBSKM_sk_set\fP(\fBDIST_POINT\fP, (st), (i), (val))"

.PP
Definition at line 703 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBDIST_POINT\fP, (st), (cmp))"

.PP
Definition at line 712 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_shift(st)   \fBSKM_sk_shift\fP(\fBDIST_POINT\fP, (st))"

.PP
Definition at line 716 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_sort(st)   \fBSKM_sk_sort\fP(\fBDIST_POINT\fP, (st))"

.PP
Definition at line 718 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBDIST_POINT\fP, (st), (val))"

.PP
Definition at line 706 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_value(st, i)   \fBSKM_sk_value\fP(\fBDIST_POINT\fP, (st), (i))"

.PP
Definition at line 702 of file include/openssl/safestack\&.h\&.
.SS "#define sk_DIST_POINT_zero(st)   \fBSKM_sk_zero\fP(\fBDIST_POINT\fP, (st))"

.PP
Definition at line 704 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 759 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_delete(st, i)   \fBSKM_sk_delete\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (i))"

.PP
Definition at line 753 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (ptr))"

.PP
Definition at line 754 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_dup(st)   \fBSKM_sk_dup\fP(\fBENGINE_CLEANUP_ITEM\fP, st)"

.PP
Definition at line 757 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_find(st, val)   \fBSKM_sk_find\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"

.PP
Definition at line 751 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"

.PP
Definition at line 752 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_free(st)   \fBSKM_sk_free\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"

.PP
Definition at line 744 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val), (i))"

.PP
Definition at line 755 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"

.PP
Definition at line 763 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_new(cmp)   \fBSKM_sk_new\fP(\fBENGINE_CLEANUP_ITEM\fP, (cmp))"

.PP
Definition at line 742 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_new_null()   \fBSKM_sk_new_null\fP(\fBENGINE_CLEANUP_ITEM\fP)"

.PP
Definition at line 743 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_num(st)   \fBSKM_sk_num\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"

.PP
Definition at line 745 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_pop(st)   \fBSKM_sk_pop\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"

.PP
Definition at line 761 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 758 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_push(st, val)   \fBSKM_sk_push\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"

.PP
Definition at line 749 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_set(st, i, val)   \fBSKM_sk_set\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (i), (val))"

.PP
Definition at line 747 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (cmp))"

.PP
Definition at line 756 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_shift(st)   \fBSKM_sk_shift\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"

.PP
Definition at line 760 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_sort(st)   \fBSKM_sk_sort\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"

.PP
Definition at line 762 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (val))"

.PP
Definition at line 750 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_value(st, i)   \fBSKM_sk_value\fP(\fBENGINE_CLEANUP_ITEM\fP, (st), (i))"

.PP
Definition at line 746 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_CLEANUP_ITEM_zero(st)   \fBSKM_sk_zero\fP(\fBENGINE_CLEANUP_ITEM\fP, (st))"

.PP
Definition at line 748 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBENGINE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 737 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_delete(st, i)   \fBSKM_sk_delete\fP(\fBENGINE\fP, (st), (i))"

.PP
Definition at line 731 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBENGINE\fP, (st), (ptr))"

.PP
Definition at line 732 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_dup(st)   \fBSKM_sk_dup\fP(\fBENGINE\fP, st)"

.PP
Definition at line 735 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_find(st, val)   \fBSKM_sk_find\fP(\fBENGINE\fP, (st), (val))"

.PP
Definition at line 729 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBENGINE\fP, (st), (val))"

.PP
Definition at line 730 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_free(st)   \fBSKM_sk_free\fP(\fBENGINE\fP, (st))"

.PP
Definition at line 722 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBENGINE\fP, (st), (val), (i))"

.PP
Definition at line 733 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBENGINE\fP, (st))"

.PP
Definition at line 741 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_new(cmp)   \fBSKM_sk_new\fP(\fBENGINE\fP, (cmp))"

.PP
Definition at line 720 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_new_null()   \fBSKM_sk_new_null\fP(\fBENGINE\fP)"

.PP
Definition at line 721 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_num(st)   \fBSKM_sk_num\fP(\fBENGINE\fP, (st))"

.PP
Definition at line 723 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_pop(st)   \fBSKM_sk_pop\fP(\fBENGINE\fP, (st))"

.PP
Definition at line 739 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBENGINE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 736 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_push(st, val)   \fBSKM_sk_push\fP(\fBENGINE\fP, (st), (val))"

.PP
Definition at line 727 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_set(st, i, val)   \fBSKM_sk_set\fP(\fBENGINE\fP, (st), (i), (val))"

.PP
Definition at line 725 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBENGINE\fP, (st), (cmp))"

.PP
Definition at line 734 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_shift(st)   \fBSKM_sk_shift\fP(\fBENGINE\fP, (st))"

.PP
Definition at line 738 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_sort(st)   \fBSKM_sk_sort\fP(\fBENGINE\fP, (st))"

.PP
Definition at line 740 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBENGINE\fP, (st), (val))"

.PP
Definition at line 728 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_value(st, i)   \fBSKM_sk_value\fP(\fBENGINE\fP, (st), (i))"

.PP
Definition at line 724 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ENGINE_zero(st)   \fBSKM_sk_zero\fP(\fBENGINE\fP, (st))"

.PP
Definition at line 726 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBESS_CERT_ID\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 781 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_delete(st, i)   \fBSKM_sk_delete\fP(\fBESS_CERT_ID\fP, (st), (i))"

.PP
Definition at line 775 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBESS_CERT_ID\fP, (st), (ptr))"

.PP
Definition at line 776 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_dup(st)   \fBSKM_sk_dup\fP(\fBESS_CERT_ID\fP, st)"

.PP
Definition at line 779 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_find(st, val)   \fBSKM_sk_find\fP(\fBESS_CERT_ID\fP, (st), (val))"

.PP
Definition at line 773 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBESS_CERT_ID\fP, (st), (val))"

.PP
Definition at line 774 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_free(st)   \fBSKM_sk_free\fP(\fBESS_CERT_ID\fP, (st))"

.PP
Definition at line 766 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBESS_CERT_ID\fP, (st), (val), (i))"

.PP
Definition at line 777 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBESS_CERT_ID\fP, (st))"

.PP
Definition at line 785 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_new(cmp)   \fBSKM_sk_new\fP(\fBESS_CERT_ID\fP, (cmp))"

.PP
Definition at line 764 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_new_null()   \fBSKM_sk_new_null\fP(\fBESS_CERT_ID\fP)"

.PP
Definition at line 765 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_num(st)   \fBSKM_sk_num\fP(\fBESS_CERT_ID\fP, (st))"

.PP
Definition at line 767 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_pop(st)   \fBSKM_sk_pop\fP(\fBESS_CERT_ID\fP, (st))"

.PP
Definition at line 783 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBESS_CERT_ID\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 780 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_push(st, val)   \fBSKM_sk_push\fP(\fBESS_CERT_ID\fP, (st), (val))"

.PP
Definition at line 771 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_set(st, i, val)   \fBSKM_sk_set\fP(\fBESS_CERT_ID\fP, (st), (i), (val))"

.PP
Definition at line 769 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBESS_CERT_ID\fP, (st), (cmp))"

.PP
Definition at line 778 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_shift(st)   \fBSKM_sk_shift\fP(\fBESS_CERT_ID\fP, (st))"

.PP
Definition at line 782 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_sort(st)   \fBSKM_sk_sort\fP(\fBESS_CERT_ID\fP, (st))"

.PP
Definition at line 784 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBESS_CERT_ID\fP, (st), (val))"

.PP
Definition at line 772 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_value(st, i)   \fBSKM_sk_value\fP(\fBESS_CERT_ID\fP, (st), (i))"

.PP
Definition at line 768 of file include/openssl/safestack\&.h\&.
.SS "#define sk_ESS_CERT_ID_zero(st)   \fBSKM_sk_zero\fP(\fBESS_CERT_ID\fP, (st))"

.PP
Definition at line 770 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBEVP_MD\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 803 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_delete(st, i)   \fBSKM_sk_delete\fP(\fBEVP_MD\fP, (st), (i))"

.PP
Definition at line 797 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBEVP_MD\fP, (st), (ptr))"

.PP
Definition at line 798 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_dup(st)   \fBSKM_sk_dup\fP(\fBEVP_MD\fP, st)"

.PP
Definition at line 801 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_find(st, val)   \fBSKM_sk_find\fP(\fBEVP_MD\fP, (st), (val))"

.PP
Definition at line 795 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBEVP_MD\fP, (st), (val))"

.PP
Definition at line 796 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_free(st)   \fBSKM_sk_free\fP(\fBEVP_MD\fP, (st))"

.PP
Definition at line 788 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBEVP_MD\fP, (st), (val), (i))"

.PP
Definition at line 799 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBEVP_MD\fP, (st))"

.PP
Definition at line 807 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_new(cmp)   \fBSKM_sk_new\fP(\fBEVP_MD\fP, (cmp))"

.PP
Definition at line 786 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_new_null()   \fBSKM_sk_new_null\fP(\fBEVP_MD\fP)"

.PP
Definition at line 787 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_num(st)   \fBSKM_sk_num\fP(\fBEVP_MD\fP, (st))"

.PP
Definition at line 789 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_pop(st)   \fBSKM_sk_pop\fP(\fBEVP_MD\fP, (st))"

.PP
Definition at line 805 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBEVP_MD\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 802 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_push(st, val)   \fBSKM_sk_push\fP(\fBEVP_MD\fP, (st), (val))"

.PP
Definition at line 793 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_set(st, i, val)   \fBSKM_sk_set\fP(\fBEVP_MD\fP, (st), (i), (val))"

.PP
Definition at line 791 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBEVP_MD\fP, (st), (cmp))"

.PP
Definition at line 800 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_shift(st)   \fBSKM_sk_shift\fP(\fBEVP_MD\fP, (st))"

.PP
Definition at line 804 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_sort(st)   \fBSKM_sk_sort\fP(\fBEVP_MD\fP, (st))"

.PP
Definition at line 806 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBEVP_MD\fP, (st), (val))"

.PP
Definition at line 794 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_value(st, i)   \fBSKM_sk_value\fP(\fBEVP_MD\fP, (st), (i))"

.PP
Definition at line 790 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_MD_zero(st)   \fBSKM_sk_zero\fP(\fBEVP_MD\fP, (st))"

.PP
Definition at line 792 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(EVP_PBE_CTL, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 825 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_delete(st, i)   \fBSKM_sk_delete\fP(EVP_PBE_CTL, (st), (i))"

.PP
Definition at line 819 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(EVP_PBE_CTL, (st), (ptr))"

.PP
Definition at line 820 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_dup(st)   \fBSKM_sk_dup\fP(EVP_PBE_CTL, st)"

.PP
Definition at line 823 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_find(st, val)   \fBSKM_sk_find\fP(EVP_PBE_CTL, (st), (val))"

.PP
Definition at line 817 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_find_ex(st, val)   \fBSKM_sk_find_ex\fP(EVP_PBE_CTL, (st), (val))"

.PP
Definition at line 818 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_free(st)   \fBSKM_sk_free\fP(EVP_PBE_CTL, (st))"

.PP
Definition at line 810 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_insert(st, val, i)   \fBSKM_sk_insert\fP(EVP_PBE_CTL, (st), (val), (i))"

.PP
Definition at line 821 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_is_sorted(st)   \fBSKM_sk_is_sorted\fP(EVP_PBE_CTL, (st))"

.PP
Definition at line 829 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_new(cmp)   \fBSKM_sk_new\fP(EVP_PBE_CTL, (cmp))"

.PP
Definition at line 808 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_new_null()   \fBSKM_sk_new_null\fP(EVP_PBE_CTL)"

.PP
Definition at line 809 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_num(st)   \fBSKM_sk_num\fP(EVP_PBE_CTL, (st))"

.PP
Definition at line 811 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_pop(st)   \fBSKM_sk_pop\fP(EVP_PBE_CTL, (st))"

.PP
Definition at line 827 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(EVP_PBE_CTL, (st), (\fBfree_func\fP))"

.PP
Definition at line 824 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_push(st, val)   \fBSKM_sk_push\fP(EVP_PBE_CTL, (st), (val))"

.PP
Definition at line 815 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_set(st, i, val)   \fBSKM_sk_set\fP(EVP_PBE_CTL, (st), (i), (val))"

.PP
Definition at line 813 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(EVP_PBE_CTL, (st), (cmp))"

.PP
Definition at line 822 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_shift(st)   \fBSKM_sk_shift\fP(EVP_PBE_CTL, (st))"

.PP
Definition at line 826 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_sort(st)   \fBSKM_sk_sort\fP(EVP_PBE_CTL, (st))"

.PP
Definition at line 828 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_unshift(st, val)   \fBSKM_sk_unshift\fP(EVP_PBE_CTL, (st), (val))"

.PP
Definition at line 816 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_value(st, i)   \fBSKM_sk_value\fP(EVP_PBE_CTL, (st), (i))"

.PP
Definition at line 812 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PBE_CTL_zero(st)   \fBSKM_sk_zero\fP(EVP_PBE_CTL, (st))"

.PP
Definition at line 814 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 847 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_delete(st, i)   \fBSKM_sk_delete\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (i))"

.PP
Definition at line 841 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (ptr))"

.PP
Definition at line 842 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_dup(st)   \fBSKM_sk_dup\fP(\fBEVP_PKEY_ASN1_METHOD\fP, st)"

.PP
Definition at line 845 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_find(st, val)   \fBSKM_sk_find\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"

.PP
Definition at line 839 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"

.PP
Definition at line 840 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_free(st)   \fBSKM_sk_free\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"

.PP
Definition at line 832 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val), (i))"

.PP
Definition at line 843 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"

.PP
Definition at line 851 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_new(cmp)   \fBSKM_sk_new\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (cmp))"

.PP
Definition at line 830 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_new_null()   \fBSKM_sk_new_null\fP(\fBEVP_PKEY_ASN1_METHOD\fP)"

.PP
Definition at line 831 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_num(st)   \fBSKM_sk_num\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"

.PP
Definition at line 833 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_pop(st)   \fBSKM_sk_pop\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"

.PP
Definition at line 849 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 846 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_push(st, val)   \fBSKM_sk_push\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"

.PP
Definition at line 837 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_set(st, i, val)   \fBSKM_sk_set\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (i), (val))"

.PP
Definition at line 835 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (cmp))"

.PP
Definition at line 844 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_shift(st)   \fBSKM_sk_shift\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"

.PP
Definition at line 848 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_sort(st)   \fBSKM_sk_sort\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"

.PP
Definition at line 850 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (val))"

.PP
Definition at line 838 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_value(st, i)   \fBSKM_sk_value\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st), (i))"

.PP
Definition at line 834 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_ASN1_METHOD_zero(st)   \fBSKM_sk_zero\fP(\fBEVP_PKEY_ASN1_METHOD\fP, (st))"

.PP
Definition at line 836 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBEVP_PKEY_METHOD\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 869 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_delete(st, i)   \fBSKM_sk_delete\fP(\fBEVP_PKEY_METHOD\fP, (st), (i))"

.PP
Definition at line 863 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBEVP_PKEY_METHOD\fP, (st), (ptr))"

.PP
Definition at line 864 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_dup(st)   \fBSKM_sk_dup\fP(\fBEVP_PKEY_METHOD\fP, st)"

.PP
Definition at line 867 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_find(st, val)   \fBSKM_sk_find\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"

.PP
Definition at line 861 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"

.PP
Definition at line 862 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_free(st)   \fBSKM_sk_free\fP(\fBEVP_PKEY_METHOD\fP, (st))"

.PP
Definition at line 854 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBEVP_PKEY_METHOD\fP, (st), (val), (i))"

.PP
Definition at line 865 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBEVP_PKEY_METHOD\fP, (st))"

.PP
Definition at line 873 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_new(cmp)   \fBSKM_sk_new\fP(\fBEVP_PKEY_METHOD\fP, (cmp))"

.PP
Definition at line 852 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_new_null()   \fBSKM_sk_new_null\fP(\fBEVP_PKEY_METHOD\fP)"

.PP
Definition at line 853 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_num(st)   \fBSKM_sk_num\fP(\fBEVP_PKEY_METHOD\fP, (st))"

.PP
Definition at line 855 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_pop(st)   \fBSKM_sk_pop\fP(\fBEVP_PKEY_METHOD\fP, (st))"

.PP
Definition at line 871 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBEVP_PKEY_METHOD\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 868 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_push(st, val)   \fBSKM_sk_push\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"

.PP
Definition at line 859 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_set(st, i, val)   \fBSKM_sk_set\fP(\fBEVP_PKEY_METHOD\fP, (st), (i), (val))"

.PP
Definition at line 857 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBEVP_PKEY_METHOD\fP, (st), (cmp))"

.PP
Definition at line 866 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_shift(st)   \fBSKM_sk_shift\fP(\fBEVP_PKEY_METHOD\fP, (st))"

.PP
Definition at line 870 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_sort(st)   \fBSKM_sk_sort\fP(\fBEVP_PKEY_METHOD\fP, (st))"

.PP
Definition at line 872 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBEVP_PKEY_METHOD\fP, (st), (val))"

.PP
Definition at line 860 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_value(st, i)   \fBSKM_sk_value\fP(\fBEVP_PKEY_METHOD\fP, (st), (i))"

.PP
Definition at line 856 of file include/openssl/safestack\&.h\&.
.SS "#define sk_EVP_PKEY_METHOD_zero(st)   \fBSKM_sk_zero\fP(\fBEVP_PKEY_METHOD\fP, (st))"

.PP
Definition at line 858 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBGENERAL_NAME\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 891 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_delete(st, i)   \fBSKM_sk_delete\fP(\fBGENERAL_NAME\fP, (st), (i))"

.PP
Definition at line 885 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBGENERAL_NAME\fP, (st), (ptr))"

.PP
Definition at line 886 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_dup(st)   \fBSKM_sk_dup\fP(\fBGENERAL_NAME\fP, st)"

.PP
Definition at line 889 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_find(st, val)   \fBSKM_sk_find\fP(\fBGENERAL_NAME\fP, (st), (val))"

.PP
Definition at line 883 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBGENERAL_NAME\fP, (st), (val))"

.PP
Definition at line 884 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_free(st)   \fBSKM_sk_free\fP(\fBGENERAL_NAME\fP, (st))"

.PP
Definition at line 876 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBGENERAL_NAME\fP, (st), (val), (i))"

.PP
Definition at line 887 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBGENERAL_NAME\fP, (st))"

.PP
Definition at line 895 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_new(cmp)   \fBSKM_sk_new\fP(\fBGENERAL_NAME\fP, (cmp))"

.PP
Definition at line 874 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_new_null()   \fBSKM_sk_new_null\fP(\fBGENERAL_NAME\fP)"

.PP
Definition at line 875 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_num(st)   \fBSKM_sk_num\fP(\fBGENERAL_NAME\fP, (st))"

.PP
Definition at line 877 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_pop(st)   \fBSKM_sk_pop\fP(\fBGENERAL_NAME\fP, (st))"

.PP
Definition at line 893 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBGENERAL_NAME\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 890 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_push(st, val)   \fBSKM_sk_push\fP(\fBGENERAL_NAME\fP, (st), (val))"

.PP
Definition at line 881 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_set(st, i, val)   \fBSKM_sk_set\fP(\fBGENERAL_NAME\fP, (st), (i), (val))"

.PP
Definition at line 879 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBGENERAL_NAME\fP, (st), (cmp))"

.PP
Definition at line 888 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_shift(st)   \fBSKM_sk_shift\fP(\fBGENERAL_NAME\fP, (st))"

.PP
Definition at line 892 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_sort(st)   \fBSKM_sk_sort\fP(\fBGENERAL_NAME\fP, (st))"

.PP
Definition at line 894 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBGENERAL_NAME\fP, (st), (val))"

.PP
Definition at line 882 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_value(st, i)   \fBSKM_sk_value\fP(\fBGENERAL_NAME\fP, (st), (i))"

.PP
Definition at line 878 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAME_zero(st)   \fBSKM_sk_zero\fP(\fBGENERAL_NAME\fP, (st))"

.PP
Definition at line 880 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(GENERAL_NAMES, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 913 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_delete(st, i)   \fBSKM_sk_delete\fP(GENERAL_NAMES, (st), (i))"

.PP
Definition at line 907 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(GENERAL_NAMES, (st), (ptr))"

.PP
Definition at line 908 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_dup(st)   \fBSKM_sk_dup\fP(GENERAL_NAMES, st)"

.PP
Definition at line 911 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_find(st, val)   \fBSKM_sk_find\fP(GENERAL_NAMES, (st), (val))"

.PP
Definition at line 905 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_find_ex(st, val)   \fBSKM_sk_find_ex\fP(GENERAL_NAMES, (st), (val))"

.PP
Definition at line 906 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_free(st)   \fBSKM_sk_free\fP(GENERAL_NAMES, (st))"

.PP
Definition at line 898 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_insert(st, val, i)   \fBSKM_sk_insert\fP(GENERAL_NAMES, (st), (val), (i))"

.PP
Definition at line 909 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_is_sorted(st)   \fBSKM_sk_is_sorted\fP(GENERAL_NAMES, (st))"

.PP
Definition at line 917 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_new(cmp)   \fBSKM_sk_new\fP(GENERAL_NAMES, (cmp))"

.PP
Definition at line 896 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_new_null()   \fBSKM_sk_new_null\fP(GENERAL_NAMES)"

.PP
Definition at line 897 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_num(st)   \fBSKM_sk_num\fP(GENERAL_NAMES, (st))"

.PP
Definition at line 899 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_pop(st)   \fBSKM_sk_pop\fP(GENERAL_NAMES, (st))"

.PP
Definition at line 915 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(GENERAL_NAMES, (st), (\fBfree_func\fP))"

.PP
Definition at line 912 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_push(st, val)   \fBSKM_sk_push\fP(GENERAL_NAMES, (st), (val))"

.PP
Definition at line 903 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_set(st, i, val)   \fBSKM_sk_set\fP(GENERAL_NAMES, (st), (i), (val))"

.PP
Definition at line 901 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(GENERAL_NAMES, (st), (cmp))"

.PP
Definition at line 910 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_shift(st)   \fBSKM_sk_shift\fP(GENERAL_NAMES, (st))"

.PP
Definition at line 914 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_sort(st)   \fBSKM_sk_sort\fP(GENERAL_NAMES, (st))"

.PP
Definition at line 916 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_unshift(st, val)   \fBSKM_sk_unshift\fP(GENERAL_NAMES, (st), (val))"

.PP
Definition at line 904 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_value(st, i)   \fBSKM_sk_value\fP(GENERAL_NAMES, (st), (i))"

.PP
Definition at line 900 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_NAMES_zero(st)   \fBSKM_sk_zero\fP(GENERAL_NAMES, (st))"

.PP
Definition at line 902 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBGENERAL_SUBTREE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 935 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_delete(st, i)   \fBSKM_sk_delete\fP(\fBGENERAL_SUBTREE\fP, (st), (i))"

.PP
Definition at line 929 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBGENERAL_SUBTREE\fP, (st), (ptr))"

.PP
Definition at line 930 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_dup(st)   \fBSKM_sk_dup\fP(\fBGENERAL_SUBTREE\fP, st)"

.PP
Definition at line 933 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_find(st, val)   \fBSKM_sk_find\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"

.PP
Definition at line 927 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"

.PP
Definition at line 928 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_free(st)   \fBSKM_sk_free\fP(\fBGENERAL_SUBTREE\fP, (st))"

.PP
Definition at line 920 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBGENERAL_SUBTREE\fP, (st), (val), (i))"

.PP
Definition at line 931 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBGENERAL_SUBTREE\fP, (st))"

.PP
Definition at line 939 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_new(cmp)   \fBSKM_sk_new\fP(\fBGENERAL_SUBTREE\fP, (cmp))"

.PP
Definition at line 918 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_new_null()   \fBSKM_sk_new_null\fP(\fBGENERAL_SUBTREE\fP)"

.PP
Definition at line 919 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_num(st)   \fBSKM_sk_num\fP(\fBGENERAL_SUBTREE\fP, (st))"

.PP
Definition at line 921 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_pop(st)   \fBSKM_sk_pop\fP(\fBGENERAL_SUBTREE\fP, (st))"

.PP
Definition at line 937 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBGENERAL_SUBTREE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 934 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_push(st, val)   \fBSKM_sk_push\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"

.PP
Definition at line 925 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_set(st, i, val)   \fBSKM_sk_set\fP(\fBGENERAL_SUBTREE\fP, (st), (i), (val))"

.PP
Definition at line 923 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBGENERAL_SUBTREE\fP, (st), (cmp))"

.PP
Definition at line 932 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_shift(st)   \fBSKM_sk_shift\fP(\fBGENERAL_SUBTREE\fP, (st))"

.PP
Definition at line 936 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_sort(st)   \fBSKM_sk_sort\fP(\fBGENERAL_SUBTREE\fP, (st))"

.PP
Definition at line 938 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBGENERAL_SUBTREE\fP, (st), (val))"

.PP
Definition at line 926 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_value(st, i)   \fBSKM_sk_value\fP(\fBGENERAL_SUBTREE\fP, (st), (i))"

.PP
Definition at line 922 of file include/openssl/safestack\&.h\&.
.SS "#define sk_GENERAL_SUBTREE_zero(st)   \fBSKM_sk_zero\fP(\fBGENERAL_SUBTREE\fP, (st))"

.PP
Definition at line 924 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBIPAddressFamily\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 957 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_delete(st, i)   \fBSKM_sk_delete\fP(\fBIPAddressFamily\fP, (st), (i))"

.PP
Definition at line 951 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBIPAddressFamily\fP, (st), (ptr))"

.PP
Definition at line 952 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_dup(st)   \fBSKM_sk_dup\fP(\fBIPAddressFamily\fP, st)"

.PP
Definition at line 955 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_find(st, val)   \fBSKM_sk_find\fP(\fBIPAddressFamily\fP, (st), (val))"

.PP
Definition at line 949 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBIPAddressFamily\fP, (st), (val))"

.PP
Definition at line 950 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_free(st)   \fBSKM_sk_free\fP(\fBIPAddressFamily\fP, (st))"

.PP
Definition at line 942 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBIPAddressFamily\fP, (st), (val), (i))"

.PP
Definition at line 953 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBIPAddressFamily\fP, (st))"

.PP
Definition at line 961 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_new(cmp)   \fBSKM_sk_new\fP(\fBIPAddressFamily\fP, (cmp))"

.PP
Definition at line 940 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_new_null()   \fBSKM_sk_new_null\fP(\fBIPAddressFamily\fP)"

.PP
Definition at line 941 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_num(st)   \fBSKM_sk_num\fP(\fBIPAddressFamily\fP, (st))"

.PP
Definition at line 943 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_pop(st)   \fBSKM_sk_pop\fP(\fBIPAddressFamily\fP, (st))"

.PP
Definition at line 959 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBIPAddressFamily\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 956 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_push(st, val)   \fBSKM_sk_push\fP(\fBIPAddressFamily\fP, (st), (val))"

.PP
Definition at line 947 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_set(st, i, val)   \fBSKM_sk_set\fP(\fBIPAddressFamily\fP, (st), (i), (val))"

.PP
Definition at line 945 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBIPAddressFamily\fP, (st), (cmp))"

.PP
Definition at line 954 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_shift(st)   \fBSKM_sk_shift\fP(\fBIPAddressFamily\fP, (st))"

.PP
Definition at line 958 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_sort(st)   \fBSKM_sk_sort\fP(\fBIPAddressFamily\fP, (st))"

.PP
Definition at line 960 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBIPAddressFamily\fP, (st), (val))"

.PP
Definition at line 948 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_value(st, i)   \fBSKM_sk_value\fP(\fBIPAddressFamily\fP, (st), (i))"

.PP
Definition at line 944 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressFamily_zero(st)   \fBSKM_sk_zero\fP(\fBIPAddressFamily\fP, (st))"

.PP
Definition at line 946 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBIPAddressOrRange\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 979 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_delete(st, i)   \fBSKM_sk_delete\fP(\fBIPAddressOrRange\fP, (st), (i))"

.PP
Definition at line 973 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBIPAddressOrRange\fP, (st), (ptr))"

.PP
Definition at line 974 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_dup(st)   \fBSKM_sk_dup\fP(\fBIPAddressOrRange\fP, st)"

.PP
Definition at line 977 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_find(st, val)   \fBSKM_sk_find\fP(\fBIPAddressOrRange\fP, (st), (val))"

.PP
Definition at line 971 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBIPAddressOrRange\fP, (st), (val))"

.PP
Definition at line 972 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_free(st)   \fBSKM_sk_free\fP(\fBIPAddressOrRange\fP, (st))"

.PP
Definition at line 964 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBIPAddressOrRange\fP, (st), (val), (i))"

.PP
Definition at line 975 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBIPAddressOrRange\fP, (st))"

.PP
Definition at line 983 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_new(cmp)   \fBSKM_sk_new\fP(\fBIPAddressOrRange\fP, (cmp))"

.PP
Definition at line 962 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_new_null()   \fBSKM_sk_new_null\fP(\fBIPAddressOrRange\fP)"

.PP
Definition at line 963 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_num(st)   \fBSKM_sk_num\fP(\fBIPAddressOrRange\fP, (st))"

.PP
Definition at line 965 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_pop(st)   \fBSKM_sk_pop\fP(\fBIPAddressOrRange\fP, (st))"

.PP
Definition at line 981 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBIPAddressOrRange\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 978 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_push(st, val)   \fBSKM_sk_push\fP(\fBIPAddressOrRange\fP, (st), (val))"

.PP
Definition at line 969 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_set(st, i, val)   \fBSKM_sk_set\fP(\fBIPAddressOrRange\fP, (st), (i), (val))"

.PP
Definition at line 967 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBIPAddressOrRange\fP, (st), (cmp))"

.PP
Definition at line 976 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_shift(st)   \fBSKM_sk_shift\fP(\fBIPAddressOrRange\fP, (st))"

.PP
Definition at line 980 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_sort(st)   \fBSKM_sk_sort\fP(\fBIPAddressOrRange\fP, (st))"

.PP
Definition at line 982 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBIPAddressOrRange\fP, (st), (val))"

.PP
Definition at line 970 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_value(st, i)   \fBSKM_sk_value\fP(\fBIPAddressOrRange\fP, (st), (i))"

.PP
Definition at line 966 of file include/openssl/safestack\&.h\&.
.SS "#define sk_IPAddressOrRange_zero(st)   \fBSKM_sk_zero\fP(\fBIPAddressOrRange\fP, (st))"

.PP
Definition at line 968 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_APREQBODY\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1001 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_APREQBODY\fP, (st), (i))"

.PP
Definition at line 995 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_APREQBODY\fP, (st), (ptr))"

.PP
Definition at line 996 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_APREQBODY\fP, st)"

.PP
Definition at line 999 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_APREQBODY\fP, (st), (val))"

.PP
Definition at line 993 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_APREQBODY\fP, (st), (val))"

.PP
Definition at line 994 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_free(st)   \fBSKM_sk_free\fP(\fBKRB5_APREQBODY\fP, (st))"

.PP
Definition at line 986 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_APREQBODY\fP, (st), (val), (i))"

.PP
Definition at line 997 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_APREQBODY\fP, (st))"

.PP
Definition at line 1005 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_APREQBODY\fP, (cmp))"

.PP
Definition at line 984 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_APREQBODY\fP)"

.PP
Definition at line 985 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_num(st)   \fBSKM_sk_num\fP(\fBKRB5_APREQBODY\fP, (st))"

.PP
Definition at line 987 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_APREQBODY\fP, (st))"

.PP
Definition at line 1003 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_APREQBODY\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1000 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_APREQBODY\fP, (st), (val))"

.PP
Definition at line 991 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_APREQBODY\fP, (st), (i), (val))"

.PP
Definition at line 989 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_APREQBODY\fP, (st), (cmp))"

.PP
Definition at line 998 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_APREQBODY\fP, (st))"

.PP
Definition at line 1002 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_APREQBODY\fP, (st))"

.PP
Definition at line 1004 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_APREQBODY\fP, (st), (val))"

.PP
Definition at line 992 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_APREQBODY\fP, (st), (i))"

.PP
Definition at line 988 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_APREQBODY_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_APREQBODY\fP, (st))"

.PP
Definition at line 990 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_AUTHDATA\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1023 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_AUTHDATA\fP, (st), (i))"

.PP
Definition at line 1017 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_AUTHDATA\fP, (st), (ptr))"

.PP
Definition at line 1018 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_AUTHDATA\fP, st)"

.PP
Definition at line 1021 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"

.PP
Definition at line 1015 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"

.PP
Definition at line 1016 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_free(st)   \fBSKM_sk_free\fP(\fBKRB5_AUTHDATA\fP, (st))"

.PP
Definition at line 1008 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_AUTHDATA\fP, (st), (val), (i))"

.PP
Definition at line 1019 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_AUTHDATA\fP, (st))"

.PP
Definition at line 1027 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_AUTHDATA\fP, (cmp))"

.PP
Definition at line 1006 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_AUTHDATA\fP)"

.PP
Definition at line 1007 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_num(st)   \fBSKM_sk_num\fP(\fBKRB5_AUTHDATA\fP, (st))"

.PP
Definition at line 1009 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_AUTHDATA\fP, (st))"

.PP
Definition at line 1025 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_AUTHDATA\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1022 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"

.PP
Definition at line 1013 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_AUTHDATA\fP, (st), (i), (val))"

.PP
Definition at line 1011 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_AUTHDATA\fP, (st), (cmp))"

.PP
Definition at line 1020 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_AUTHDATA\fP, (st))"

.PP
Definition at line 1024 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_AUTHDATA\fP, (st))"

.PP
Definition at line 1026 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_AUTHDATA\fP, (st), (val))"

.PP
Definition at line 1014 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_AUTHDATA\fP, (st), (i))"

.PP
Definition at line 1010 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHDATA_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_AUTHDATA\fP, (st))"

.PP
Definition at line 1012 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_AUTHENTBODY\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1045 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_AUTHENTBODY\fP, (st), (i))"

.PP
Definition at line 1039 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_AUTHENTBODY\fP, (st), (ptr))"

.PP
Definition at line 1040 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_AUTHENTBODY\fP, st)"

.PP
Definition at line 1043 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"

.PP
Definition at line 1037 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"

.PP
Definition at line 1038 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_free(st)   \fBSKM_sk_free\fP(\fBKRB5_AUTHENTBODY\fP, (st))"

.PP
Definition at line 1030 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val), (i))"

.PP
Definition at line 1041 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_AUTHENTBODY\fP, (st))"

.PP
Definition at line 1049 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_AUTHENTBODY\fP, (cmp))"

.PP
Definition at line 1028 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_AUTHENTBODY\fP)"

.PP
Definition at line 1029 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_num(st)   \fBSKM_sk_num\fP(\fBKRB5_AUTHENTBODY\fP, (st))"

.PP
Definition at line 1031 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_AUTHENTBODY\fP, (st))"

.PP
Definition at line 1047 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_AUTHENTBODY\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1044 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"

.PP
Definition at line 1035 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_AUTHENTBODY\fP, (st), (i), (val))"

.PP
Definition at line 1033 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_AUTHENTBODY\fP, (st), (cmp))"

.PP
Definition at line 1042 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_AUTHENTBODY\fP, (st))"

.PP
Definition at line 1046 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_AUTHENTBODY\fP, (st))"

.PP
Definition at line 1048 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_AUTHENTBODY\fP, (st), (val))"

.PP
Definition at line 1036 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_AUTHENTBODY\fP, (st), (i))"

.PP
Definition at line 1032 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_AUTHENTBODY_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_AUTHENTBODY\fP, (st))"

.PP
Definition at line 1034 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_CHECKSUM\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1067 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_CHECKSUM\fP, (st), (i))"

.PP
Definition at line 1061 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_CHECKSUM\fP, (st), (ptr))"

.PP
Definition at line 1062 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_CHECKSUM\fP, st)"

.PP
Definition at line 1065 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"

.PP
Definition at line 1059 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"

.PP
Definition at line 1060 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_free(st)   \fBSKM_sk_free\fP(\fBKRB5_CHECKSUM\fP, (st))"

.PP
Definition at line 1052 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_CHECKSUM\fP, (st), (val), (i))"

.PP
Definition at line 1063 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_CHECKSUM\fP, (st))"

.PP
Definition at line 1071 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_CHECKSUM\fP, (cmp))"

.PP
Definition at line 1050 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_CHECKSUM\fP)"

.PP
Definition at line 1051 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_num(st)   \fBSKM_sk_num\fP(\fBKRB5_CHECKSUM\fP, (st))"

.PP
Definition at line 1053 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_CHECKSUM\fP, (st))"

.PP
Definition at line 1069 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_CHECKSUM\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1066 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"

.PP
Definition at line 1057 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_CHECKSUM\fP, (st), (i), (val))"

.PP
Definition at line 1055 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_CHECKSUM\fP, (st), (cmp))"

.PP
Definition at line 1064 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_CHECKSUM\fP, (st))"

.PP
Definition at line 1068 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_CHECKSUM\fP, (st))"

.PP
Definition at line 1070 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_CHECKSUM\fP, (st), (val))"

.PP
Definition at line 1058 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_CHECKSUM\fP, (st), (i))"

.PP
Definition at line 1054 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_CHECKSUM_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_CHECKSUM\fP, (st))"

.PP
Definition at line 1056 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_ENCDATA\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1089 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_ENCDATA\fP, (st), (i))"

.PP
Definition at line 1083 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_ENCDATA\fP, (st), (ptr))"

.PP
Definition at line 1084 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_ENCDATA\fP, st)"

.PP
Definition at line 1087 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_ENCDATA\fP, (st), (val))"

.PP
Definition at line 1081 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_ENCDATA\fP, (st), (val))"

.PP
Definition at line 1082 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_free(st)   \fBSKM_sk_free\fP(\fBKRB5_ENCDATA\fP, (st))"

.PP
Definition at line 1074 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_ENCDATA\fP, (st), (val), (i))"

.PP
Definition at line 1085 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_ENCDATA\fP, (st))"

.PP
Definition at line 1093 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_ENCDATA\fP, (cmp))"

.PP
Definition at line 1072 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_ENCDATA\fP)"

.PP
Definition at line 1073 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_num(st)   \fBSKM_sk_num\fP(\fBKRB5_ENCDATA\fP, (st))"

.PP
Definition at line 1075 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_ENCDATA\fP, (st))"

.PP
Definition at line 1091 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_ENCDATA\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1088 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_ENCDATA\fP, (st), (val))"

.PP
Definition at line 1079 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_ENCDATA\fP, (st), (i), (val))"

.PP
Definition at line 1077 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_ENCDATA\fP, (st), (cmp))"

.PP
Definition at line 1086 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_ENCDATA\fP, (st))"

.PP
Definition at line 1090 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_ENCDATA\fP, (st))"

.PP
Definition at line 1092 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_ENCDATA\fP, (st), (val))"

.PP
Definition at line 1080 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_ENCDATA\fP, (st), (i))"

.PP
Definition at line 1076 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCDATA_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_ENCDATA\fP, (st))"

.PP
Definition at line 1078 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_ENCKEY\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1111 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_ENCKEY\fP, (st), (i))"

.PP
Definition at line 1105 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_ENCKEY\fP, (st), (ptr))"

.PP
Definition at line 1106 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_ENCKEY\fP, st)"

.PP
Definition at line 1109 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_ENCKEY\fP, (st), (val))"

.PP
Definition at line 1103 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_ENCKEY\fP, (st), (val))"

.PP
Definition at line 1104 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_free(st)   \fBSKM_sk_free\fP(\fBKRB5_ENCKEY\fP, (st))"

.PP
Definition at line 1096 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_ENCKEY\fP, (st), (val), (i))"

.PP
Definition at line 1107 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_ENCKEY\fP, (st))"

.PP
Definition at line 1115 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_ENCKEY\fP, (cmp))"

.PP
Definition at line 1094 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_ENCKEY\fP)"

.PP
Definition at line 1095 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_num(st)   \fBSKM_sk_num\fP(\fBKRB5_ENCKEY\fP, (st))"

.PP
Definition at line 1097 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_ENCKEY\fP, (st))"

.PP
Definition at line 1113 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_ENCKEY\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1110 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_ENCKEY\fP, (st), (val))"

.PP
Definition at line 1101 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_ENCKEY\fP, (st), (i), (val))"

.PP
Definition at line 1099 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_ENCKEY\fP, (st), (cmp))"

.PP
Definition at line 1108 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_ENCKEY\fP, (st))"

.PP
Definition at line 1112 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_ENCKEY\fP, (st))"

.PP
Definition at line 1114 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_ENCKEY\fP, (st), (val))"

.PP
Definition at line 1102 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_ENCKEY\fP, (st), (i))"

.PP
Definition at line 1098 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_ENCKEY_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_ENCKEY\fP, (st))"

.PP
Definition at line 1100 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_PRINCNAME\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1133 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_PRINCNAME\fP, (st), (i))"

.PP
Definition at line 1127 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_PRINCNAME\fP, (st), (ptr))"

.PP
Definition at line 1128 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_PRINCNAME\fP, st)"

.PP
Definition at line 1131 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"

.PP
Definition at line 1125 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"

.PP
Definition at line 1126 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_free(st)   \fBSKM_sk_free\fP(\fBKRB5_PRINCNAME\fP, (st))"

.PP
Definition at line 1118 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_PRINCNAME\fP, (st), (val), (i))"

.PP
Definition at line 1129 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_PRINCNAME\fP, (st))"

.PP
Definition at line 1137 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_PRINCNAME\fP, (cmp))"

.PP
Definition at line 1116 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_PRINCNAME\fP)"

.PP
Definition at line 1117 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_num(st)   \fBSKM_sk_num\fP(\fBKRB5_PRINCNAME\fP, (st))"

.PP
Definition at line 1119 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_PRINCNAME\fP, (st))"

.PP
Definition at line 1135 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_PRINCNAME\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1132 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"

.PP
Definition at line 1123 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_PRINCNAME\fP, (st), (i), (val))"

.PP
Definition at line 1121 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_PRINCNAME\fP, (st), (cmp))"

.PP
Definition at line 1130 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_PRINCNAME\fP, (st))"

.PP
Definition at line 1134 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_PRINCNAME\fP, (st))"

.PP
Definition at line 1136 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_PRINCNAME\fP, (st), (val))"

.PP
Definition at line 1124 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_PRINCNAME\fP, (st), (i))"

.PP
Definition at line 1120 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_PRINCNAME_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_PRINCNAME\fP, (st))"

.PP
Definition at line 1122 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBKRB5_TKTBODY\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1155 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_delete(st, i)   \fBSKM_sk_delete\fP(\fBKRB5_TKTBODY\fP, (st), (i))"

.PP
Definition at line 1149 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBKRB5_TKTBODY\fP, (st), (ptr))"

.PP
Definition at line 1150 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_dup(st)   \fBSKM_sk_dup\fP(\fBKRB5_TKTBODY\fP, st)"

.PP
Definition at line 1153 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_find(st, val)   \fBSKM_sk_find\fP(\fBKRB5_TKTBODY\fP, (st), (val))"

.PP
Definition at line 1147 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBKRB5_TKTBODY\fP, (st), (val))"

.PP
Definition at line 1148 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_free(st)   \fBSKM_sk_free\fP(\fBKRB5_TKTBODY\fP, (st))"

.PP
Definition at line 1140 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBKRB5_TKTBODY\fP, (st), (val), (i))"

.PP
Definition at line 1151 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBKRB5_TKTBODY\fP, (st))"

.PP
Definition at line 1159 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_new(cmp)   \fBSKM_sk_new\fP(\fBKRB5_TKTBODY\fP, (cmp))"

.PP
Definition at line 1138 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_new_null()   \fBSKM_sk_new_null\fP(\fBKRB5_TKTBODY\fP)"

.PP
Definition at line 1139 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_num(st)   \fBSKM_sk_num\fP(\fBKRB5_TKTBODY\fP, (st))"

.PP
Definition at line 1141 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_pop(st)   \fBSKM_sk_pop\fP(\fBKRB5_TKTBODY\fP, (st))"

.PP
Definition at line 1157 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBKRB5_TKTBODY\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1154 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_push(st, val)   \fBSKM_sk_push\fP(\fBKRB5_TKTBODY\fP, (st), (val))"

.PP
Definition at line 1145 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_set(st, i, val)   \fBSKM_sk_set\fP(\fBKRB5_TKTBODY\fP, (st), (i), (val))"

.PP
Definition at line 1143 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBKRB5_TKTBODY\fP, (st), (cmp))"

.PP
Definition at line 1152 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_shift(st)   \fBSKM_sk_shift\fP(\fBKRB5_TKTBODY\fP, (st))"

.PP
Definition at line 1156 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_sort(st)   \fBSKM_sk_sort\fP(\fBKRB5_TKTBODY\fP, (st))"

.PP
Definition at line 1158 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBKRB5_TKTBODY\fP, (st), (val))"

.PP
Definition at line 1146 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_value(st, i)   \fBSKM_sk_value\fP(\fBKRB5_TKTBODY\fP, (st), (i))"

.PP
Definition at line 1142 of file include/openssl/safestack\&.h\&.
.SS "#define sk_KRB5_TKTBODY_zero(st)   \fBSKM_sk_zero\fP(\fBKRB5_TKTBODY\fP, (st))"

.PP
Definition at line 1144 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(MEM_OBJECT_DATA, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1177 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_delete(st, i)   \fBSKM_sk_delete\fP(MEM_OBJECT_DATA, (st), (i))"

.PP
Definition at line 1171 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(MEM_OBJECT_DATA, (st), (ptr))"

.PP
Definition at line 1172 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_dup(st)   \fBSKM_sk_dup\fP(MEM_OBJECT_DATA, st)"

.PP
Definition at line 1175 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_find(st, val)   \fBSKM_sk_find\fP(MEM_OBJECT_DATA, (st), (val))"

.PP
Definition at line 1169 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_find_ex(st, val)   \fBSKM_sk_find_ex\fP(MEM_OBJECT_DATA, (st), (val))"

.PP
Definition at line 1170 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_free(st)   \fBSKM_sk_free\fP(MEM_OBJECT_DATA, (st))"

.PP
Definition at line 1162 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_insert(st, val, i)   \fBSKM_sk_insert\fP(MEM_OBJECT_DATA, (st), (val), (i))"

.PP
Definition at line 1173 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_is_sorted(st)   \fBSKM_sk_is_sorted\fP(MEM_OBJECT_DATA, (st))"

.PP
Definition at line 1181 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_new(cmp)   \fBSKM_sk_new\fP(MEM_OBJECT_DATA, (cmp))"

.PP
Definition at line 1160 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_new_null()   \fBSKM_sk_new_null\fP(MEM_OBJECT_DATA)"

.PP
Definition at line 1161 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_num(st)   \fBSKM_sk_num\fP(MEM_OBJECT_DATA, (st))"

.PP
Definition at line 1163 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_pop(st)   \fBSKM_sk_pop\fP(MEM_OBJECT_DATA, (st))"

.PP
Definition at line 1179 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(MEM_OBJECT_DATA, (st), (\fBfree_func\fP))"

.PP
Definition at line 1176 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_push(st, val)   \fBSKM_sk_push\fP(MEM_OBJECT_DATA, (st), (val))"

.PP
Definition at line 1167 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_set(st, i, val)   \fBSKM_sk_set\fP(MEM_OBJECT_DATA, (st), (i), (val))"

.PP
Definition at line 1165 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(MEM_OBJECT_DATA, (st), (cmp))"

.PP
Definition at line 1174 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_shift(st)   \fBSKM_sk_shift\fP(MEM_OBJECT_DATA, (st))"

.PP
Definition at line 1178 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_sort(st)   \fBSKM_sk_sort\fP(MEM_OBJECT_DATA, (st))"

.PP
Definition at line 1180 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_unshift(st, val)   \fBSKM_sk_unshift\fP(MEM_OBJECT_DATA, (st), (val))"

.PP
Definition at line 1168 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_value(st, i)   \fBSKM_sk_value\fP(MEM_OBJECT_DATA, (st), (i))"

.PP
Definition at line 1164 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MEM_OBJECT_DATA_zero(st)   \fBSKM_sk_zero\fP(MEM_OBJECT_DATA, (st))"

.PP
Definition at line 1166 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(MIME_HEADER, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1199 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_delete(st, i)   \fBSKM_sk_delete\fP(MIME_HEADER, (st), (i))"

.PP
Definition at line 1193 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(MIME_HEADER, (st), (ptr))"

.PP
Definition at line 1194 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_dup(st)   \fBSKM_sk_dup\fP(MIME_HEADER, st)"

.PP
Definition at line 1197 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_find(st, val)   \fBSKM_sk_find\fP(MIME_HEADER, (st), (val))"

.PP
Definition at line 1191 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_find_ex(st, val)   \fBSKM_sk_find_ex\fP(MIME_HEADER, (st), (val))"

.PP
Definition at line 1192 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_free(st)   \fBSKM_sk_free\fP(MIME_HEADER, (st))"

.PP
Definition at line 1184 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_insert(st, val, i)   \fBSKM_sk_insert\fP(MIME_HEADER, (st), (val), (i))"

.PP
Definition at line 1195 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_is_sorted(st)   \fBSKM_sk_is_sorted\fP(MIME_HEADER, (st))"

.PP
Definition at line 1203 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_new(cmp)   \fBSKM_sk_new\fP(MIME_HEADER, (cmp))"

.PP
Definition at line 1182 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_new_null()   \fBSKM_sk_new_null\fP(MIME_HEADER)"

.PP
Definition at line 1183 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_num(st)   \fBSKM_sk_num\fP(MIME_HEADER, (st))"

.PP
Definition at line 1185 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_pop(st)   \fBSKM_sk_pop\fP(MIME_HEADER, (st))"

.PP
Definition at line 1201 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(MIME_HEADER, (st), (\fBfree_func\fP))"

.PP
Definition at line 1198 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_push(st, val)   \fBSKM_sk_push\fP(MIME_HEADER, (st), (val))"

.PP
Definition at line 1189 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_set(st, i, val)   \fBSKM_sk_set\fP(MIME_HEADER, (st), (i), (val))"

.PP
Definition at line 1187 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(MIME_HEADER, (st), (cmp))"

.PP
Definition at line 1196 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_shift(st)   \fBSKM_sk_shift\fP(MIME_HEADER, (st))"

.PP
Definition at line 1200 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_sort(st)   \fBSKM_sk_sort\fP(MIME_HEADER, (st))"

.PP
Definition at line 1202 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_unshift(st, val)   \fBSKM_sk_unshift\fP(MIME_HEADER, (st), (val))"

.PP
Definition at line 1190 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_value(st, i)   \fBSKM_sk_value\fP(MIME_HEADER, (st), (i))"

.PP
Definition at line 1186 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_HEADER_zero(st)   \fBSKM_sk_zero\fP(MIME_HEADER, (st))"

.PP
Definition at line 1188 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(MIME_PARAM, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1221 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_delete(st, i)   \fBSKM_sk_delete\fP(MIME_PARAM, (st), (i))"

.PP
Definition at line 1215 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(MIME_PARAM, (st), (ptr))"

.PP
Definition at line 1216 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_dup(st)   \fBSKM_sk_dup\fP(MIME_PARAM, st)"

.PP
Definition at line 1219 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_find(st, val)   \fBSKM_sk_find\fP(MIME_PARAM, (st), (val))"

.PP
Definition at line 1213 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_find_ex(st, val)   \fBSKM_sk_find_ex\fP(MIME_PARAM, (st), (val))"

.PP
Definition at line 1214 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_free(st)   \fBSKM_sk_free\fP(MIME_PARAM, (st))"

.PP
Definition at line 1206 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_insert(st, val, i)   \fBSKM_sk_insert\fP(MIME_PARAM, (st), (val), (i))"

.PP
Definition at line 1217 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_is_sorted(st)   \fBSKM_sk_is_sorted\fP(MIME_PARAM, (st))"

.PP
Definition at line 1225 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_new(cmp)   \fBSKM_sk_new\fP(MIME_PARAM, (cmp))"

.PP
Definition at line 1204 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_new_null()   \fBSKM_sk_new_null\fP(MIME_PARAM)"

.PP
Definition at line 1205 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_num(st)   \fBSKM_sk_num\fP(MIME_PARAM, (st))"

.PP
Definition at line 1207 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_pop(st)   \fBSKM_sk_pop\fP(MIME_PARAM, (st))"

.PP
Definition at line 1223 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(MIME_PARAM, (st), (\fBfree_func\fP))"

.PP
Definition at line 1220 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_push(st, val)   \fBSKM_sk_push\fP(MIME_PARAM, (st), (val))"

.PP
Definition at line 1211 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_set(st, i, val)   \fBSKM_sk_set\fP(MIME_PARAM, (st), (i), (val))"

.PP
Definition at line 1209 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(MIME_PARAM, (st), (cmp))"

.PP
Definition at line 1218 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_shift(st)   \fBSKM_sk_shift\fP(MIME_PARAM, (st))"

.PP
Definition at line 1222 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_sort(st)   \fBSKM_sk_sort\fP(MIME_PARAM, (st))"

.PP
Definition at line 1224 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_unshift(st, val)   \fBSKM_sk_unshift\fP(MIME_PARAM, (st), (val))"

.PP
Definition at line 1212 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_value(st, i)   \fBSKM_sk_value\fP(MIME_PARAM, (st), (i))"

.PP
Definition at line 1208 of file include/openssl/safestack\&.h\&.
.SS "#define sk_MIME_PARAM_zero(st)   \fBSKM_sk_zero\fP(MIME_PARAM, (st))"

.PP
Definition at line 1210 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(NAME_FUNCS, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1243 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_delete(st, i)   \fBSKM_sk_delete\fP(NAME_FUNCS, (st), (i))"

.PP
Definition at line 1237 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(NAME_FUNCS, (st), (ptr))"

.PP
Definition at line 1238 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_dup(st)   \fBSKM_sk_dup\fP(NAME_FUNCS, st)"

.PP
Definition at line 1241 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_find(st, val)   \fBSKM_sk_find\fP(NAME_FUNCS, (st), (val))"

.PP
Definition at line 1235 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_find_ex(st, val)   \fBSKM_sk_find_ex\fP(NAME_FUNCS, (st), (val))"

.PP
Definition at line 1236 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_free(st)   \fBSKM_sk_free\fP(NAME_FUNCS, (st))"

.PP
Definition at line 1228 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_insert(st, val, i)   \fBSKM_sk_insert\fP(NAME_FUNCS, (st), (val), (i))"

.PP
Definition at line 1239 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_is_sorted(st)   \fBSKM_sk_is_sorted\fP(NAME_FUNCS, (st))"

.PP
Definition at line 1247 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_new(cmp)   \fBSKM_sk_new\fP(NAME_FUNCS, (cmp))"

.PP
Definition at line 1226 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_new_null()   \fBSKM_sk_new_null\fP(NAME_FUNCS)"

.PP
Definition at line 1227 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_num(st)   \fBSKM_sk_num\fP(NAME_FUNCS, (st))"

.PP
Definition at line 1229 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_pop(st)   \fBSKM_sk_pop\fP(NAME_FUNCS, (st))"

.PP
Definition at line 1245 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(NAME_FUNCS, (st), (\fBfree_func\fP))"

.PP
Definition at line 1242 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_push(st, val)   \fBSKM_sk_push\fP(NAME_FUNCS, (st), (val))"

.PP
Definition at line 1233 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_set(st, i, val)   \fBSKM_sk_set\fP(NAME_FUNCS, (st), (i), (val))"

.PP
Definition at line 1231 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(NAME_FUNCS, (st), (cmp))"

.PP
Definition at line 1240 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_shift(st)   \fBSKM_sk_shift\fP(NAME_FUNCS, (st))"

.PP
Definition at line 1244 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_sort(st)   \fBSKM_sk_sort\fP(NAME_FUNCS, (st))"

.PP
Definition at line 1246 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_unshift(st, val)   \fBSKM_sk_unshift\fP(NAME_FUNCS, (st), (val))"

.PP
Definition at line 1234 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_value(st, i)   \fBSKM_sk_value\fP(NAME_FUNCS, (st), (i))"

.PP
Definition at line 1230 of file include/openssl/safestack\&.h\&.
.SS "#define sk_NAME_FUNCS_zero(st)   \fBSKM_sk_zero\fP(NAME_FUNCS, (st))"

.PP
Definition at line 1232 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBnid_triple\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2145 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_delete(st, i)   \fBSKM_sk_delete\fP(\fBnid_triple\fP, (st), (i))"

.PP
Definition at line 2139 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBnid_triple\fP, (st), (ptr))"

.PP
Definition at line 2140 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_dup(st)   \fBSKM_sk_dup\fP(\fBnid_triple\fP, st)"

.PP
Definition at line 2143 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_find(st, val)   \fBSKM_sk_find\fP(\fBnid_triple\fP, (st), (val))"

.PP
Definition at line 2137 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBnid_triple\fP, (st), (val))"

.PP
Definition at line 2138 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_free(st)   \fBSKM_sk_free\fP(\fBnid_triple\fP, (st))"

.PP
Definition at line 2130 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBnid_triple\fP, (st), (val), (i))"

.PP
Definition at line 2141 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBnid_triple\fP, (st))"

.PP
Definition at line 2149 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_new(cmp)   \fBSKM_sk_new\fP(\fBnid_triple\fP, (cmp))"

.PP
Definition at line 2128 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_new_null()   \fBSKM_sk_new_null\fP(\fBnid_triple\fP)"

.PP
Definition at line 2129 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_num(st)   \fBSKM_sk_num\fP(\fBnid_triple\fP, (st))"

.PP
Definition at line 2131 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_pop(st)   \fBSKM_sk_pop\fP(\fBnid_triple\fP, (st))"

.PP
Definition at line 2147 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBnid_triple\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2144 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_push(st, val)   \fBSKM_sk_push\fP(\fBnid_triple\fP, (st), (val))"

.PP
Definition at line 2135 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_set(st, i, val)   \fBSKM_sk_set\fP(\fBnid_triple\fP, (st), (i), (val))"

.PP
Definition at line 2133 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBnid_triple\fP, (st), (cmp))"

.PP
Definition at line 2142 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_shift(st)   \fBSKM_sk_shift\fP(\fBnid_triple\fP, (st))"

.PP
Definition at line 2146 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_sort(st)   \fBSKM_sk_sort\fP(\fBnid_triple\fP, (st))"

.PP
Definition at line 2148 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBnid_triple\fP, (st), (val))"

.PP
Definition at line 2136 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_value(st, i)   \fBSKM_sk_value\fP(\fBnid_triple\fP, (st), (i))"

.PP
Definition at line 2132 of file include/openssl/safestack\&.h\&.
.SS "#define sk_nid_triple_zero(st)   \fBSKM_sk_zero\fP(\fBnid_triple\fP, (st))"

.PP
Definition at line 2134 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_CERTID\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1265 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_delete(st, i)   \fBSKM_sk_delete\fP(\fBOCSP_CERTID\fP, (st), (i))"

.PP
Definition at line 1259 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_CERTID\fP, (st), (ptr))"

.PP
Definition at line 1260 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_dup(st)   \fBSKM_sk_dup\fP(\fBOCSP_CERTID\fP, st)"

.PP
Definition at line 1263 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_find(st, val)   \fBSKM_sk_find\fP(\fBOCSP_CERTID\fP, (st), (val))"

.PP
Definition at line 1257 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBOCSP_CERTID\fP, (st), (val))"

.PP
Definition at line 1258 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_free(st)   \fBSKM_sk_free\fP(\fBOCSP_CERTID\fP, (st))"

.PP
Definition at line 1250 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBOCSP_CERTID\fP, (st), (val), (i))"

.PP
Definition at line 1261 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_CERTID\fP, (st))"

.PP
Definition at line 1269 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_new(cmp)   \fBSKM_sk_new\fP(\fBOCSP_CERTID\fP, (cmp))"

.PP
Definition at line 1248 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_new_null()   \fBSKM_sk_new_null\fP(\fBOCSP_CERTID\fP)"

.PP
Definition at line 1249 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_num(st)   \fBSKM_sk_num\fP(\fBOCSP_CERTID\fP, (st))"

.PP
Definition at line 1251 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_pop(st)   \fBSKM_sk_pop\fP(\fBOCSP_CERTID\fP, (st))"

.PP
Definition at line 1267 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_CERTID\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1264 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_push(st, val)   \fBSKM_sk_push\fP(\fBOCSP_CERTID\fP, (st), (val))"

.PP
Definition at line 1255 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_set(st, i, val)   \fBSKM_sk_set\fP(\fBOCSP_CERTID\fP, (st), (i), (val))"

.PP
Definition at line 1253 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_CERTID\fP, (st), (cmp))"

.PP
Definition at line 1262 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_shift(st)   \fBSKM_sk_shift\fP(\fBOCSP_CERTID\fP, (st))"

.PP
Definition at line 1266 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_sort(st)   \fBSKM_sk_sort\fP(\fBOCSP_CERTID\fP, (st))"

.PP
Definition at line 1268 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBOCSP_CERTID\fP, (st), (val))"

.PP
Definition at line 1256 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_value(st, i)   \fBSKM_sk_value\fP(\fBOCSP_CERTID\fP, (st), (i))"

.PP
Definition at line 1252 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_CERTID_zero(st)   \fBSKM_sk_zero\fP(\fBOCSP_CERTID\fP, (st))"

.PP
Definition at line 1254 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_ONEREQ\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1287 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_delete(st, i)   \fBSKM_sk_delete\fP(\fBOCSP_ONEREQ\fP, (st), (i))"

.PP
Definition at line 1281 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_ONEREQ\fP, (st), (ptr))"

.PP
Definition at line 1282 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_dup(st)   \fBSKM_sk_dup\fP(\fBOCSP_ONEREQ\fP, st)"

.PP
Definition at line 1285 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_find(st, val)   \fBSKM_sk_find\fP(\fBOCSP_ONEREQ\fP, (st), (val))"

.PP
Definition at line 1279 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBOCSP_ONEREQ\fP, (st), (val))"

.PP
Definition at line 1280 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_free(st)   \fBSKM_sk_free\fP(\fBOCSP_ONEREQ\fP, (st))"

.PP
Definition at line 1272 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBOCSP_ONEREQ\fP, (st), (val), (i))"

.PP
Definition at line 1283 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_ONEREQ\fP, (st))"

.PP
Definition at line 1291 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_new(cmp)   \fBSKM_sk_new\fP(\fBOCSP_ONEREQ\fP, (cmp))"

.PP
Definition at line 1270 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_new_null()   \fBSKM_sk_new_null\fP(\fBOCSP_ONEREQ\fP)"

.PP
Definition at line 1271 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_num(st)   \fBSKM_sk_num\fP(\fBOCSP_ONEREQ\fP, (st))"

.PP
Definition at line 1273 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_pop(st)   \fBSKM_sk_pop\fP(\fBOCSP_ONEREQ\fP, (st))"

.PP
Definition at line 1289 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_ONEREQ\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1286 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_push(st, val)   \fBSKM_sk_push\fP(\fBOCSP_ONEREQ\fP, (st), (val))"

.PP
Definition at line 1277 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_set(st, i, val)   \fBSKM_sk_set\fP(\fBOCSP_ONEREQ\fP, (st), (i), (val))"

.PP
Definition at line 1275 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_ONEREQ\fP, (st), (cmp))"

.PP
Definition at line 1284 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_shift(st)   \fBSKM_sk_shift\fP(\fBOCSP_ONEREQ\fP, (st))"

.PP
Definition at line 1288 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_sort(st)   \fBSKM_sk_sort\fP(\fBOCSP_ONEREQ\fP, (st))"

.PP
Definition at line 1290 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBOCSP_ONEREQ\fP, (st), (val))"

.PP
Definition at line 1278 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_value(st, i)   \fBSKM_sk_value\fP(\fBOCSP_ONEREQ\fP, (st), (i))"

.PP
Definition at line 1274 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_ONEREQ_zero(st)   \fBSKM_sk_zero\fP(\fBOCSP_ONEREQ\fP, (st))"

.PP
Definition at line 1276 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_RESPID\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1309 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_delete(st, i)   \fBSKM_sk_delete\fP(\fBOCSP_RESPID\fP, (st), (i))"

.PP
Definition at line 1303 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_RESPID\fP, (st), (ptr))"

.PP
Definition at line 1304 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_dup(st)   \fBSKM_sk_dup\fP(\fBOCSP_RESPID\fP, st)"

.PP
Definition at line 1307 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_find(st, val)   \fBSKM_sk_find\fP(\fBOCSP_RESPID\fP, (st), (val))"

.PP
Definition at line 1301 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBOCSP_RESPID\fP, (st), (val))"

.PP
Definition at line 1302 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_free(st)   \fBSKM_sk_free\fP(\fBOCSP_RESPID\fP, (st))"

.PP
Definition at line 1294 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBOCSP_RESPID\fP, (st), (val), (i))"

.PP
Definition at line 1305 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_RESPID\fP, (st))"

.PP
Definition at line 1313 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_new(cmp)   \fBSKM_sk_new\fP(\fBOCSP_RESPID\fP, (cmp))"

.PP
Definition at line 1292 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_new_null()   \fBSKM_sk_new_null\fP(\fBOCSP_RESPID\fP)"

.PP
Definition at line 1293 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_num(st)   \fBSKM_sk_num\fP(\fBOCSP_RESPID\fP, (st))"

.PP
Definition at line 1295 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_pop(st)   \fBSKM_sk_pop\fP(\fBOCSP_RESPID\fP, (st))"

.PP
Definition at line 1311 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_RESPID\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1308 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_push(st, val)   \fBSKM_sk_push\fP(\fBOCSP_RESPID\fP, (st), (val))"

.PP
Definition at line 1299 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_set(st, i, val)   \fBSKM_sk_set\fP(\fBOCSP_RESPID\fP, (st), (i), (val))"

.PP
Definition at line 1297 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_RESPID\fP, (st), (cmp))"

.PP
Definition at line 1306 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_shift(st)   \fBSKM_sk_shift\fP(\fBOCSP_RESPID\fP, (st))"

.PP
Definition at line 1310 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_sort(st)   \fBSKM_sk_sort\fP(\fBOCSP_RESPID\fP, (st))"

.PP
Definition at line 1312 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBOCSP_RESPID\fP, (st), (val))"

.PP
Definition at line 1300 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_value(st, i)   \fBSKM_sk_value\fP(\fBOCSP_RESPID\fP, (st), (i))"

.PP
Definition at line 1296 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_RESPID_zero(st)   \fBSKM_sk_zero\fP(\fBOCSP_RESPID\fP, (st))"

.PP
Definition at line 1298 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBOCSP_SINGLERESP\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1331 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_delete(st, i)   \fBSKM_sk_delete\fP(\fBOCSP_SINGLERESP\fP, (st), (i))"

.PP
Definition at line 1325 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBOCSP_SINGLERESP\fP, (st), (ptr))"

.PP
Definition at line 1326 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_dup(st)   \fBSKM_sk_dup\fP(\fBOCSP_SINGLERESP\fP, st)"

.PP
Definition at line 1329 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_find(st, val)   \fBSKM_sk_find\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"

.PP
Definition at line 1323 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"

.PP
Definition at line 1324 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_free(st)   \fBSKM_sk_free\fP(\fBOCSP_SINGLERESP\fP, (st))"

.PP
Definition at line 1316 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBOCSP_SINGLERESP\fP, (st), (val), (i))"

.PP
Definition at line 1327 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBOCSP_SINGLERESP\fP, (st))"

.PP
Definition at line 1335 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_new(cmp)   \fBSKM_sk_new\fP(\fBOCSP_SINGLERESP\fP, (cmp))"

.PP
Definition at line 1314 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_new_null()   \fBSKM_sk_new_null\fP(\fBOCSP_SINGLERESP\fP)"

.PP
Definition at line 1315 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_num(st)   \fBSKM_sk_num\fP(\fBOCSP_SINGLERESP\fP, (st))"

.PP
Definition at line 1317 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_pop(st)   \fBSKM_sk_pop\fP(\fBOCSP_SINGLERESP\fP, (st))"

.PP
Definition at line 1333 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBOCSP_SINGLERESP\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1330 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_push(st, val)   \fBSKM_sk_push\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"

.PP
Definition at line 1321 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_set(st, i, val)   \fBSKM_sk_set\fP(\fBOCSP_SINGLERESP\fP, (st), (i), (val))"

.PP
Definition at line 1319 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBOCSP_SINGLERESP\fP, (st), (cmp))"

.PP
Definition at line 1328 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_shift(st)   \fBSKM_sk_shift\fP(\fBOCSP_SINGLERESP\fP, (st))"

.PP
Definition at line 1332 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_sort(st)   \fBSKM_sk_sort\fP(\fBOCSP_SINGLERESP\fP, (st))"

.PP
Definition at line 1334 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBOCSP_SINGLERESP\fP, (st), (val))"

.PP
Definition at line 1322 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_value(st, i)   \fBSKM_sk_value\fP(\fBOCSP_SINGLERESP\fP, (st), (i))"

.PP
Definition at line 1318 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OCSP_SINGLERESP_zero(st)   \fBSKM_sk_zero\fP(\fBOCSP_SINGLERESP\fP, (st))"

.PP
Definition at line 1320 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_deep_copy(st, copy_func, \fBfree_func\fP)   ((\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(\fBvoid\fP, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBvoid\fP, \fBfree_func\fP)))"

.PP
Definition at line 2203 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_delete(st, i)   \fBSKM_sk_delete\fP(\fBOPENSSL_BLOCK\fP, (st), (i))"

.PP
Definition at line 2210 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_delete_ptr(st, ptr)   (\fBOPENSSL_BLOCK\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, ptr))"

.PP
Definition at line 2211 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_dup(st)   \fBSKM_sk_dup\fP(\fBOPENSSL_BLOCK\fP, st)"

.PP
Definition at line 2215 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_find(st, val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"

.PP
Definition at line 2199 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_find_ex(st, val)   \fBsk_find_ex\fP((\fB_STACK\fP *)CHECKED_CONST_PTR_OF(\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP), st), CHECKED_CONST_PTR_OF(\fBvoid\fP, val))"

.PP
Definition at line 2209 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_free(st)   \fBSKM_sk_free\fP(\fBOPENSSL_BLOCK\fP, st)"

.PP
Definition at line 2205 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_insert(st, val, i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val), i)"

.PP
Definition at line 2204 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBOPENSSL_BLOCK\fP, (st))"

.PP
Definition at line 2219 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_new(cmp)   ((\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(\fBvoid\fP, cmp)))"

.PP
Definition at line 2196 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_new_null()   ((\fBSTACK_OF\fP(\fBOPENSSL_BLOCK\fP) *)\fBsk_new_null\fP())"

.PP
Definition at line 2197 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_num(st)   \fBSKM_sk_num\fP(\fBOPENSSL_BLOCK\fP, st)"

.PP
Definition at line 2201 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_pop(st)   (\fBvoid\fP *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st))"

.PP
Definition at line 2217 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_pop_free(st, \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(\fBvoid\fP, \fBfree_func\fP))"

.PP
Definition at line 2202 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_push(st, val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"

.PP
Definition at line 2198 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_set(st, i, val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), i, \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"

.PP
Definition at line 2206 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_set_cmp_func(st, cmp)"
\fBValue:\fP
.PP
.nf
((int (*)(const void * const *,const void * const *)) \
        sk_set_cmp_func(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_SK_CMP_FUNC(void, cmp)))
.fi
.PP
Definition at line 2212 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_shift(st)   \fBSKM_sk_shift\fP(\fBOPENSSL_BLOCK\fP, (st))"

.PP
Definition at line 2216 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_sort(st)   \fBSKM_sk_sort\fP(\fBOPENSSL_BLOCK\fP, (st))"

.PP
Definition at line 2218 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_unshift(st, val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), \fBCHECKED_PTR_OF\fP(\fBvoid\fP, val))"

.PP
Definition at line 2208 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_value(st, i)   ((\fBOPENSSL_BLOCK\fP)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_BLOCK\fP, st), i))"

.PP
Definition at line 2200 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_BLOCK_zero(st)   \fBSKM_sk_zero\fP(\fBOPENSSL_BLOCK\fP, (st))"

.PP
Definition at line 2207 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_deep_copy(st, copy_func, \fBfree_func\fP)   ((\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(\fBOPENSSL_STRING\fP, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBOPENSSL_STRING\fP, \fBfree_func\fP)))"

.PP
Definition at line 2227 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_delete(st, i)   \fBSKM_sk_delete\fP(\fBOPENSSL_PSTRING\fP, (st), (i))"

.PP
Definition at line 2234 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_delete_ptr(st, ptr)   (\fBOPENSSL_PSTRING\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, ptr))"

.PP
Definition at line 2235 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_dup(st)   \fBSKM_sk_dup\fP(\fBOPENSSL_PSTRING\fP, st)"

.PP
Definition at line 2239 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_find(st, val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"

.PP
Definition at line 2223 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_find_ex(st, val)   \fBsk_find_ex\fP((\fB_STACK\fP *)CHECKED_CONST_PTR_OF(\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP), st), CHECKED_CONST_PTR_OF(\fBOPENSSL_STRING\fP, val))"

.PP
Definition at line 2233 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_free(st)   \fBSKM_sk_free\fP(\fBOPENSSL_PSTRING\fP, st)"

.PP
Definition at line 2229 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_insert(st, val, i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val), i)"

.PP
Definition at line 2228 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBOPENSSL_PSTRING\fP, (st))"

.PP
Definition at line 2243 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_new(cmp)   ((\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(\fBOPENSSL_STRING\fP, cmp)))"

.PP
Definition at line 2220 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_new_null()   ((\fBSTACK_OF\fP(\fBOPENSSL_PSTRING\fP) *)\fBsk_new_null\fP())"

.PP
Definition at line 2221 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_num(st)   \fBSKM_sk_num\fP(\fBOPENSSL_PSTRING\fP, st)"

.PP
Definition at line 2225 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_pop(st)   (\fBOPENSSL_STRING\fP *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st))"

.PP
Definition at line 2241 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_pop_free(st, \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(\fBOPENSSL_STRING\fP, \fBfree_func\fP))"

.PP
Definition at line 2226 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_push(st, val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"

.PP
Definition at line 2222 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_set(st, i, val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), i, \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"

.PP
Definition at line 2230 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_set_cmp_func(st, cmp)"
\fBValue:\fP
.PP
.nf
((int (*)(const OPENSSL_STRING * const *,const OPENSSL_STRING * const *)) \
        sk_set_cmp_func(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_SK_CMP_FUNC(OPENSSL_STRING, cmp)))
.fi
.PP
Definition at line 2236 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_shift(st)   \fBSKM_sk_shift\fP(\fBOPENSSL_PSTRING\fP, (st))"

.PP
Definition at line 2240 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_sort(st)   \fBSKM_sk_sort\fP(\fBOPENSSL_PSTRING\fP, (st))"

.PP
Definition at line 2242 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_unshift(st, val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), \fBCHECKED_PTR_OF\fP(\fBOPENSSL_STRING\fP, val))"

.PP
Definition at line 2232 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_value(st, i)   ((\fBOPENSSL_PSTRING\fP)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_PSTRING\fP, st), i))"

.PP
Definition at line 2224 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_PSTRING_zero(st)   \fBSKM_sk_zero\fP(\fBOPENSSL_PSTRING\fP, (st))"

.PP
Definition at line 2231 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_deep_copy(st, copy_func, \fBfree_func\fP)   ((\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(char, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(char, \fBfree_func\fP)))"

.PP
Definition at line 2179 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_delete(st, i)   \fBSKM_sk_delete\fP(\fBOPENSSL_STRING\fP, (st), (i))"

.PP
Definition at line 2186 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_delete_ptr(st, ptr)   (\fBOPENSSL_STRING\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, ptr))"

.PP
Definition at line 2187 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_dup(st)   \fBSKM_sk_dup\fP(\fBOPENSSL_STRING\fP, st)"

.PP
Definition at line 2191 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_find(st, val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val))"

.PP
Definition at line 2175 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_find_ex(st, val)   \fBsk_find_ex\fP((\fB_STACK\fP *)CHECKED_CONST_PTR_OF(\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP), st), CHECKED_CONST_PTR_OF(char, val))"

.PP
Definition at line 2185 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_free(st)   \fBSKM_sk_free\fP(\fBOPENSSL_STRING\fP, st)"

.PP
Definition at line 2181 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_insert(st, val, i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val), i)"

.PP
Definition at line 2180 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBOPENSSL_STRING\fP, (st))"

.PP
Definition at line 2195 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_new(cmp)   ((\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(char, cmp)))"

.PP
Definition at line 2172 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_new_null()   ((\fBSTACK_OF\fP(\fBOPENSSL_STRING\fP) *)\fBsk_new_null\fP())"

.PP
Definition at line 2173 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_num(st)   \fBSKM_sk_num\fP(\fBOPENSSL_STRING\fP, st)"

.PP
Definition at line 2177 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_pop(st)   (char *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st))"

.PP
Definition at line 2193 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_pop_free(st, \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(char, \fBfree_func\fP))"

.PP
Definition at line 2178 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_push(st, val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val))"

.PP
Definition at line 2174 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_set(st, i, val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), i, \fBCHECKED_PTR_OF\fP(char, val))"

.PP
Definition at line 2182 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_set_cmp_func(st, cmp)"
\fBValue:\fP
.PP
.nf
((int (*)(const char * const *,const char * const *)) \
        sk_set_cmp_func(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_SK_CMP_FUNC(char, cmp)))
.fi
.PP
Definition at line 2188 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_shift(st)   \fBSKM_sk_shift\fP(\fBOPENSSL_STRING\fP, (st))"

.PP
Definition at line 2192 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_sort(st)   \fBSKM_sk_sort\fP(\fBOPENSSL_STRING\fP, (st))"

.PP
Definition at line 2194 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_unshift(st, val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), \fBCHECKED_PTR_OF\fP(char, val))"

.PP
Definition at line 2184 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_value(st, i)   ((\fBOPENSSL_STRING\fP)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBOPENSSL_STRING\fP, st), i))"

.PP
Definition at line 2176 of file include/openssl/safestack\&.h\&.
.SS "#define sk_OPENSSL_STRING_zero(st)   \fBSKM_sk_zero\fP(\fBOPENSSL_STRING\fP, (st))"

.PP
Definition at line 2183 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS12_SAFEBAG\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1353 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_delete(st, i)   \fBSKM_sk_delete\fP(\fBPKCS12_SAFEBAG\fP, (st), (i))"

.PP
Definition at line 1347 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS12_SAFEBAG\fP, (st), (ptr))"

.PP
Definition at line 1348 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_dup(st)   \fBSKM_sk_dup\fP(\fBPKCS12_SAFEBAG\fP, st)"

.PP
Definition at line 1351 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_find(st, val)   \fBSKM_sk_find\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"

.PP
Definition at line 1345 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"

.PP
Definition at line 1346 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_free(st)   \fBSKM_sk_free\fP(\fBPKCS12_SAFEBAG\fP, (st))"

.PP
Definition at line 1338 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBPKCS12_SAFEBAG\fP, (st), (val), (i))"

.PP
Definition at line 1349 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS12_SAFEBAG\fP, (st))"

.PP
Definition at line 1357 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_new(cmp)   \fBSKM_sk_new\fP(\fBPKCS12_SAFEBAG\fP, (cmp))"

.PP
Definition at line 1336 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_new_null()   \fBSKM_sk_new_null\fP(\fBPKCS12_SAFEBAG\fP)"

.PP
Definition at line 1337 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_num(st)   \fBSKM_sk_num\fP(\fBPKCS12_SAFEBAG\fP, (st))"

.PP
Definition at line 1339 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_pop(st)   \fBSKM_sk_pop\fP(\fBPKCS12_SAFEBAG\fP, (st))"

.PP
Definition at line 1355 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS12_SAFEBAG\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1352 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_push(st, val)   \fBSKM_sk_push\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"

.PP
Definition at line 1343 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_set(st, i, val)   \fBSKM_sk_set\fP(\fBPKCS12_SAFEBAG\fP, (st), (i), (val))"

.PP
Definition at line 1341 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS12_SAFEBAG\fP, (st), (cmp))"

.PP
Definition at line 1350 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_shift(st)   \fBSKM_sk_shift\fP(\fBPKCS12_SAFEBAG\fP, (st))"

.PP
Definition at line 1354 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_sort(st)   \fBSKM_sk_sort\fP(\fBPKCS12_SAFEBAG\fP, (st))"

.PP
Definition at line 1356 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBPKCS12_SAFEBAG\fP, (st), (val))"

.PP
Definition at line 1344 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_value(st, i)   \fBSKM_sk_value\fP(\fBPKCS12_SAFEBAG\fP, (st), (i))"

.PP
Definition at line 1340 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS12_SAFEBAG_zero(st)   \fBSKM_sk_zero\fP(\fBPKCS12_SAFEBAG\fP, (st))"

.PP
Definition at line 1342 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS7\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1375 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_delete(st, i)   \fBSKM_sk_delete\fP(\fBPKCS7\fP, (st), (i))"

.PP
Definition at line 1369 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS7\fP, (st), (ptr))"

.PP
Definition at line 1370 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_dup(st)   \fBSKM_sk_dup\fP(\fBPKCS7\fP, st)"

.PP
Definition at line 1373 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_find(st, val)   \fBSKM_sk_find\fP(\fBPKCS7\fP, (st), (val))"

.PP
Definition at line 1367 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBPKCS7\fP, (st), (val))"

.PP
Definition at line 1368 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_free(st)   \fBSKM_sk_free\fP(\fBPKCS7\fP, (st))"

.PP
Definition at line 1360 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBPKCS7\fP, (st), (val), (i))"

.PP
Definition at line 1371 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS7\fP, (st))"

.PP
Definition at line 1379 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_new(cmp)   \fBSKM_sk_new\fP(\fBPKCS7\fP, (cmp))"

.PP
Definition at line 1358 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_new_null()   \fBSKM_sk_new_null\fP(\fBPKCS7\fP)"

.PP
Definition at line 1359 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_num(st)   \fBSKM_sk_num\fP(\fBPKCS7\fP, (st))"

.PP
Definition at line 1361 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_pop(st)   \fBSKM_sk_pop\fP(\fBPKCS7\fP, (st))"

.PP
Definition at line 1377 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS7\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1374 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_push(st, val)   \fBSKM_sk_push\fP(\fBPKCS7\fP, (st), (val))"

.PP
Definition at line 1365 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS7_RECIP_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1397 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_delete(st, i)   \fBSKM_sk_delete\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i))"

.PP
Definition at line 1391 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS7_RECIP_INFO\fP, (st), (ptr))"

.PP
Definition at line 1392 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_dup(st)   \fBSKM_sk_dup\fP(\fBPKCS7_RECIP_INFO\fP, st)"

.PP
Definition at line 1395 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_find(st, val)   \fBSKM_sk_find\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"

.PP
Definition at line 1389 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"

.PP
Definition at line 1390 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_free(st)   \fBSKM_sk_free\fP(\fBPKCS7_RECIP_INFO\fP, (st))"

.PP
Definition at line 1382 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val), (i))"

.PP
Definition at line 1393 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS7_RECIP_INFO\fP, (st))"

.PP
Definition at line 1401 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_new(cmp)   \fBSKM_sk_new\fP(\fBPKCS7_RECIP_INFO\fP, (cmp))"

.PP
Definition at line 1380 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_new_null()   \fBSKM_sk_new_null\fP(\fBPKCS7_RECIP_INFO\fP)"

.PP
Definition at line 1381 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_num(st)   \fBSKM_sk_num\fP(\fBPKCS7_RECIP_INFO\fP, (st))"

.PP
Definition at line 1383 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_pop(st)   \fBSKM_sk_pop\fP(\fBPKCS7_RECIP_INFO\fP, (st))"

.PP
Definition at line 1399 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS7_RECIP_INFO\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1396 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_push(st, val)   \fBSKM_sk_push\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"

.PP
Definition at line 1387 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_set(st, i, val)   \fBSKM_sk_set\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i), (val))"

.PP
Definition at line 1385 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS7_RECIP_INFO\fP, (st), (cmp))"

.PP
Definition at line 1394 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_shift(st)   \fBSKM_sk_shift\fP(\fBPKCS7_RECIP_INFO\fP, (st))"

.PP
Definition at line 1398 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_sort(st)   \fBSKM_sk_sort\fP(\fBPKCS7_RECIP_INFO\fP, (st))"

.PP
Definition at line 1400 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBPKCS7_RECIP_INFO\fP, (st), (val))"

.PP
Definition at line 1388 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_value(st, i)   \fBSKM_sk_value\fP(\fBPKCS7_RECIP_INFO\fP, (st), (i))"

.PP
Definition at line 1384 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_RECIP_INFO_zero(st)   \fBSKM_sk_zero\fP(\fBPKCS7_RECIP_INFO\fP, (st))"

.PP
Definition at line 1386 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_set(st, i, val)   \fBSKM_sk_set\fP(\fBPKCS7\fP, (st), (i), (val))"

.PP
Definition at line 1363 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS7\fP, (st), (cmp))"

.PP
Definition at line 1372 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_shift(st)   \fBSKM_sk_shift\fP(\fBPKCS7\fP, (st))"

.PP
Definition at line 1376 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1419 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_delete(st, i)   \fBSKM_sk_delete\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i))"

.PP
Definition at line 1413 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (ptr))"

.PP
Definition at line 1414 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_dup(st)   \fBSKM_sk_dup\fP(\fBPKCS7_SIGNER_INFO\fP, st)"

.PP
Definition at line 1417 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_find(st, val)   \fBSKM_sk_find\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"

.PP
Definition at line 1411 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"

.PP
Definition at line 1412 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_free(st)   \fBSKM_sk_free\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"

.PP
Definition at line 1404 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val), (i))"

.PP
Definition at line 1415 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"

.PP
Definition at line 1423 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_new(cmp)   \fBSKM_sk_new\fP(\fBPKCS7_SIGNER_INFO\fP, (cmp))"

.PP
Definition at line 1402 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_new_null()   \fBSKM_sk_new_null\fP(\fBPKCS7_SIGNER_INFO\fP)"

.PP
Definition at line 1403 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_num(st)   \fBSKM_sk_num\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"

.PP
Definition at line 1405 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_pop(st)   \fBSKM_sk_pop\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"

.PP
Definition at line 1421 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1418 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_push(st, val)   \fBSKM_sk_push\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"

.PP
Definition at line 1409 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_set(st, i, val)   \fBSKM_sk_set\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i), (val))"

.PP
Definition at line 1407 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (cmp))"

.PP
Definition at line 1416 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_shift(st)   \fBSKM_sk_shift\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"

.PP
Definition at line 1420 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_sort(st)   \fBSKM_sk_sort\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"

.PP
Definition at line 1422 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (val))"

.PP
Definition at line 1410 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_value(st, i)   \fBSKM_sk_value\fP(\fBPKCS7_SIGNER_INFO\fP, (st), (i))"

.PP
Definition at line 1406 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_SIGNER_INFO_zero(st)   \fBSKM_sk_zero\fP(\fBPKCS7_SIGNER_INFO\fP, (st))"

.PP
Definition at line 1408 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_sort(st)   \fBSKM_sk_sort\fP(\fBPKCS7\fP, (st))"

.PP
Definition at line 1378 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBPKCS7\fP, (st), (val))"

.PP
Definition at line 1366 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_value(st, i)   \fBSKM_sk_value\fP(\fBPKCS7\fP, (st), (i))"

.PP
Definition at line 1362 of file include/openssl/safestack\&.h\&.
.SS "#define sk_PKCS7_zero(st)   \fBSKM_sk_zero\fP(\fBPKCS7\fP, (st))"

.PP
Definition at line 1364 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPOLICY_MAPPING\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1485 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_delete(st, i)   \fBSKM_sk_delete\fP(\fBPOLICY_MAPPING\fP, (st), (i))"

.PP
Definition at line 1479 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBPOLICY_MAPPING\fP, (st), (ptr))"

.PP
Definition at line 1480 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_dup(st)   \fBSKM_sk_dup\fP(\fBPOLICY_MAPPING\fP, st)"

.PP
Definition at line 1483 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_find(st, val)   \fBSKM_sk_find\fP(\fBPOLICY_MAPPING\fP, (st), (val))"

.PP
Definition at line 1477 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBPOLICY_MAPPING\fP, (st), (val))"

.PP
Definition at line 1478 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_free(st)   \fBSKM_sk_free\fP(\fBPOLICY_MAPPING\fP, (st))"

.PP
Definition at line 1470 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBPOLICY_MAPPING\fP, (st), (val), (i))"

.PP
Definition at line 1481 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBPOLICY_MAPPING\fP, (st))"

.PP
Definition at line 1489 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_new(cmp)   \fBSKM_sk_new\fP(\fBPOLICY_MAPPING\fP, (cmp))"

.PP
Definition at line 1468 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_new_null()   \fBSKM_sk_new_null\fP(\fBPOLICY_MAPPING\fP)"

.PP
Definition at line 1469 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_num(st)   \fBSKM_sk_num\fP(\fBPOLICY_MAPPING\fP, (st))"

.PP
Definition at line 1471 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_pop(st)   \fBSKM_sk_pop\fP(\fBPOLICY_MAPPING\fP, (st))"

.PP
Definition at line 1487 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPOLICY_MAPPING\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1484 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_push(st, val)   \fBSKM_sk_push\fP(\fBPOLICY_MAPPING\fP, (st), (val))"

.PP
Definition at line 1475 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_set(st, i, val)   \fBSKM_sk_set\fP(\fBPOLICY_MAPPING\fP, (st), (i), (val))"

.PP
Definition at line 1473 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPOLICY_MAPPING\fP, (st), (cmp))"

.PP
Definition at line 1482 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_shift(st)   \fBSKM_sk_shift\fP(\fBPOLICY_MAPPING\fP, (st))"

.PP
Definition at line 1486 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_sort(st)   \fBSKM_sk_sort\fP(\fBPOLICY_MAPPING\fP, (st))"

.PP
Definition at line 1488 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBPOLICY_MAPPING\fP, (st), (val))"

.PP
Definition at line 1476 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_value(st, i)   \fBSKM_sk_value\fP(\fBPOLICY_MAPPING\fP, (st), (i))"

.PP
Definition at line 1472 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICY_MAPPING_zero(st)   \fBSKM_sk_zero\fP(\fBPOLICY_MAPPING\fP, (st))"

.PP
Definition at line 1474 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPOLICYINFO\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1441 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_delete(st, i)   \fBSKM_sk_delete\fP(\fBPOLICYINFO\fP, (st), (i))"

.PP
Definition at line 1435 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBPOLICYINFO\fP, (st), (ptr))"

.PP
Definition at line 1436 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_dup(st)   \fBSKM_sk_dup\fP(\fBPOLICYINFO\fP, st)"

.PP
Definition at line 1439 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_find(st, val)   \fBSKM_sk_find\fP(\fBPOLICYINFO\fP, (st), (val))"

.PP
Definition at line 1433 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBPOLICYINFO\fP, (st), (val))"

.PP
Definition at line 1434 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_free(st)   \fBSKM_sk_free\fP(\fBPOLICYINFO\fP, (st))"

.PP
Definition at line 1426 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBPOLICYINFO\fP, (st), (val), (i))"

.PP
Definition at line 1437 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBPOLICYINFO\fP, (st))"

.PP
Definition at line 1445 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_new(cmp)   \fBSKM_sk_new\fP(\fBPOLICYINFO\fP, (cmp))"

.PP
Definition at line 1424 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_new_null()   \fBSKM_sk_new_null\fP(\fBPOLICYINFO\fP)"

.PP
Definition at line 1425 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_num(st)   \fBSKM_sk_num\fP(\fBPOLICYINFO\fP, (st))"

.PP
Definition at line 1427 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_pop(st)   \fBSKM_sk_pop\fP(\fBPOLICYINFO\fP, (st))"

.PP
Definition at line 1443 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPOLICYINFO\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1440 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_push(st, val)   \fBSKM_sk_push\fP(\fBPOLICYINFO\fP, (st), (val))"

.PP
Definition at line 1431 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_set(st, i, val)   \fBSKM_sk_set\fP(\fBPOLICYINFO\fP, (st), (i), (val))"

.PP
Definition at line 1429 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPOLICYINFO\fP, (st), (cmp))"

.PP
Definition at line 1438 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_shift(st)   \fBSKM_sk_shift\fP(\fBPOLICYINFO\fP, (st))"

.PP
Definition at line 1442 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_sort(st)   \fBSKM_sk_sort\fP(\fBPOLICYINFO\fP, (st))"

.PP
Definition at line 1444 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBPOLICYINFO\fP, (st), (val))"

.PP
Definition at line 1432 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_value(st, i)   \fBSKM_sk_value\fP(\fBPOLICYINFO\fP, (st), (i))"

.PP
Definition at line 1428 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYINFO_zero(st)   \fBSKM_sk_zero\fP(\fBPOLICYINFO\fP, (st))"

.PP
Definition at line 1430 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBPOLICYQUALINFO\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1463 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_delete(st, i)   \fBSKM_sk_delete\fP(\fBPOLICYQUALINFO\fP, (st), (i))"

.PP
Definition at line 1457 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBPOLICYQUALINFO\fP, (st), (ptr))"

.PP
Definition at line 1458 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_dup(st)   \fBSKM_sk_dup\fP(\fBPOLICYQUALINFO\fP, st)"

.PP
Definition at line 1461 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_find(st, val)   \fBSKM_sk_find\fP(\fBPOLICYQUALINFO\fP, (st), (val))"

.PP
Definition at line 1455 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBPOLICYQUALINFO\fP, (st), (val))"

.PP
Definition at line 1456 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_free(st)   \fBSKM_sk_free\fP(\fBPOLICYQUALINFO\fP, (st))"

.PP
Definition at line 1448 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBPOLICYQUALINFO\fP, (st), (val), (i))"

.PP
Definition at line 1459 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBPOLICYQUALINFO\fP, (st))"

.PP
Definition at line 1467 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_new(cmp)   \fBSKM_sk_new\fP(\fBPOLICYQUALINFO\fP, (cmp))"

.PP
Definition at line 1446 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_new_null()   \fBSKM_sk_new_null\fP(\fBPOLICYQUALINFO\fP)"

.PP
Definition at line 1447 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_num(st)   \fBSKM_sk_num\fP(\fBPOLICYQUALINFO\fP, (st))"

.PP
Definition at line 1449 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_pop(st)   \fBSKM_sk_pop\fP(\fBPOLICYQUALINFO\fP, (st))"

.PP
Definition at line 1465 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBPOLICYQUALINFO\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1462 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_push(st, val)   \fBSKM_sk_push\fP(\fBPOLICYQUALINFO\fP, (st), (val))"

.PP
Definition at line 1453 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_set(st, i, val)   \fBSKM_sk_set\fP(\fBPOLICYQUALINFO\fP, (st), (i), (val))"

.PP
Definition at line 1451 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBPOLICYQUALINFO\fP, (st), (cmp))"

.PP
Definition at line 1460 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_shift(st)   \fBSKM_sk_shift\fP(\fBPOLICYQUALINFO\fP, (st))"

.PP
Definition at line 1464 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_sort(st)   \fBSKM_sk_sort\fP(\fBPOLICYQUALINFO\fP, (st))"

.PP
Definition at line 1466 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBPOLICYQUALINFO\fP, (st), (val))"

.PP
Definition at line 1454 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_value(st, i)   \fBSKM_sk_value\fP(\fBPOLICYQUALINFO\fP, (st), (i))"

.PP
Definition at line 1450 of file include/openssl/safestack\&.h\&.
.SS "#define sk_POLICYQUALINFO_zero(st)   \fBSKM_sk_zero\fP(\fBPOLICYQUALINFO\fP, (st))"

.PP
Definition at line 1452 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(SCT, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1507 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_delete(st, i)   \fBSKM_sk_delete\fP(SCT, (st), (i))"

.PP
Definition at line 1501 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(SCT, (st), (ptr))"

.PP
Definition at line 1502 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_dup(st)   \fBSKM_sk_dup\fP(SCT, st)"

.PP
Definition at line 1505 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_find(st, val)   \fBSKM_sk_find\fP(SCT, (st), (val))"

.PP
Definition at line 1499 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_find_ex(st, val)   \fBSKM_sk_find_ex\fP(SCT, (st), (val))"

.PP
Definition at line 1500 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_free(st)   \fBSKM_sk_free\fP(SCT, (st))"

.PP
Definition at line 1492 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_insert(st, val, i)   \fBSKM_sk_insert\fP(SCT, (st), (val), (i))"

.PP
Definition at line 1503 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_is_sorted(st)   \fBSKM_sk_is_sorted\fP(SCT, (st))"

.PP
Definition at line 1511 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_new(cmp)   \fBSKM_sk_new\fP(SCT, (cmp))"

.PP
Definition at line 1490 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_new_null()   \fBSKM_sk_new_null\fP(SCT)"

.PP
Definition at line 1491 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_num(st)   \fBSKM_sk_num\fP(SCT, (st))"

.PP
Definition at line 1493 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_pop(st)   \fBSKM_sk_pop\fP(SCT, (st))"

.PP
Definition at line 1509 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(SCT, (st), (\fBfree_func\fP))"

.PP
Definition at line 1506 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_push(st, val)   \fBSKM_sk_push\fP(SCT, (st), (val))"

.PP
Definition at line 1497 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_set(st, i, val)   \fBSKM_sk_set\fP(SCT, (st), (i), (val))"

.PP
Definition at line 1495 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(SCT, (st), (cmp))"

.PP
Definition at line 1504 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_shift(st)   \fBSKM_sk_shift\fP(SCT, (st))"

.PP
Definition at line 1508 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_sort(st)   \fBSKM_sk_sort\fP(SCT, (st))"

.PP
Definition at line 1510 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_unshift(st, val)   \fBSKM_sk_unshift\fP(SCT, (st), (val))"

.PP
Definition at line 1498 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_value(st, i)   \fBSKM_sk_value\fP(SCT, (st), (i))"

.PP
Definition at line 1494 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SCT_zero(st)   \fBSKM_sk_zero\fP(SCT, (st))"

.PP
Definition at line 1496 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRP_gN_cache\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1551 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_delete(st, i)   \fBSKM_sk_delete\fP(\fBSRP_gN_cache\fP, (st), (i))"

.PP
Definition at line 1545 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRP_gN_cache\fP, (st), (ptr))"

.PP
Definition at line 1546 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_dup(st)   \fBSKM_sk_dup\fP(\fBSRP_gN_cache\fP, st)"

.PP
Definition at line 1549 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_find(st, val)   \fBSKM_sk_find\fP(\fBSRP_gN_cache\fP, (st), (val))"

.PP
Definition at line 1543 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSRP_gN_cache\fP, (st), (val))"

.PP
Definition at line 1544 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_free(st)   \fBSKM_sk_free\fP(\fBSRP_gN_cache\fP, (st))"

.PP
Definition at line 1536 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSRP_gN_cache\fP, (st), (val), (i))"

.PP
Definition at line 1547 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSRP_gN_cache\fP, (st))"

.PP
Definition at line 1555 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_new(cmp)   \fBSKM_sk_new\fP(\fBSRP_gN_cache\fP, (cmp))"

.PP
Definition at line 1534 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_new_null()   \fBSKM_sk_new_null\fP(\fBSRP_gN_cache\fP)"

.PP
Definition at line 1535 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_num(st)   \fBSKM_sk_num\fP(\fBSRP_gN_cache\fP, (st))"

.PP
Definition at line 1537 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_pop(st)   \fBSKM_sk_pop\fP(\fBSRP_gN_cache\fP, (st))"

.PP
Definition at line 1553 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRP_gN_cache\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1550 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_push(st, val)   \fBSKM_sk_push\fP(\fBSRP_gN_cache\fP, (st), (val))"

.PP
Definition at line 1541 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_set(st, i, val)   \fBSKM_sk_set\fP(\fBSRP_gN_cache\fP, (st), (i), (val))"

.PP
Definition at line 1539 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRP_gN_cache\fP, (st), (cmp))"

.PP
Definition at line 1548 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_shift(st)   \fBSKM_sk_shift\fP(\fBSRP_gN_cache\fP, (st))"

.PP
Definition at line 1552 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_sort(st)   \fBSKM_sk_sort\fP(\fBSRP_gN_cache\fP, (st))"

.PP
Definition at line 1554 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSRP_gN_cache\fP, (st), (val))"

.PP
Definition at line 1542 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_value(st, i)   \fBSKM_sk_value\fP(\fBSRP_gN_cache\fP, (st), (i))"

.PP
Definition at line 1538 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_cache_zero(st)   \fBSKM_sk_zero\fP(\fBSRP_gN_cache\fP, (st))"

.PP
Definition at line 1540 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRP_gN\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1529 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_delete(st, i)   \fBSKM_sk_delete\fP(\fBSRP_gN\fP, (st), (i))"

.PP
Definition at line 1523 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRP_gN\fP, (st), (ptr))"

.PP
Definition at line 1524 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_dup(st)   \fBSKM_sk_dup\fP(\fBSRP_gN\fP, st)"

.PP
Definition at line 1527 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_find(st, val)   \fBSKM_sk_find\fP(\fBSRP_gN\fP, (st), (val))"

.PP
Definition at line 1521 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSRP_gN\fP, (st), (val))"

.PP
Definition at line 1522 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_free(st)   \fBSKM_sk_free\fP(\fBSRP_gN\fP, (st))"

.PP
Definition at line 1514 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSRP_gN\fP, (st), (val), (i))"

.PP
Definition at line 1525 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSRP_gN\fP, (st))"

.PP
Definition at line 1533 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_new(cmp)   \fBSKM_sk_new\fP(\fBSRP_gN\fP, (cmp))"

.PP
Definition at line 1512 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_new_null()   \fBSKM_sk_new_null\fP(\fBSRP_gN\fP)"

.PP
Definition at line 1513 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_num(st)   \fBSKM_sk_num\fP(\fBSRP_gN\fP, (st))"

.PP
Definition at line 1515 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_pop(st)   \fBSKM_sk_pop\fP(\fBSRP_gN\fP, (st))"

.PP
Definition at line 1531 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRP_gN\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1528 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_push(st, val)   \fBSKM_sk_push\fP(\fBSRP_gN\fP, (st), (val))"

.PP
Definition at line 1519 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_set(st, i, val)   \fBSKM_sk_set\fP(\fBSRP_gN\fP, (st), (i), (val))"

.PP
Definition at line 1517 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRP_gN\fP, (st), (cmp))"

.PP
Definition at line 1526 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_shift(st)   \fBSKM_sk_shift\fP(\fBSRP_gN\fP, (st))"

.PP
Definition at line 1530 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_sort(st)   \fBSKM_sk_sort\fP(\fBSRP_gN\fP, (st))"

.PP
Definition at line 1532 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSRP_gN\fP, (st), (val))"

.PP
Definition at line 1520 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_value(st, i)   \fBSKM_sk_value\fP(\fBSRP_gN\fP, (st), (i))"

.PP
Definition at line 1516 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_gN_zero(st)   \fBSKM_sk_zero\fP(\fBSRP_gN\fP, (st))"

.PP
Definition at line 1518 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRP_user_pwd\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1573 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_delete(st, i)   \fBSKM_sk_delete\fP(\fBSRP_user_pwd\fP, (st), (i))"

.PP
Definition at line 1567 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRP_user_pwd\fP, (st), (ptr))"

.PP
Definition at line 1568 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_dup(st)   \fBSKM_sk_dup\fP(\fBSRP_user_pwd\fP, st)"

.PP
Definition at line 1571 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_find(st, val)   \fBSKM_sk_find\fP(\fBSRP_user_pwd\fP, (st), (val))"

.PP
Definition at line 1565 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSRP_user_pwd\fP, (st), (val))"

.PP
Definition at line 1566 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_free(st)   \fBSKM_sk_free\fP(\fBSRP_user_pwd\fP, (st))"

.PP
Definition at line 1558 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSRP_user_pwd\fP, (st), (val), (i))"

.PP
Definition at line 1569 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSRP_user_pwd\fP, (st))"

.PP
Definition at line 1577 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_new(cmp)   \fBSKM_sk_new\fP(\fBSRP_user_pwd\fP, (cmp))"

.PP
Definition at line 1556 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_new_null()   \fBSKM_sk_new_null\fP(\fBSRP_user_pwd\fP)"

.PP
Definition at line 1557 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_num(st)   \fBSKM_sk_num\fP(\fBSRP_user_pwd\fP, (st))"

.PP
Definition at line 1559 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_pop(st)   \fBSKM_sk_pop\fP(\fBSRP_user_pwd\fP, (st))"

.PP
Definition at line 1575 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRP_user_pwd\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1572 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_push(st, val)   \fBSKM_sk_push\fP(\fBSRP_user_pwd\fP, (st), (val))"

.PP
Definition at line 1563 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_set(st, i, val)   \fBSKM_sk_set\fP(\fBSRP_user_pwd\fP, (st), (i), (val))"

.PP
Definition at line 1561 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRP_user_pwd\fP, (st), (cmp))"

.PP
Definition at line 1570 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_shift(st)   \fBSKM_sk_shift\fP(\fBSRP_user_pwd\fP, (st))"

.PP
Definition at line 1574 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_sort(st)   \fBSKM_sk_sort\fP(\fBSRP_user_pwd\fP, (st))"

.PP
Definition at line 1576 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSRP_user_pwd\fP, (st), (val))"

.PP
Definition at line 1564 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_value(st, i)   \fBSKM_sk_value\fP(\fBSRP_user_pwd\fP, (st), (i))"

.PP
Definition at line 1560 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRP_user_pwd_zero(st)   \fBSKM_sk_zero\fP(\fBSRP_user_pwd\fP, (st))"

.PP
Definition at line 1562 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1595 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_delete(st, i)   \fBSKM_sk_delete\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (i))"

.PP
Definition at line 1589 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (ptr))"

.PP
Definition at line 1590 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_dup(st)   \fBSKM_sk_dup\fP(\fBSRTP_PROTECTION_PROFILE\fP, st)"

.PP
Definition at line 1593 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_find(st, val)   \fBSKM_sk_find\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"

.PP
Definition at line 1587 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"

.PP
Definition at line 1588 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_free(st)   \fBSKM_sk_free\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"

.PP
Definition at line 1580 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val), (i))"

.PP
Definition at line 1591 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"

.PP
Definition at line 1599 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_new(cmp)   \fBSKM_sk_new\fP(\fBSRTP_PROTECTION_PROFILE\fP, (cmp))"

.PP
Definition at line 1578 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_new_null()   \fBSKM_sk_new_null\fP(\fBSRTP_PROTECTION_PROFILE\fP)"

.PP
Definition at line 1579 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_num(st)   \fBSKM_sk_num\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"

.PP
Definition at line 1581 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_pop(st)   \fBSKM_sk_pop\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"

.PP
Definition at line 1597 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1594 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_push(st, val)   \fBSKM_sk_push\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"

.PP
Definition at line 1585 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_set(st, i, val)   \fBSKM_sk_set\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (i), (val))"

.PP
Definition at line 1583 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (cmp))"

.PP
Definition at line 1592 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_shift(st)   \fBSKM_sk_shift\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"

.PP
Definition at line 1596 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_sort(st)   \fBSKM_sk_sort\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"

.PP
Definition at line 1598 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (val))"

.PP
Definition at line 1586 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_value(st, i)   \fBSKM_sk_value\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st), (i))"

.PP
Definition at line 1582 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SRTP_PROTECTION_PROFILE_zero(st)   \fBSKM_sk_zero\fP(\fBSRTP_PROTECTION_PROFILE\fP, (st))"

.PP
Definition at line 1584 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSSL_CIPHER\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1617 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_delete(st, i)   \fBSKM_sk_delete\fP(\fBSSL_CIPHER\fP, (st), (i))"

.PP
Definition at line 1611 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSSL_CIPHER\fP, (st), (ptr))"

.PP
Definition at line 1612 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_dup(st)   \fBSKM_sk_dup\fP(\fBSSL_CIPHER\fP, st)"

.PP
Definition at line 1615 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_find(st, val)   \fBSKM_sk_find\fP(\fBSSL_CIPHER\fP, (st), (val))"

.PP
Definition at line 1609 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSSL_CIPHER\fP, (st), (val))"

.PP
Definition at line 1610 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_free(st)   \fBSKM_sk_free\fP(\fBSSL_CIPHER\fP, (st))"

.PP
Definition at line 1602 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSSL_CIPHER\fP, (st), (val), (i))"

.PP
Definition at line 1613 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSSL_CIPHER\fP, (st))"

.PP
Definition at line 1621 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_new(cmp)   \fBSKM_sk_new\fP(\fBSSL_CIPHER\fP, (cmp))"

.PP
Definition at line 1600 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_new_null()   \fBSKM_sk_new_null\fP(\fBSSL_CIPHER\fP)"

.PP
Definition at line 1601 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_num(st)   \fBSKM_sk_num\fP(\fBSSL_CIPHER\fP, (st))"

.PP
Definition at line 1603 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_pop(st)   \fBSKM_sk_pop\fP(\fBSSL_CIPHER\fP, (st))"

.PP
Definition at line 1619 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSSL_CIPHER\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1616 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_push(st, val)   \fBSKM_sk_push\fP(\fBSSL_CIPHER\fP, (st), (val))"

.PP
Definition at line 1607 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_set(st, i, val)   \fBSKM_sk_set\fP(\fBSSL_CIPHER\fP, (st), (i), (val))"

.PP
Definition at line 1605 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSSL_CIPHER\fP, (st), (cmp))"

.PP
Definition at line 1614 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_shift(st)   \fBSKM_sk_shift\fP(\fBSSL_CIPHER\fP, (st))"

.PP
Definition at line 1618 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_sort(st)   \fBSKM_sk_sort\fP(\fBSSL_CIPHER\fP, (st))"

.PP
Definition at line 1620 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSSL_CIPHER\fP, (st), (val))"

.PP
Definition at line 1608 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_value(st, i)   \fBSKM_sk_value\fP(\fBSSL_CIPHER\fP, (st), (i))"

.PP
Definition at line 1604 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_CIPHER_zero(st)   \fBSKM_sk_zero\fP(\fBSSL_CIPHER\fP, (st))"

.PP
Definition at line 1606 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSSL_COMP\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1639 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_delete(st, i)   \fBSKM_sk_delete\fP(\fBSSL_COMP\fP, (st), (i))"

.PP
Definition at line 1633 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSSL_COMP\fP, (st), (ptr))"

.PP
Definition at line 1634 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_dup(st)   \fBSKM_sk_dup\fP(\fBSSL_COMP\fP, st)"

.PP
Definition at line 1637 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_find(st, val)   \fBSKM_sk_find\fP(\fBSSL_COMP\fP, (st), (val))"

.PP
Definition at line 1631 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSSL_COMP\fP, (st), (val))"

.PP
Definition at line 1632 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_free(st)   \fBSKM_sk_free\fP(\fBSSL_COMP\fP, (st))"

.PP
Definition at line 1624 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSSL_COMP\fP, (st), (val), (i))"

.PP
Definition at line 1635 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSSL_COMP\fP, (st))"

.PP
Definition at line 1643 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_new(cmp)   \fBSKM_sk_new\fP(\fBSSL_COMP\fP, (cmp))"

.PP
Definition at line 1622 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_new_null()   \fBSKM_sk_new_null\fP(\fBSSL_COMP\fP)"

.PP
Definition at line 1623 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_num(st)   \fBSKM_sk_num\fP(\fBSSL_COMP\fP, (st))"

.PP
Definition at line 1625 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_pop(st)   \fBSKM_sk_pop\fP(\fBSSL_COMP\fP, (st))"

.PP
Definition at line 1641 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSSL_COMP\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1638 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_push(st, val)   \fBSKM_sk_push\fP(\fBSSL_COMP\fP, (st), (val))"

.PP
Definition at line 1629 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_set(st, i, val)   \fBSKM_sk_set\fP(\fBSSL_COMP\fP, (st), (i), (val))"

.PP
Definition at line 1627 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSSL_COMP\fP, (st), (cmp))"

.PP
Definition at line 1636 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_shift(st)   \fBSKM_sk_shift\fP(\fBSSL_COMP\fP, (st))"

.PP
Definition at line 1640 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_sort(st)   \fBSKM_sk_sort\fP(\fBSSL_COMP\fP, (st))"

.PP
Definition at line 1642 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSSL_COMP\fP, (st), (val))"

.PP
Definition at line 1630 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_value(st, i)   \fBSKM_sk_value\fP(\fBSSL_COMP\fP, (st), (i))"

.PP
Definition at line 1626 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SSL_COMP_zero(st)   \fBSKM_sk_zero\fP(\fBSSL_COMP\fP, (st))"

.PP
Definition at line 1628 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(STACK_OF_X509_NAME_ENTRY, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1661 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_delete(st, i)   \fBSKM_sk_delete\fP(STACK_OF_X509_NAME_ENTRY, (st), (i))"

.PP
Definition at line 1655 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(STACK_OF_X509_NAME_ENTRY, (st), (ptr))"

.PP
Definition at line 1656 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_dup(st)   \fBSKM_sk_dup\fP(STACK_OF_X509_NAME_ENTRY, st)"

.PP
Definition at line 1659 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_find(st, val)   \fBSKM_sk_find\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"

.PP
Definition at line 1653 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_find_ex(st, val)   \fBSKM_sk_find_ex\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"

.PP
Definition at line 1654 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_free(st)   \fBSKM_sk_free\fP(STACK_OF_X509_NAME_ENTRY, (st))"

.PP
Definition at line 1646 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_insert(st, val, i)   \fBSKM_sk_insert\fP(STACK_OF_X509_NAME_ENTRY, (st), (val), (i))"

.PP
Definition at line 1657 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_is_sorted(st)   \fBSKM_sk_is_sorted\fP(STACK_OF_X509_NAME_ENTRY, (st))"

.PP
Definition at line 1665 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_new(cmp)   \fBSKM_sk_new\fP(STACK_OF_X509_NAME_ENTRY, (cmp))"

.PP
Definition at line 1644 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_new_null()   \fBSKM_sk_new_null\fP(STACK_OF_X509_NAME_ENTRY)"

.PP
Definition at line 1645 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_num(st)   \fBSKM_sk_num\fP(STACK_OF_X509_NAME_ENTRY, (st))"

.PP
Definition at line 1647 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_pop(st)   \fBSKM_sk_pop\fP(STACK_OF_X509_NAME_ENTRY, (st))"

.PP
Definition at line 1663 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(STACK_OF_X509_NAME_ENTRY, (st), (\fBfree_func\fP))"

.PP
Definition at line 1660 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_push(st, val)   \fBSKM_sk_push\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"

.PP
Definition at line 1651 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_set(st, i, val)   \fBSKM_sk_set\fP(STACK_OF_X509_NAME_ENTRY, (st), (i), (val))"

.PP
Definition at line 1649 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(STACK_OF_X509_NAME_ENTRY, (st), (cmp))"

.PP
Definition at line 1658 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_shift(st)   \fBSKM_sk_shift\fP(STACK_OF_X509_NAME_ENTRY, (st))"

.PP
Definition at line 1662 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_sort(st)   \fBSKM_sk_sort\fP(STACK_OF_X509_NAME_ENTRY, (st))"

.PP
Definition at line 1664 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_unshift(st, val)   \fBSKM_sk_unshift\fP(STACK_OF_X509_NAME_ENTRY, (st), (val))"

.PP
Definition at line 1652 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_value(st, i)   \fBSKM_sk_value\fP(STACK_OF_X509_NAME_ENTRY, (st), (i))"

.PP
Definition at line 1648 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STACK_OF_X509_NAME_ENTRY_zero(st)   \fBSKM_sk_zero\fP(STACK_OF_X509_NAME_ENTRY, (st))"

.PP
Definition at line 1650 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSTORE_ATTR_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1683 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_delete(st, i)   \fBSKM_sk_delete\fP(\fBSTORE_ATTR_INFO\fP, (st), (i))"

.PP
Definition at line 1677 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSTORE_ATTR_INFO\fP, (st), (ptr))"

.PP
Definition at line 1678 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_dup(st)   \fBSKM_sk_dup\fP(\fBSTORE_ATTR_INFO\fP, st)"

.PP
Definition at line 1681 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_find(st, val)   \fBSKM_sk_find\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"

.PP
Definition at line 1675 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"

.PP
Definition at line 1676 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_free(st)   \fBSKM_sk_free\fP(\fBSTORE_ATTR_INFO\fP, (st))"

.PP
Definition at line 1668 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSTORE_ATTR_INFO\fP, (st), (val), (i))"

.PP
Definition at line 1679 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSTORE_ATTR_INFO\fP, (st))"

.PP
Definition at line 1687 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_new(cmp)   \fBSKM_sk_new\fP(\fBSTORE_ATTR_INFO\fP, (cmp))"

.PP
Definition at line 1666 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_new_null()   \fBSKM_sk_new_null\fP(\fBSTORE_ATTR_INFO\fP)"

.PP
Definition at line 1667 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_num(st)   \fBSKM_sk_num\fP(\fBSTORE_ATTR_INFO\fP, (st))"

.PP
Definition at line 1669 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_pop(st)   \fBSKM_sk_pop\fP(\fBSTORE_ATTR_INFO\fP, (st))"

.PP
Definition at line 1685 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSTORE_ATTR_INFO\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1682 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_push(st, val)   \fBSKM_sk_push\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"

.PP
Definition at line 1673 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_set(st, i, val)   \fBSKM_sk_set\fP(\fBSTORE_ATTR_INFO\fP, (st), (i), (val))"

.PP
Definition at line 1671 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSTORE_ATTR_INFO\fP, (st), (cmp))"

.PP
Definition at line 1680 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_shift(st)   \fBSKM_sk_shift\fP(\fBSTORE_ATTR_INFO\fP, (st))"

.PP
Definition at line 1684 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_sort(st)   \fBSKM_sk_sort\fP(\fBSTORE_ATTR_INFO\fP, (st))"

.PP
Definition at line 1686 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSTORE_ATTR_INFO\fP, (st), (val))"

.PP
Definition at line 1674 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_value(st, i)   \fBSKM_sk_value\fP(\fBSTORE_ATTR_INFO\fP, (st), (i))"

.PP
Definition at line 1670 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_ATTR_INFO_zero(st)   \fBSKM_sk_zero\fP(\fBSTORE_ATTR_INFO\fP, (st))"

.PP
Definition at line 1672 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSTORE_OBJECT\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1705 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_delete(st, i)   \fBSKM_sk_delete\fP(\fBSTORE_OBJECT\fP, (st), (i))"

.PP
Definition at line 1699 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSTORE_OBJECT\fP, (st), (ptr))"

.PP
Definition at line 1700 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_dup(st)   \fBSKM_sk_dup\fP(\fBSTORE_OBJECT\fP, st)"

.PP
Definition at line 1703 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_find(st, val)   \fBSKM_sk_find\fP(\fBSTORE_OBJECT\fP, (st), (val))"

.PP
Definition at line 1697 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSTORE_OBJECT\fP, (st), (val))"

.PP
Definition at line 1698 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_free(st)   \fBSKM_sk_free\fP(\fBSTORE_OBJECT\fP, (st))"

.PP
Definition at line 1690 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSTORE_OBJECT\fP, (st), (val), (i))"

.PP
Definition at line 1701 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSTORE_OBJECT\fP, (st))"

.PP
Definition at line 1709 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_new(cmp)   \fBSKM_sk_new\fP(\fBSTORE_OBJECT\fP, (cmp))"

.PP
Definition at line 1688 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_new_null()   \fBSKM_sk_new_null\fP(\fBSTORE_OBJECT\fP)"

.PP
Definition at line 1689 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_num(st)   \fBSKM_sk_num\fP(\fBSTORE_OBJECT\fP, (st))"

.PP
Definition at line 1691 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_pop(st)   \fBSKM_sk_pop\fP(\fBSTORE_OBJECT\fP, (st))"

.PP
Definition at line 1707 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSTORE_OBJECT\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1704 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_push(st, val)   \fBSKM_sk_push\fP(\fBSTORE_OBJECT\fP, (st), (val))"

.PP
Definition at line 1695 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_set(st, i, val)   \fBSKM_sk_set\fP(\fBSTORE_OBJECT\fP, (st), (i), (val))"

.PP
Definition at line 1693 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSTORE_OBJECT\fP, (st), (cmp))"

.PP
Definition at line 1702 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_shift(st)   \fBSKM_sk_shift\fP(\fBSTORE_OBJECT\fP, (st))"

.PP
Definition at line 1706 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_sort(st)   \fBSKM_sk_sort\fP(\fBSTORE_OBJECT\fP, (st))"

.PP
Definition at line 1708 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSTORE_OBJECT\fP, (st), (val))"

.PP
Definition at line 1696 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_value(st, i)   \fBSKM_sk_value\fP(\fBSTORE_OBJECT\fP, (st), (i))"

.PP
Definition at line 1692 of file include/openssl/safestack\&.h\&.
.SS "#define sk_STORE_OBJECT_zero(st)   \fBSKM_sk_zero\fP(\fBSTORE_OBJECT\fP, (st))"

.PP
Definition at line 1694 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBSXNETID\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1727 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_delete(st, i)   \fBSKM_sk_delete\fP(\fBSXNETID\fP, (st), (i))"

.PP
Definition at line 1721 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBSXNETID\fP, (st), (ptr))"

.PP
Definition at line 1722 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_dup(st)   \fBSKM_sk_dup\fP(\fBSXNETID\fP, st)"

.PP
Definition at line 1725 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_find(st, val)   \fBSKM_sk_find\fP(\fBSXNETID\fP, (st), (val))"

.PP
Definition at line 1719 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBSXNETID\fP, (st), (val))"

.PP
Definition at line 1720 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_free(st)   \fBSKM_sk_free\fP(\fBSXNETID\fP, (st))"

.PP
Definition at line 1712 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBSXNETID\fP, (st), (val), (i))"

.PP
Definition at line 1723 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBSXNETID\fP, (st))"

.PP
Definition at line 1731 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_new(cmp)   \fBSKM_sk_new\fP(\fBSXNETID\fP, (cmp))"

.PP
Definition at line 1710 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_new_null()   \fBSKM_sk_new_null\fP(\fBSXNETID\fP)"

.PP
Definition at line 1711 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_num(st)   \fBSKM_sk_num\fP(\fBSXNETID\fP, (st))"

.PP
Definition at line 1713 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_pop(st)   \fBSKM_sk_pop\fP(\fBSXNETID\fP, (st))"

.PP
Definition at line 1729 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBSXNETID\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1726 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_push(st, val)   \fBSKM_sk_push\fP(\fBSXNETID\fP, (st), (val))"

.PP
Definition at line 1717 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_set(st, i, val)   \fBSKM_sk_set\fP(\fBSXNETID\fP, (st), (i), (val))"

.PP
Definition at line 1715 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBSXNETID\fP, (st), (cmp))"

.PP
Definition at line 1724 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_shift(st)   \fBSKM_sk_shift\fP(\fBSXNETID\fP, (st))"

.PP
Definition at line 1728 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_sort(st)   \fBSKM_sk_sort\fP(\fBSXNETID\fP, (st))"

.PP
Definition at line 1730 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBSXNETID\fP, (st), (val))"

.PP
Definition at line 1718 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_value(st, i)   \fBSKM_sk_value\fP(\fBSXNETID\fP, (st), (i))"

.PP
Definition at line 1714 of file include/openssl/safestack\&.h\&.
.SS "#define sk_SXNETID_zero(st)   \fBSKM_sk_zero\fP(\fBSXNETID\fP, (st))"

.PP
Definition at line 1716 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBUI_STRING\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1749 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_delete(st, i)   \fBSKM_sk_delete\fP(\fBUI_STRING\fP, (st), (i))"

.PP
Definition at line 1743 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBUI_STRING\fP, (st), (ptr))"

.PP
Definition at line 1744 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_dup(st)   \fBSKM_sk_dup\fP(\fBUI_STRING\fP, st)"

.PP
Definition at line 1747 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_find(st, val)   \fBSKM_sk_find\fP(\fBUI_STRING\fP, (st), (val))"

.PP
Definition at line 1741 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBUI_STRING\fP, (st), (val))"

.PP
Definition at line 1742 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_free(st)   \fBSKM_sk_free\fP(\fBUI_STRING\fP, (st))"

.PP
Definition at line 1734 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBUI_STRING\fP, (st), (val), (i))"

.PP
Definition at line 1745 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBUI_STRING\fP, (st))"

.PP
Definition at line 1753 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_new(cmp)   \fBSKM_sk_new\fP(\fBUI_STRING\fP, (cmp))"

.PP
Definition at line 1732 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_new_null()   \fBSKM_sk_new_null\fP(\fBUI_STRING\fP)"

.PP
Definition at line 1733 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_num(st)   \fBSKM_sk_num\fP(\fBUI_STRING\fP, (st))"

.PP
Definition at line 1735 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_pop(st)   \fBSKM_sk_pop\fP(\fBUI_STRING\fP, (st))"

.PP
Definition at line 1751 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBUI_STRING\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1748 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_push(st, val)   \fBSKM_sk_push\fP(\fBUI_STRING\fP, (st), (val))"

.PP
Definition at line 1739 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_set(st, i, val)   \fBSKM_sk_set\fP(\fBUI_STRING\fP, (st), (i), (val))"

.PP
Definition at line 1737 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBUI_STRING\fP, (st), (cmp))"

.PP
Definition at line 1746 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_shift(st)   \fBSKM_sk_shift\fP(\fBUI_STRING\fP, (st))"

.PP
Definition at line 1750 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_sort(st)   \fBSKM_sk_sort\fP(\fBUI_STRING\fP, (st))"

.PP
Definition at line 1752 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBUI_STRING\fP, (st), (val))"

.PP
Definition at line 1740 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_value(st, i)   \fBSKM_sk_value\fP(\fBUI_STRING\fP, (st), (i))"

.PP
Definition at line 1736 of file include/openssl/safestack\&.h\&.
.SS "#define sk_UI_STRING_zero(st)   \fBSKM_sk_zero\fP(\fBUI_STRING\fP, (st))"

.PP
Definition at line 1738 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBvoid\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2167 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_delete(st, i)   \fBSKM_sk_delete\fP(\fBvoid\fP, (st), (i))"

.PP
Definition at line 2161 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBvoid\fP, (st), (ptr))"

.PP
Definition at line 2162 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_dup(st)   \fBSKM_sk_dup\fP(\fBvoid\fP, st)"

.PP
Definition at line 2165 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_find(st, val)   \fBSKM_sk_find\fP(\fBvoid\fP, (st), (val))"

.PP
Definition at line 2159 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBvoid\fP, (st), (val))"

.PP
Definition at line 2160 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_free(st)   \fBSKM_sk_free\fP(\fBvoid\fP, (st))"

.PP
Definition at line 2152 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBvoid\fP, (st), (val), (i))"

.PP
Definition at line 2163 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBvoid\fP, (st))"

.PP
Definition at line 2171 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_new(cmp)   \fBSKM_sk_new\fP(\fBvoid\fP, (cmp))"

.PP
Definition at line 2150 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_new_null()   \fBSKM_sk_new_null\fP(\fBvoid\fP)"

.PP
Definition at line 2151 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_num(st)   \fBSKM_sk_num\fP(\fBvoid\fP, (st))"

.PP
Definition at line 2153 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_pop(st)   \fBSKM_sk_pop\fP(\fBvoid\fP, (st))"

.PP
Definition at line 2169 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBvoid\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2166 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_push(st, val)   \fBSKM_sk_push\fP(\fBvoid\fP, (st), (val))"

.PP
Definition at line 2157 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_set(st, i, val)   \fBSKM_sk_set\fP(\fBvoid\fP, (st), (i), (val))"

.PP
Definition at line 2155 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBvoid\fP, (st), (cmp))"

.PP
Definition at line 2164 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_shift(st)   \fBSKM_sk_shift\fP(\fBvoid\fP, (st))"

.PP
Definition at line 2168 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_sort(st)   \fBSKM_sk_sort\fP(\fBvoid\fP, (st))"

.PP
Definition at line 2170 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBvoid\fP, (st), (val))"

.PP
Definition at line 2158 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_value(st, i)   \fBSKM_sk_value\fP(\fBvoid\fP, (st), (i))"

.PP
Definition at line 2154 of file include/openssl/safestack\&.h\&.
.SS "#define sk_void_zero(st)   \fBSKM_sk_zero\fP(\fBvoid\fP, (st))"

.PP
Definition at line 2156 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_ALGOR\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1815 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_ALGOR\fP, (st), (i))"

.PP
Definition at line 1809 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_ALGOR\fP, (st), (ptr))"

.PP
Definition at line 1810 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_dup(st)   \fBSKM_sk_dup\fP(\fBX509_ALGOR\fP, st)"

.PP
Definition at line 1813 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_find(st, val)   \fBSKM_sk_find\fP(\fBX509_ALGOR\fP, (st), (val))"

.PP
Definition at line 1807 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_ALGOR\fP, (st), (val))"

.PP
Definition at line 1808 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_free(st)   \fBSKM_sk_free\fP(\fBX509_ALGOR\fP, (st))"

.PP
Definition at line 1800 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_ALGOR\fP, (st), (val), (i))"

.PP
Definition at line 1811 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_ALGOR\fP, (st))"

.PP
Definition at line 1819 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_new(cmp)   \fBSKM_sk_new\fP(\fBX509_ALGOR\fP, (cmp))"

.PP
Definition at line 1798 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_new_null()   \fBSKM_sk_new_null\fP(\fBX509_ALGOR\fP)"

.PP
Definition at line 1799 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_num(st)   \fBSKM_sk_num\fP(\fBX509_ALGOR\fP, (st))"

.PP
Definition at line 1801 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_pop(st)   \fBSKM_sk_pop\fP(\fBX509_ALGOR\fP, (st))"

.PP
Definition at line 1817 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_ALGOR\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1814 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_push(st, val)   \fBSKM_sk_push\fP(\fBX509_ALGOR\fP, (st), (val))"

.PP
Definition at line 1805 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_ALGOR\fP, (st), (i), (val))"

.PP
Definition at line 1803 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_ALGOR\fP, (st), (cmp))"

.PP
Definition at line 1812 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_shift(st)   \fBSKM_sk_shift\fP(\fBX509_ALGOR\fP, (st))"

.PP
Definition at line 1816 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_sort(st)   \fBSKM_sk_sort\fP(\fBX509_ALGOR\fP, (st))"

.PP
Definition at line 1818 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_ALGOR\fP, (st), (val))"

.PP
Definition at line 1806 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_value(st, i)   \fBSKM_sk_value\fP(\fBX509_ALGOR\fP, (st), (i))"

.PP
Definition at line 1802 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ALGOR_zero(st)   \fBSKM_sk_zero\fP(\fBX509_ALGOR\fP, (st))"

.PP
Definition at line 1804 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_ATTRIBUTE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1837 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_ATTRIBUTE\fP, (st), (i))"

.PP
Definition at line 1831 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_ATTRIBUTE\fP, (st), (ptr))"

.PP
Definition at line 1832 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_dup(st)   \fBSKM_sk_dup\fP(\fBX509_ATTRIBUTE\fP, st)"

.PP
Definition at line 1835 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_find(st, val)   \fBSKM_sk_find\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"

.PP
Definition at line 1829 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"

.PP
Definition at line 1830 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_free(st)   \fBSKM_sk_free\fP(\fBX509_ATTRIBUTE\fP, (st))"

.PP
Definition at line 1822 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_ATTRIBUTE\fP, (st), (val), (i))"

.PP
Definition at line 1833 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_ATTRIBUTE\fP, (st))"

.PP
Definition at line 1841 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_new(cmp)   \fBSKM_sk_new\fP(\fBX509_ATTRIBUTE\fP, (cmp))"

.PP
Definition at line 1820 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_new_null()   \fBSKM_sk_new_null\fP(\fBX509_ATTRIBUTE\fP)"

.PP
Definition at line 1821 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_num(st)   \fBSKM_sk_num\fP(\fBX509_ATTRIBUTE\fP, (st))"

.PP
Definition at line 1823 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_pop(st)   \fBSKM_sk_pop\fP(\fBX509_ATTRIBUTE\fP, (st))"

.PP
Definition at line 1839 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_ATTRIBUTE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1836 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_push(st, val)   \fBSKM_sk_push\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"

.PP
Definition at line 1827 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_ATTRIBUTE\fP, (st), (i), (val))"

.PP
Definition at line 1825 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_ATTRIBUTE\fP, (st), (cmp))"

.PP
Definition at line 1834 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_shift(st)   \fBSKM_sk_shift\fP(\fBX509_ATTRIBUTE\fP, (st))"

.PP
Definition at line 1838 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_sort(st)   \fBSKM_sk_sort\fP(\fBX509_ATTRIBUTE\fP, (st))"

.PP
Definition at line 1840 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_ATTRIBUTE\fP, (st), (val))"

.PP
Definition at line 1828 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_value(st, i)   \fBSKM_sk_value\fP(\fBX509_ATTRIBUTE\fP, (st), (i))"

.PP
Definition at line 1824 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_ATTRIBUTE_zero(st)   \fBSKM_sk_zero\fP(\fBX509_ATTRIBUTE\fP, (st))"

.PP
Definition at line 1826 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_CRL\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1859 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_CRL\fP, (st), (i))"

.PP
Definition at line 1853 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_CRL\fP, (st), (ptr))"

.PP
Definition at line 1854 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_dup(st)   \fBSKM_sk_dup\fP(\fBX509_CRL\fP, st)"

.PP
Definition at line 1857 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_find(st, val)   \fBSKM_sk_find\fP(\fBX509_CRL\fP, (st), (val))"

.PP
Definition at line 1851 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_CRL\fP, (st), (val))"

.PP
Definition at line 1852 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_free(st)   \fBSKM_sk_free\fP(\fBX509_CRL\fP, (st))"

.PP
Definition at line 1844 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_CRL\fP, (st), (val), (i))"

.PP
Definition at line 1855 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_CRL\fP, (st))"

.PP
Definition at line 1863 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_new(cmp)   \fBSKM_sk_new\fP(\fBX509_CRL\fP, (cmp))"

.PP
Definition at line 1842 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_new_null()   \fBSKM_sk_new_null\fP(\fBX509_CRL\fP)"

.PP
Definition at line 1843 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_num(st)   \fBSKM_sk_num\fP(\fBX509_CRL\fP, (st))"

.PP
Definition at line 1845 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_pop(st)   \fBSKM_sk_pop\fP(\fBX509_CRL\fP, (st))"

.PP
Definition at line 1861 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_CRL\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1858 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_push(st, val)   \fBSKM_sk_push\fP(\fBX509_CRL\fP, (st), (val))"

.PP
Definition at line 1849 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_CRL\fP, (st), (i), (val))"

.PP
Definition at line 1847 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_CRL\fP, (st), (cmp))"

.PP
Definition at line 1856 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_shift(st)   \fBSKM_sk_shift\fP(\fBX509_CRL\fP, (st))"

.PP
Definition at line 1860 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_sort(st)   \fBSKM_sk_sort\fP(\fBX509_CRL\fP, (st))"

.PP
Definition at line 1862 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_CRL\fP, (st), (val))"

.PP
Definition at line 1850 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_value(st, i)   \fBSKM_sk_value\fP(\fBX509_CRL\fP, (st), (i))"

.PP
Definition at line 1846 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_CRL_zero(st)   \fBSKM_sk_zero\fP(\fBX509_CRL\fP, (st))"

.PP
Definition at line 1848 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1771 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509\fP, (st), (i))"

.PP
Definition at line 1765 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509\fP, (st), (ptr))"

.PP
Definition at line 1766 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_dup(st)   \fBSKM_sk_dup\fP(\fBX509\fP, st)"

.PP
Definition at line 1769 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_EXTENSION\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1881 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_EXTENSION\fP, (st), (i))"

.PP
Definition at line 1875 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_EXTENSION\fP, (st), (ptr))"

.PP
Definition at line 1876 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_dup(st)   \fBSKM_sk_dup\fP(\fBX509_EXTENSION\fP, st)"

.PP
Definition at line 1879 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_find(st, val)   \fBSKM_sk_find\fP(\fBX509_EXTENSION\fP, (st), (val))"

.PP
Definition at line 1873 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_EXTENSION\fP, (st), (val))"

.PP
Definition at line 1874 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_free(st)   \fBSKM_sk_free\fP(\fBX509_EXTENSION\fP, (st))"

.PP
Definition at line 1866 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_EXTENSION\fP, (st), (val), (i))"

.PP
Definition at line 1877 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_EXTENSION\fP, (st))"

.PP
Definition at line 1885 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_new(cmp)   \fBSKM_sk_new\fP(\fBX509_EXTENSION\fP, (cmp))"

.PP
Definition at line 1864 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_new_null()   \fBSKM_sk_new_null\fP(\fBX509_EXTENSION\fP)"

.PP
Definition at line 1865 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_num(st)   \fBSKM_sk_num\fP(\fBX509_EXTENSION\fP, (st))"

.PP
Definition at line 1867 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_pop(st)   \fBSKM_sk_pop\fP(\fBX509_EXTENSION\fP, (st))"

.PP
Definition at line 1883 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_EXTENSION\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1880 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_push(st, val)   \fBSKM_sk_push\fP(\fBX509_EXTENSION\fP, (st), (val))"

.PP
Definition at line 1871 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_EXTENSION\fP, (st), (i), (val))"

.PP
Definition at line 1869 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_EXTENSION\fP, (st), (cmp))"

.PP
Definition at line 1878 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_shift(st)   \fBSKM_sk_shift\fP(\fBX509_EXTENSION\fP, (st))"

.PP
Definition at line 1882 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_sort(st)   \fBSKM_sk_sort\fP(\fBX509_EXTENSION\fP, (st))"

.PP
Definition at line 1884 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_EXTENSION\fP, (st), (val))"

.PP
Definition at line 1872 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_value(st, i)   \fBSKM_sk_value\fP(\fBX509_EXTENSION\fP, (st), (i))"

.PP
Definition at line 1868 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_EXTENSION_zero(st)   \fBSKM_sk_zero\fP(\fBX509_EXTENSION\fP, (st))"

.PP
Definition at line 1870 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_find(st, val)   \fBSKM_sk_find\fP(\fBX509\fP, (st), (val))"

.PP
Definition at line 1763 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509\fP, (st), (val))"

.PP
Definition at line 1764 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_free(st)   \fBSKM_sk_free\fP(\fBX509\fP, (st))"

.PP
Definition at line 1756 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_INFO\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1903 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_INFO\fP, (st), (i))"

.PP
Definition at line 1897 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_INFO\fP, (st), (ptr))"

.PP
Definition at line 1898 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_dup(st)   \fBSKM_sk_dup\fP(\fBX509_INFO\fP, st)"

.PP
Definition at line 1901 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_find(st, val)   \fBSKM_sk_find\fP(\fBX509_INFO\fP, (st), (val))"

.PP
Definition at line 1895 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_INFO\fP, (st), (val))"

.PP
Definition at line 1896 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_free(st)   \fBSKM_sk_free\fP(\fBX509_INFO\fP, (st))"

.PP
Definition at line 1888 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_INFO\fP, (st), (val), (i))"

.PP
Definition at line 1899 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_INFO\fP, (st))"

.PP
Definition at line 1907 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_new(cmp)   \fBSKM_sk_new\fP(\fBX509_INFO\fP, (cmp))"

.PP
Definition at line 1886 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_new_null()   \fBSKM_sk_new_null\fP(\fBX509_INFO\fP)"

.PP
Definition at line 1887 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_num(st)   \fBSKM_sk_num\fP(\fBX509_INFO\fP, (st))"

.PP
Definition at line 1889 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_pop(st)   \fBSKM_sk_pop\fP(\fBX509_INFO\fP, (st))"

.PP
Definition at line 1905 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_INFO\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1902 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_push(st, val)   \fBSKM_sk_push\fP(\fBX509_INFO\fP, (st), (val))"

.PP
Definition at line 1893 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_INFO\fP, (st), (i), (val))"

.PP
Definition at line 1891 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_INFO\fP, (st), (cmp))"

.PP
Definition at line 1900 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_shift(st)   \fBSKM_sk_shift\fP(\fBX509_INFO\fP, (st))"

.PP
Definition at line 1904 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_sort(st)   \fBSKM_sk_sort\fP(\fBX509_INFO\fP, (st))"

.PP
Definition at line 1906 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_INFO\fP, (st), (val))"

.PP
Definition at line 1894 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_value(st, i)   \fBSKM_sk_value\fP(\fBX509_INFO\fP, (st), (i))"

.PP
Definition at line 1890 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_INFO_zero(st)   \fBSKM_sk_zero\fP(\fBX509_INFO\fP, (st))"

.PP
Definition at line 1892 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509\fP, (st), (val), (i))"

.PP
Definition at line 1767 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509\fP, (st))"

.PP
Definition at line 1775 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_LOOKUP\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1925 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_LOOKUP\fP, (st), (i))"

.PP
Definition at line 1919 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_LOOKUP\fP, (st), (ptr))"

.PP
Definition at line 1920 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_dup(st)   \fBSKM_sk_dup\fP(\fBX509_LOOKUP\fP, st)"

.PP
Definition at line 1923 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_find(st, val)   \fBSKM_sk_find\fP(\fBX509_LOOKUP\fP, (st), (val))"

.PP
Definition at line 1917 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_LOOKUP\fP, (st), (val))"

.PP
Definition at line 1918 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_free(st)   \fBSKM_sk_free\fP(\fBX509_LOOKUP\fP, (st))"

.PP
Definition at line 1910 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_LOOKUP\fP, (st), (val), (i))"

.PP
Definition at line 1921 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_LOOKUP\fP, (st))"

.PP
Definition at line 1929 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_new(cmp)   \fBSKM_sk_new\fP(\fBX509_LOOKUP\fP, (cmp))"

.PP
Definition at line 1908 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_new_null()   \fBSKM_sk_new_null\fP(\fBX509_LOOKUP\fP)"

.PP
Definition at line 1909 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_num(st)   \fBSKM_sk_num\fP(\fBX509_LOOKUP\fP, (st))"

.PP
Definition at line 1911 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_pop(st)   \fBSKM_sk_pop\fP(\fBX509_LOOKUP\fP, (st))"

.PP
Definition at line 1927 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_LOOKUP\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1924 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_push(st, val)   \fBSKM_sk_push\fP(\fBX509_LOOKUP\fP, (st), (val))"

.PP
Definition at line 1915 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_LOOKUP\fP, (st), (i), (val))"

.PP
Definition at line 1913 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_LOOKUP\fP, (st), (cmp))"

.PP
Definition at line 1922 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_shift(st)   \fBSKM_sk_shift\fP(\fBX509_LOOKUP\fP, (st))"

.PP
Definition at line 1926 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_sort(st)   \fBSKM_sk_sort\fP(\fBX509_LOOKUP\fP, (st))"

.PP
Definition at line 1928 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_LOOKUP\fP, (st), (val))"

.PP
Definition at line 1916 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_value(st, i)   \fBSKM_sk_value\fP(\fBX509_LOOKUP\fP, (st), (i))"

.PP
Definition at line 1912 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_LOOKUP_zero(st)   \fBSKM_sk_zero\fP(\fBX509_LOOKUP\fP, (st))"

.PP
Definition at line 1914 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_NAME\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1947 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_NAME\fP, (st), (i))"

.PP
Definition at line 1941 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_NAME\fP, (st), (ptr))"

.PP
Definition at line 1942 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_dup(st)   \fBSKM_sk_dup\fP(\fBX509_NAME\fP, st)"

.PP
Definition at line 1945 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_NAME_ENTRY\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1969 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_NAME_ENTRY\fP, (st), (i))"

.PP
Definition at line 1963 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_NAME_ENTRY\fP, (st), (ptr))"

.PP
Definition at line 1964 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_dup(st)   \fBSKM_sk_dup\fP(\fBX509_NAME_ENTRY\fP, st)"

.PP
Definition at line 1967 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_find(st, val)   \fBSKM_sk_find\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"

.PP
Definition at line 1961 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"

.PP
Definition at line 1962 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_free(st)   \fBSKM_sk_free\fP(\fBX509_NAME_ENTRY\fP, (st))"

.PP
Definition at line 1954 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_NAME_ENTRY\fP, (st), (val), (i))"

.PP
Definition at line 1965 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_NAME_ENTRY\fP, (st))"

.PP
Definition at line 1973 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_new(cmp)   \fBSKM_sk_new\fP(\fBX509_NAME_ENTRY\fP, (cmp))"

.PP
Definition at line 1952 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_new_null()   \fBSKM_sk_new_null\fP(\fBX509_NAME_ENTRY\fP)"

.PP
Definition at line 1953 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_num(st)   \fBSKM_sk_num\fP(\fBX509_NAME_ENTRY\fP, (st))"

.PP
Definition at line 1955 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_pop(st)   \fBSKM_sk_pop\fP(\fBX509_NAME_ENTRY\fP, (st))"

.PP
Definition at line 1971 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_NAME_ENTRY\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1968 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_push(st, val)   \fBSKM_sk_push\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"

.PP
Definition at line 1959 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_NAME_ENTRY\fP, (st), (i), (val))"

.PP
Definition at line 1957 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_NAME_ENTRY\fP, (st), (cmp))"

.PP
Definition at line 1966 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_shift(st)   \fBSKM_sk_shift\fP(\fBX509_NAME_ENTRY\fP, (st))"

.PP
Definition at line 1970 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_sort(st)   \fBSKM_sk_sort\fP(\fBX509_NAME_ENTRY\fP, (st))"

.PP
Definition at line 1972 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_NAME_ENTRY\fP, (st), (val))"

.PP
Definition at line 1960 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_value(st, i)   \fBSKM_sk_value\fP(\fBX509_NAME_ENTRY\fP, (st), (i))"

.PP
Definition at line 1956 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_ENTRY_zero(st)   \fBSKM_sk_zero\fP(\fBX509_NAME_ENTRY\fP, (st))"

.PP
Definition at line 1958 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_find(st, val)   \fBSKM_sk_find\fP(\fBX509_NAME\fP, (st), (val))"

.PP
Definition at line 1939 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_NAME\fP, (st), (val))"

.PP
Definition at line 1940 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_free(st)   \fBSKM_sk_free\fP(\fBX509_NAME\fP, (st))"

.PP
Definition at line 1932 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_NAME\fP, (st), (val), (i))"

.PP
Definition at line 1943 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_NAME\fP, (st))"

.PP
Definition at line 1951 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_new(cmp)   \fBSKM_sk_new\fP(\fBX509_NAME\fP, (cmp))"

.PP
Definition at line 1930 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_new_null()   \fBSKM_sk_new_null\fP(\fBX509_NAME\fP)"

.PP
Definition at line 1931 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_num(st)   \fBSKM_sk_num\fP(\fBX509_NAME\fP, (st))"

.PP
Definition at line 1933 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_pop(st)   \fBSKM_sk_pop\fP(\fBX509_NAME\fP, (st))"

.PP
Definition at line 1949 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_NAME\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1946 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_push(st, val)   \fBSKM_sk_push\fP(\fBX509_NAME\fP, (st), (val))"

.PP
Definition at line 1937 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_NAME\fP, (st), (i), (val))"

.PP
Definition at line 1935 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_NAME\fP, (st), (cmp))"

.PP
Definition at line 1944 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_shift(st)   \fBSKM_sk_shift\fP(\fBX509_NAME\fP, (st))"

.PP
Definition at line 1948 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_sort(st)   \fBSKM_sk_sort\fP(\fBX509_NAME\fP, (st))"

.PP
Definition at line 1950 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_NAME\fP, (st), (val))"

.PP
Definition at line 1938 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_value(st, i)   \fBSKM_sk_value\fP(\fBX509_NAME\fP, (st), (i))"

.PP
Definition at line 1934 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_NAME_zero(st)   \fBSKM_sk_zero\fP(\fBX509_NAME\fP, (st))"

.PP
Definition at line 1936 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_new(cmp)   \fBSKM_sk_new\fP(\fBX509\fP, (cmp))"

.PP
Definition at line 1754 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_new_null()   \fBSKM_sk_new_null\fP(\fBX509\fP)"

.PP
Definition at line 1755 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_num(st)   \fBSKM_sk_num\fP(\fBX509\fP, (st))"

.PP
Definition at line 1757 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_OBJECT\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1991 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_OBJECT\fP, (st), (i))"

.PP
Definition at line 1985 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_OBJECT\fP, (st), (ptr))"

.PP
Definition at line 1986 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_dup(st)   \fBSKM_sk_dup\fP(\fBX509_OBJECT\fP, st)"

.PP
Definition at line 1989 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_find(st, val)   \fBSKM_sk_find\fP(\fBX509_OBJECT\fP, (st), (val))"

.PP
Definition at line 1983 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_OBJECT\fP, (st), (val))"

.PP
Definition at line 1984 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_free(st)   \fBSKM_sk_free\fP(\fBX509_OBJECT\fP, (st))"

.PP
Definition at line 1976 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_OBJECT\fP, (st), (val), (i))"

.PP
Definition at line 1987 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_OBJECT\fP, (st))"

.PP
Definition at line 1995 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_new(cmp)   \fBSKM_sk_new\fP(\fBX509_OBJECT\fP, (cmp))"

.PP
Definition at line 1974 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_new_null()   \fBSKM_sk_new_null\fP(\fBX509_OBJECT\fP)"

.PP
Definition at line 1975 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_num(st)   \fBSKM_sk_num\fP(\fBX509_OBJECT\fP, (st))"

.PP
Definition at line 1977 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_pop(st)   \fBSKM_sk_pop\fP(\fBX509_OBJECT\fP, (st))"

.PP
Definition at line 1993 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_OBJECT\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1990 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_push(st, val)   \fBSKM_sk_push\fP(\fBX509_OBJECT\fP, (st), (val))"

.PP
Definition at line 1981 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_OBJECT\fP, (st), (i), (val))"

.PP
Definition at line 1979 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_OBJECT\fP, (st), (cmp))"

.PP
Definition at line 1988 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_shift(st)   \fBSKM_sk_shift\fP(\fBX509_OBJECT\fP, (st))"

.PP
Definition at line 1992 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_sort(st)   \fBSKM_sk_sort\fP(\fBX509_OBJECT\fP, (st))"

.PP
Definition at line 1994 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_OBJECT\fP, (st), (val))"

.PP
Definition at line 1982 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_value(st, i)   \fBSKM_sk_value\fP(\fBX509_OBJECT\fP, (st), (i))"

.PP
Definition at line 1978 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_OBJECT_zero(st)   \fBSKM_sk_zero\fP(\fBX509_OBJECT\fP, (st))"

.PP
Definition at line 1980 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_POLICY_DATA\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2013 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_POLICY_DATA\fP, (st), (i))"

.PP
Definition at line 2007 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_POLICY_DATA\fP, (st), (ptr))"

.PP
Definition at line 2008 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_dup(st)   \fBSKM_sk_dup\fP(\fBX509_POLICY_DATA\fP, st)"

.PP
Definition at line 2011 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_find(st, val)   \fBSKM_sk_find\fP(\fBX509_POLICY_DATA\fP, (st), (val))"

.PP
Definition at line 2005 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_POLICY_DATA\fP, (st), (val))"

.PP
Definition at line 2006 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_free(st)   \fBSKM_sk_free\fP(\fBX509_POLICY_DATA\fP, (st))"

.PP
Definition at line 1998 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_POLICY_DATA\fP, (st), (val), (i))"

.PP
Definition at line 2009 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_POLICY_DATA\fP, (st))"

.PP
Definition at line 2017 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_new(cmp)   \fBSKM_sk_new\fP(\fBX509_POLICY_DATA\fP, (cmp))"

.PP
Definition at line 1996 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_new_null()   \fBSKM_sk_new_null\fP(\fBX509_POLICY_DATA\fP)"

.PP
Definition at line 1997 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_num(st)   \fBSKM_sk_num\fP(\fBX509_POLICY_DATA\fP, (st))"

.PP
Definition at line 1999 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_pop(st)   \fBSKM_sk_pop\fP(\fBX509_POLICY_DATA\fP, (st))"

.PP
Definition at line 2015 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_POLICY_DATA\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2012 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_push(st, val)   \fBSKM_sk_push\fP(\fBX509_POLICY_DATA\fP, (st), (val))"

.PP
Definition at line 2003 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_POLICY_DATA\fP, (st), (i), (val))"

.PP
Definition at line 2001 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_POLICY_DATA\fP, (st), (cmp))"

.PP
Definition at line 2010 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_shift(st)   \fBSKM_sk_shift\fP(\fBX509_POLICY_DATA\fP, (st))"

.PP
Definition at line 2014 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_sort(st)   \fBSKM_sk_sort\fP(\fBX509_POLICY_DATA\fP, (st))"

.PP
Definition at line 2016 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_POLICY_DATA\fP, (st), (val))"

.PP
Definition at line 2004 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_value(st, i)   \fBSKM_sk_value\fP(\fBX509_POLICY_DATA\fP, (st), (i))"

.PP
Definition at line 2000 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_DATA_zero(st)   \fBSKM_sk_zero\fP(\fBX509_POLICY_DATA\fP, (st))"

.PP
Definition at line 2002 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_POLICY_NODE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2035 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_POLICY_NODE\fP, (st), (i))"

.PP
Definition at line 2029 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_POLICY_NODE\fP, (st), (ptr))"

.PP
Definition at line 2030 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_dup(st)   \fBSKM_sk_dup\fP(\fBX509_POLICY_NODE\fP, st)"

.PP
Definition at line 2033 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_find(st, val)   \fBSKM_sk_find\fP(\fBX509_POLICY_NODE\fP, (st), (val))"

.PP
Definition at line 2027 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_POLICY_NODE\fP, (st), (val))"

.PP
Definition at line 2028 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_free(st)   \fBSKM_sk_free\fP(\fBX509_POLICY_NODE\fP, (st))"

.PP
Definition at line 2020 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_POLICY_NODE\fP, (st), (val), (i))"

.PP
Definition at line 2031 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_POLICY_NODE\fP, (st))"

.PP
Definition at line 2039 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_new(cmp)   \fBSKM_sk_new\fP(\fBX509_POLICY_NODE\fP, (cmp))"

.PP
Definition at line 2018 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_new_null()   \fBSKM_sk_new_null\fP(\fBX509_POLICY_NODE\fP)"

.PP
Definition at line 2019 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_num(st)   \fBSKM_sk_num\fP(\fBX509_POLICY_NODE\fP, (st))"

.PP
Definition at line 2021 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_pop(st)   \fBSKM_sk_pop\fP(\fBX509_POLICY_NODE\fP, (st))"

.PP
Definition at line 2037 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_POLICY_NODE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2034 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_push(st, val)   \fBSKM_sk_push\fP(\fBX509_POLICY_NODE\fP, (st), (val))"

.PP
Definition at line 2025 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_POLICY_NODE\fP, (st), (i), (val))"

.PP
Definition at line 2023 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_POLICY_NODE\fP, (st), (cmp))"

.PP
Definition at line 2032 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_shift(st)   \fBSKM_sk_shift\fP(\fBX509_POLICY_NODE\fP, (st))"

.PP
Definition at line 2036 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_sort(st)   \fBSKM_sk_sort\fP(\fBX509_POLICY_NODE\fP, (st))"

.PP
Definition at line 2038 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_POLICY_NODE\fP, (st), (val))"

.PP
Definition at line 2026 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_value(st, i)   \fBSKM_sk_value\fP(\fBX509_POLICY_NODE\fP, (st), (i))"

.PP
Definition at line 2022 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_POLICY_NODE_zero(st)   \fBSKM_sk_zero\fP(\fBX509_POLICY_NODE\fP, (st))"

.PP
Definition at line 2024 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_pop(st)   \fBSKM_sk_pop\fP(\fBX509\fP, (st))"

.PP
Definition at line 1773 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1770 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_PURPOSE\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2057 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_PURPOSE\fP, (st), (i))"

.PP
Definition at line 2051 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_PURPOSE\fP, (st), (ptr))"

.PP
Definition at line 2052 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_dup(st)   \fBSKM_sk_dup\fP(\fBX509_PURPOSE\fP, st)"

.PP
Definition at line 2055 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_find(st, val)   \fBSKM_sk_find\fP(\fBX509_PURPOSE\fP, (st), (val))"

.PP
Definition at line 2049 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_PURPOSE\fP, (st), (val))"

.PP
Definition at line 2050 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_free(st)   \fBSKM_sk_free\fP(\fBX509_PURPOSE\fP, (st))"

.PP
Definition at line 2042 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_PURPOSE\fP, (st), (val), (i))"

.PP
Definition at line 2053 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_PURPOSE\fP, (st))"

.PP
Definition at line 2061 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_new(cmp)   \fBSKM_sk_new\fP(\fBX509_PURPOSE\fP, (cmp))"

.PP
Definition at line 2040 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_new_null()   \fBSKM_sk_new_null\fP(\fBX509_PURPOSE\fP)"

.PP
Definition at line 2041 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_num(st)   \fBSKM_sk_num\fP(\fBX509_PURPOSE\fP, (st))"

.PP
Definition at line 2043 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_pop(st)   \fBSKM_sk_pop\fP(\fBX509_PURPOSE\fP, (st))"

.PP
Definition at line 2059 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_PURPOSE\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2056 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_push(st, val)   \fBSKM_sk_push\fP(\fBX509_PURPOSE\fP, (st), (val))"

.PP
Definition at line 2047 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_PURPOSE\fP, (st), (i), (val))"

.PP
Definition at line 2045 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_PURPOSE\fP, (st), (cmp))"

.PP
Definition at line 2054 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_shift(st)   \fBSKM_sk_shift\fP(\fBX509_PURPOSE\fP, (st))"

.PP
Definition at line 2058 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_sort(st)   \fBSKM_sk_sort\fP(\fBX509_PURPOSE\fP, (st))"

.PP
Definition at line 2060 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_PURPOSE\fP, (st), (val))"

.PP
Definition at line 2048 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_value(st, i)   \fBSKM_sk_value\fP(\fBX509_PURPOSE\fP, (st), (i))"

.PP
Definition at line 2044 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_PURPOSE_zero(st)   \fBSKM_sk_zero\fP(\fBX509_PURPOSE\fP, (st))"

.PP
Definition at line 2046 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_push(st, val)   \fBSKM_sk_push\fP(\fBX509\fP, (st), (val))"

.PP
Definition at line 1761 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_REVOKED\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2079 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_REVOKED\fP, (st), (i))"

.PP
Definition at line 2073 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_REVOKED\fP, (st), (ptr))"

.PP
Definition at line 2074 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_dup(st)   \fBSKM_sk_dup\fP(\fBX509_REVOKED\fP, st)"

.PP
Definition at line 2077 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_find(st, val)   \fBSKM_sk_find\fP(\fBX509_REVOKED\fP, (st), (val))"

.PP
Definition at line 2071 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_REVOKED\fP, (st), (val))"

.PP
Definition at line 2072 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_free(st)   \fBSKM_sk_free\fP(\fBX509_REVOKED\fP, (st))"

.PP
Definition at line 2064 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_REVOKED\fP, (st), (val), (i))"

.PP
Definition at line 2075 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_REVOKED\fP, (st))"

.PP
Definition at line 2083 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_new(cmp)   \fBSKM_sk_new\fP(\fBX509_REVOKED\fP, (cmp))"

.PP
Definition at line 2062 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_new_null()   \fBSKM_sk_new_null\fP(\fBX509_REVOKED\fP)"

.PP
Definition at line 2063 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_num(st)   \fBSKM_sk_num\fP(\fBX509_REVOKED\fP, (st))"

.PP
Definition at line 2065 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_pop(st)   \fBSKM_sk_pop\fP(\fBX509_REVOKED\fP, (st))"

.PP
Definition at line 2081 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_REVOKED\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2078 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_push(st, val)   \fBSKM_sk_push\fP(\fBX509_REVOKED\fP, (st), (val))"

.PP
Definition at line 2069 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_REVOKED\fP, (st), (i), (val))"

.PP
Definition at line 2067 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_REVOKED\fP, (st), (cmp))"

.PP
Definition at line 2076 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_shift(st)   \fBSKM_sk_shift\fP(\fBX509_REVOKED\fP, (st))"

.PP
Definition at line 2080 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_sort(st)   \fBSKM_sk_sort\fP(\fBX509_REVOKED\fP, (st))"

.PP
Definition at line 2082 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_REVOKED\fP, (st), (val))"

.PP
Definition at line 2070 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_value(st, i)   \fBSKM_sk_value\fP(\fBX509_REVOKED\fP, (st), (i))"

.PP
Definition at line 2066 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_REVOKED_zero(st)   \fBSKM_sk_zero\fP(\fBX509_REVOKED\fP, (st))"

.PP
Definition at line 2068 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509\fP, (st), (i), (val))"

.PP
Definition at line 1759 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509\fP, (st), (cmp))"

.PP
Definition at line 1768 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_shift(st)   \fBSKM_sk_shift\fP(\fBX509\fP, (st))"

.PP
Definition at line 1772 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_sort(st)   \fBSKM_sk_sort\fP(\fBX509\fP, (st))"

.PP
Definition at line 1774 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_TRUST\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2101 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_TRUST\fP, (st), (i))"

.PP
Definition at line 2095 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_TRUST\fP, (st), (ptr))"

.PP
Definition at line 2096 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_dup(st)   \fBSKM_sk_dup\fP(\fBX509_TRUST\fP, st)"

.PP
Definition at line 2099 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_find(st, val)   \fBSKM_sk_find\fP(\fBX509_TRUST\fP, (st), (val))"

.PP
Definition at line 2093 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_TRUST\fP, (st), (val))"

.PP
Definition at line 2094 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_free(st)   \fBSKM_sk_free\fP(\fBX509_TRUST\fP, (st))"

.PP
Definition at line 2086 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_TRUST\fP, (st), (val), (i))"

.PP
Definition at line 2097 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_TRUST\fP, (st))"

.PP
Definition at line 2105 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_new(cmp)   \fBSKM_sk_new\fP(\fBX509_TRUST\fP, (cmp))"

.PP
Definition at line 2084 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_new_null()   \fBSKM_sk_new_null\fP(\fBX509_TRUST\fP)"

.PP
Definition at line 2085 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_num(st)   \fBSKM_sk_num\fP(\fBX509_TRUST\fP, (st))"

.PP
Definition at line 2087 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_pop(st)   \fBSKM_sk_pop\fP(\fBX509_TRUST\fP, (st))"

.PP
Definition at line 2103 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_TRUST\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2100 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_push(st, val)   \fBSKM_sk_push\fP(\fBX509_TRUST\fP, (st), (val))"

.PP
Definition at line 2091 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_TRUST\fP, (st), (i), (val))"

.PP
Definition at line 2089 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_TRUST\fP, (st), (cmp))"

.PP
Definition at line 2098 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_shift(st)   \fBSKM_sk_shift\fP(\fBX509_TRUST\fP, (st))"

.PP
Definition at line 2102 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_sort(st)   \fBSKM_sk_sort\fP(\fBX509_TRUST\fP, (st))"

.PP
Definition at line 2104 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_TRUST\fP, (st), (val))"

.PP
Definition at line 2092 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_value(st, i)   \fBSKM_sk_value\fP(\fBX509_TRUST\fP, (st), (i))"

.PP
Definition at line 2088 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_TRUST_zero(st)   \fBSKM_sk_zero\fP(\fBX509_TRUST\fP, (st))"

.PP
Definition at line 2090 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509\fP, (st), (val))"

.PP
Definition at line 1762 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_value(st, i)   \fBSKM_sk_value\fP(\fBX509\fP, (st), (i))"

.PP
Definition at line 1758 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509_VERIFY_PARAM\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 2123 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509_VERIFY_PARAM\fP, (st), (i))"

.PP
Definition at line 2117 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509_VERIFY_PARAM\fP, (st), (ptr))"

.PP
Definition at line 2118 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_dup(st)   \fBSKM_sk_dup\fP(\fBX509_VERIFY_PARAM\fP, st)"

.PP
Definition at line 2121 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_find(st, val)   \fBSKM_sk_find\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"

.PP
Definition at line 2115 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"

.PP
Definition at line 2116 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_free(st)   \fBSKM_sk_free\fP(\fBX509_VERIFY_PARAM\fP, (st))"

.PP
Definition at line 2108 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509_VERIFY_PARAM\fP, (st), (val), (i))"

.PP
Definition at line 2119 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509_VERIFY_PARAM\fP, (st))"

.PP
Definition at line 2127 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_new(cmp)   \fBSKM_sk_new\fP(\fBX509_VERIFY_PARAM\fP, (cmp))"

.PP
Definition at line 2106 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_new_null()   \fBSKM_sk_new_null\fP(\fBX509_VERIFY_PARAM\fP)"

.PP
Definition at line 2107 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_num(st)   \fBSKM_sk_num\fP(\fBX509_VERIFY_PARAM\fP, (st))"

.PP
Definition at line 2109 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_pop(st)   \fBSKM_sk_pop\fP(\fBX509_VERIFY_PARAM\fP, (st))"

.PP
Definition at line 2125 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509_VERIFY_PARAM\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 2122 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_push(st, val)   \fBSKM_sk_push\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"

.PP
Definition at line 2113 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509_VERIFY_PARAM\fP, (st), (i), (val))"

.PP
Definition at line 2111 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509_VERIFY_PARAM\fP, (st), (cmp))"

.PP
Definition at line 2120 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_shift(st)   \fBSKM_sk_shift\fP(\fBX509_VERIFY_PARAM\fP, (st))"

.PP
Definition at line 2124 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_sort(st)   \fBSKM_sk_sort\fP(\fBX509_VERIFY_PARAM\fP, (st))"

.PP
Definition at line 2126 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509_VERIFY_PARAM\fP, (st), (val))"

.PP
Definition at line 2114 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_value(st, i)   \fBSKM_sk_value\fP(\fBX509_VERIFY_PARAM\fP, (st), (i))"

.PP
Definition at line 2110 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_VERIFY_PARAM_zero(st)   \fBSKM_sk_zero\fP(\fBX509_VERIFY_PARAM\fP, (st))"

.PP
Definition at line 2112 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509_zero(st)   \fBSKM_sk_zero\fP(\fBX509\fP, (st))"

.PP
Definition at line 1760 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_deep_copy(st, copy_func, \fBfree_func\fP)   \fBSKM_sk_deep_copy\fP(\fBX509V3_EXT_METHOD\fP, (st), (copy_func), (\fBfree_func\fP))"

.PP
Definition at line 1793 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_delete(st, i)   \fBSKM_sk_delete\fP(\fBX509V3_EXT_METHOD\fP, (st), (i))"

.PP
Definition at line 1787 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_delete_ptr(st, ptr)   \fBSKM_sk_delete_ptr\fP(\fBX509V3_EXT_METHOD\fP, (st), (ptr))"

.PP
Definition at line 1788 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_dup(st)   \fBSKM_sk_dup\fP(\fBX509V3_EXT_METHOD\fP, st)"

.PP
Definition at line 1791 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_find(st, val)   \fBSKM_sk_find\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"

.PP
Definition at line 1785 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_find_ex(st, val)   \fBSKM_sk_find_ex\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"

.PP
Definition at line 1786 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_free(st)   \fBSKM_sk_free\fP(\fBX509V3_EXT_METHOD\fP, (st))"

.PP
Definition at line 1778 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_insert(st, val, i)   \fBSKM_sk_insert\fP(\fBX509V3_EXT_METHOD\fP, (st), (val), (i))"

.PP
Definition at line 1789 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_is_sorted(st)   \fBSKM_sk_is_sorted\fP(\fBX509V3_EXT_METHOD\fP, (st))"

.PP
Definition at line 1797 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_new(cmp)   \fBSKM_sk_new\fP(\fBX509V3_EXT_METHOD\fP, (cmp))"

.PP
Definition at line 1776 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_new_null()   \fBSKM_sk_new_null\fP(\fBX509V3_EXT_METHOD\fP)"

.PP
Definition at line 1777 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_num(st)   \fBSKM_sk_num\fP(\fBX509V3_EXT_METHOD\fP, (st))"

.PP
Definition at line 1779 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_pop(st)   \fBSKM_sk_pop\fP(\fBX509V3_EXT_METHOD\fP, (st))"

.PP
Definition at line 1795 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_pop_free(st, \fBfree_func\fP)   \fBSKM_sk_pop_free\fP(\fBX509V3_EXT_METHOD\fP, (st), (\fBfree_func\fP))"

.PP
Definition at line 1792 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_push(st, val)   \fBSKM_sk_push\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"

.PP
Definition at line 1783 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_set(st, i, val)   \fBSKM_sk_set\fP(\fBX509V3_EXT_METHOD\fP, (st), (i), (val))"

.PP
Definition at line 1781 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_set_cmp_func(st, cmp)   \fBSKM_sk_set_cmp_func\fP(\fBX509V3_EXT_METHOD\fP, (st), (cmp))"

.PP
Definition at line 1790 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_shift(st)   \fBSKM_sk_shift\fP(\fBX509V3_EXT_METHOD\fP, (st))"

.PP
Definition at line 1794 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_sort(st)   \fBSKM_sk_sort\fP(\fBX509V3_EXT_METHOD\fP, (st))"

.PP
Definition at line 1796 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_unshift(st, val)   \fBSKM_sk_unshift\fP(\fBX509V3_EXT_METHOD\fP, (st), (val))"

.PP
Definition at line 1784 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_value(st, i)   \fBSKM_sk_value\fP(\fBX509V3_EXT_METHOD\fP, (st), (i))"

.PP
Definition at line 1780 of file include/openssl/safestack\&.h\&.
.SS "#define sk_X509V3_EXT_METHOD_zero(st)   \fBSKM_sk_zero\fP(\fBX509V3_EXT_METHOD\fP, (st))"

.PP
Definition at line 1782 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_ASN1_seq_pack(\fBtype\fP, st, i2d_func, buf, \fBlen\fP)"
\fBValue:\fP
.PP
.nf
ASN1_seq_pack(CHECKED_PTR_OF(STACK_OF(type), st), \
                        CHECKED_I2D_OF(type, i2d_func), buf, len)
.fi
.PP
Definition at line 201 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_ASN1_seq_unpack(\fBtype\fP, buf, \fBlen\fP, d2i_func, \fBfree_func\fP)   (\fBSTACK_OF\fP(\fBtype\fP) *)ASN1_seq_unpack(buf, \fBlen\fP, \fBCHECKED_D2I_OF\fP(\fBtype\fP, d2i_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBtype\fP, \fBfree_func\fP))"

.PP
Definition at line 204 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_ASN1_SET_OF_d2i(\fBtype\fP, st, \fBpp\fP, \fBlength\fP, d2i_func, \fBfree_func\fP, \fBex_tag\fP, \fBex_class\fP)"
\fBValue:\fP
.PP
.nf
(STACK_OF(type) *)d2i_ASN1_SET( \
                                (STACK_OF(OPENSSL_BLOCK) **)CHECKED_PTR_OF(STACK_OF(type)*, st), \
                                pp, length, \
                                CHECKED_D2I_OF(type, d2i_func), \
                                CHECKED_SK_FREE_FUNC(type, free_func), \
                                ex_tag, ex_class)
.fi
.PP
Definition at line 190 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_ASN1_SET_OF_i2d(\fBtype\fP, st, \fBpp\fP, i2d_func, \fBex_tag\fP, \fBex_class\fP, is_set)"
\fBValue:\fP
.PP
.nf
i2d_ASN1_SET((STACK_OF(OPENSSL_BLOCK) *)CHECKED_STACK_OF(type, st), pp, \
                                CHECKED_I2D_OF(type, i2d_func), \
                                ex_tag, ex_class, is_set)
.fi
.PP
Definition at line 197 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_PKCS12_decrypt_d2i(\fBtype\fP, algor, d2i_func, \fBfree_func\fP, \fBpass\fP, \fBpasslen\fP, oct, seq)"
\fBValue:\fP
.PP
.nf
(STACK_OF(type) *)PKCS12_decrypt_d2i(algor, \
                                CHECKED_D2I_OF(type, d2i_func), \
                                CHECKED_SK_FREE_FUNC(type, free_func), \
                                pass, passlen, oct, seq)
.fi
.PP
Definition at line 206 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_deep_copy(\fBtype\fP, st, copy_func, \fBfree_func\fP)   (\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_deep_copy\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_SK_COPY_FUNC\fP(\fBtype\fP, copy_func), \fBCHECKED_SK_FREE_FUNC\fP(\fBtype\fP, \fBfree_func\fP))"

.PP
Definition at line 180 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_delete(\fBtype\fP, st, i)   (\fBtype\fP *)\fBsk_delete\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), i)"

.PP
Definition at line 167 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_delete_ptr(\fBtype\fP, st, ptr)   (\fBtype\fP *)\fBsk_delete_ptr\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, ptr))"

.PP
Definition at line 169 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_dup(\fBtype\fP, st)   (\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_dup\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 176 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_find(\fBtype\fP, st, val)   \fBsk_find\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"

.PP
Definition at line 162 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_find_ex(\fBtype\fP, st, val)"
\fBValue:\fP
.PP
.nf
sk_find_ex(CHECKED_STACK_OF(type, st), \
                   CHECKED_PTR_OF(type, val))
.fi
.PP
Definition at line 164 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_free(\fBtype\fP, st)   \fBsk_free\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 148 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_insert(\fBtype\fP, st, val, i)   \fBsk_insert\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val), i)"

.PP
Definition at line 171 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_is_sorted(\fBtype\fP, st)   \fBsk_is_sorted\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 188 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_new(\fBtype\fP, cmp)   ((\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_new\fP(\fBCHECKED_SK_CMP_FUNC\fP(\fBtype\fP, cmp)))"

.PP
Definition at line 144 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_new_null(\fBtype\fP)   ((\fBSTACK_OF\fP(\fBtype\fP) *)\fBsk_new_null\fP())"

.PP
Definition at line 146 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_num(\fBtype\fP, st)   \fBsk_num\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 150 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_pop(\fBtype\fP, st)   (\fBtype\fP *)\fBsk_pop\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 184 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_pop_free(\fBtype\fP, st, \fBfree_func\fP)   \fBsk_pop_free\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_SK_FREE_FUNC\fP(\fBtype\fP, \fBfree_func\fP))"

.PP
Definition at line 178 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_push(\fBtype\fP, st, val)   \fBsk_push\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"

.PP
Definition at line 158 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_set(\fBtype\fP, st, i, val)   \fBsk_set\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), i, \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"

.PP
Definition at line 154 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_set_cmp_func(\fBtype\fP, st, cmp)"
\fBValue:\fP
.PP
.nf
((int (*)(const type * const *,const type * const *)) \
        sk_set_cmp_func(CHECKED_STACK_OF(type, st), CHECKED_SK_CMP_FUNC(type, cmp)))
.fi
.PP
Definition at line 173 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_shift(\fBtype\fP, st)   (\fBtype\fP *)\fBsk_shift\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 182 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_sort(\fBtype\fP, st)   \fBsk_sort\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 186 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_unshift(\fBtype\fP, st, val)   \fBsk_unshift\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), \fBCHECKED_PTR_OF\fP(\fBtype\fP, val))"

.PP
Definition at line 160 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_value(\fBtype\fP, st, i)   ((\fBtype\fP *)\fBsk_value\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st), i))"

.PP
Definition at line 152 of file include/openssl/safestack\&.h\&.
.SS "#define SKM_sk_zero(\fBtype\fP, st)   \fBsk_zero\fP(\fBCHECKED_STACK_OF\fP(\fBtype\fP, st))"

.PP
Definition at line 156 of file include/openssl/safestack\&.h\&.
.SS "#define STACK_OF(\fBtype\fP)   struct stack_st_##\fBtype\fP"

.PP
Definition at line 88 of file include/openssl/safestack\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBvoid\fP* \fBOPENSSL_BLOCK\fP"

.PP
Definition at line 137 of file include/openssl/safestack\&.h\&.
.SS "typedef const char* \fBOPENSSL_CSTRING\fP"

.PP
Definition at line 121 of file include/openssl/safestack\&.h\&.
.SS "typedef char* \fBOPENSSL_STRING\fP"

.PP
Definition at line 119 of file include/openssl/safestack\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
