.TH "s2n-master/libcrypto-build/openssl/crypto/evp/evp_locl.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/crypto/evp/evp_locl.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBevp_pkey_ctx_st\fP"
.br
.ti -1c
.RI "struct \fBevp_pkey_method_st\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBLOCK_CIPHER_ecb_loop\fP()"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_func_ecb\fP(cname,  cprefix,  kstruct,  ksched)"
.br
.ti -1c
.RI "#define \fBEVP_MAXCHUNK\fP   ((size_t)1<<(sizeof(long)*8\-2))"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_func_ofb\fP(cname,  cprefix,  cbits,  kstruct,  ksched)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_func_cbc\fP(cname,  cprefix,  kstruct,  ksched)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_func_cfb\fP(cname,  cprefix,  cbits,  kstruct,  ksched)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_all_funcs\fP(cname,  cprefix,  cbits,  kstruct,  ksched)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_def1\fP(cname,  nmode,  mode,  MODE,  kstruct,  \fBnid\fP,  block_size,  key_len,  iv_len,  \fBflags\fP,  init_key,  cleanup,  set_asn1,  get_asn1,  ctrl)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_def_cbc\fP(cname,  kstruct,  \fBnid\fP,  block_size,  key_len,  iv_len,  \fBflags\fP,  init_key,  cleanup,  set_asn1,  get_asn1,  ctrl)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_def_cfb\fP(cname,  kstruct,  \fBnid\fP,  key_len,  iv_len,  cbits,  \fBflags\fP,  init_key,  cleanup,  set_asn1,  get_asn1,  ctrl)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_def_ofb\fP(cname,  kstruct,  \fBnid\fP,  key_len,  iv_len,  cbits,  \fBflags\fP,  init_key,  cleanup,  set_asn1,  get_asn1,  ctrl)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_def_ecb\fP(cname,  kstruct,  \fBnid\fP,  block_size,  key_len,  \fBflags\fP,  init_key,  cleanup,  set_asn1,  get_asn1,  ctrl)"
.br
.ti -1c
.RI "#define \fBBLOCK_CIPHER_defs\fP(cname,  kstruct,  \fBnid\fP,  block_size,  key_len,  iv_len,  cbits,  \fBflags\fP,  init_key,  cleanup,  set_asn1,  get_asn1,  ctrl)"
.br
.ti -1c
.RI "#define \fBIMPLEMENT_BLOCK_CIPHER\fP(cname,  ksched,  cprefix,  kstruct,  \fBnid\fP,  block_size,  key_len,  iv_len,  cbits,  \fBflags\fP,  init_key,  cleanup,  set_asn1,  get_asn1,  ctrl)"
.br
.ti -1c
.RI "#define \fBEVP_C_DATA\fP(kstruct,  ctx)               ((kstruct *)(ctx)\->cipher_data)"
.br
.ti -1c
.RI "#define \fBIMPLEMENT_CFBR\fP(cipher,  cprefix,  kstruct,  ksched,  keysize,  cbits,  iv_len)"
.br
.ti -1c
.RI "#define \fBEVP_PKEY_FLAG_DYNAMIC\fP   1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBevp_pkey_set_cb_translate\fP (\fBBN_GENCB\fP *\fBcb\fP, \fBEVP_PKEY_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBPKCS5_v2_PBKDF2_keyivgen\fP (\fBEVP_CIPHER_CTX\fP *ctx, const char *\fBpass\fP, int \fBpasslen\fP, \fBASN1_TYPE\fP *param, const \fBEVP_CIPHER\fP *\fBc\fP, const \fBEVP_MD\fP *md, int en_de)"
.br
.ti -1c
.RI "const \fBEVP_MD\fP * \fBevp_get_fips_md\fP (const \fBEVP_MD\fP *md)"
.br
.ti -1c
.RI "const \fBEVP_CIPHER\fP * \fBevp_get_fips_cipher\fP (const \fBEVP_CIPHER\fP *cipher)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BLOCK_CIPHER_ecb_loop()"
\fBValue:\fP
.PP
.nf
size_t i, bl; \
        bl = ctx->cipher->block_size;\
        if(inl < bl) return 1;\
        inl -= bl; \
        for(i=0; i <= inl; i+=bl)
.fi
.PP
Definition at line 64 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_func_ecb(cname, cprefix, kstruct, ksched)"
\fBValue:\fP
.PP
.nf
static int cname##_ecb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl) \
{\
        BLOCK_CIPHER_ecb_loop() \
                cprefix##_ecb_encrypt(in + i, out + i, &((kstruct *)ctx->cipher_data)->ksched, ctx->encrypt);\
        return 1;\
}
.fi
.PP
Definition at line 71 of file evp_locl\&.h\&.
.SS "#define EVP_MAXCHUNK   ((size_t)1<<(sizeof(long)*8\-2))"

.PP
Definition at line 79 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_func_ofb(cname, cprefix, cbits, kstruct, ksched)"
\fBValue:\fP
.PP
.nf
static int cname##_ofb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl) \
{\
        while(inl>=EVP_MAXCHUNK)\
            {\
            cprefix##_ofb##cbits##_encrypt(in, out, (long)EVP_MAXCHUNK, &((kstruct *)ctx->cipher_data)->ksched, ctx->iv, &ctx->num);\
            inl-=EVP_MAXCHUNK;\
            in +=EVP_MAXCHUNK;\
            out+=EVP_MAXCHUNK;\
            }\
        if (inl)\
            cprefix##_ofb##cbits##_encrypt(in, out, (long)inl, &((kstruct *)ctx->cipher_data)->ksched, ctx->iv, &ctx->num);\
        return 1;\
}
.fi
.PP
Definition at line 81 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_func_cbc(cname, cprefix, kstruct, ksched)"
\fBValue:\fP
.PP
.nf
static int cname##_cbc_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl) \
{\
        while(inl>=EVP_MAXCHUNK) \
            {\
            cprefix##_cbc_encrypt(in, out, (long)EVP_MAXCHUNK, &((kstruct *)ctx->cipher_data)->ksched, ctx->iv, ctx->encrypt);\
            inl-=EVP_MAXCHUNK;\
            in +=EVP_MAXCHUNK;\
            out+=EVP_MAXCHUNK;\
            }\
        if (inl)\
            cprefix##_cbc_encrypt(in, out, (long)inl, &((kstruct *)ctx->cipher_data)->ksched, ctx->iv, ctx->encrypt);\
        return 1;\
}
.fi
.PP
Definition at line 96 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_func_cfb(cname, cprefix, cbits, kstruct, ksched)"
\fBValue:\fP
.PP
.nf
static int cname##_cfb##cbits##_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl) \
{\
        size_t chunk=EVP_MAXCHUNK;\
        if (cbits==1)  chunk>>=3;\
        if (inl<chunk) chunk=inl;\
        while(inl && inl>=chunk)\
            {\
            cprefix##_cfb##cbits##_encrypt(in, out, (long)((cbits==1) && !(ctx->flags & EVP_CIPH_FLAG_LENGTH_BITS) ?inl*8:inl), &((kstruct *)ctx->cipher_data)->ksched, ctx->iv, &ctx->num, ctx->encrypt);\
            inl-=chunk;\
            in +=chunk;\
            out+=chunk;\
            if(inl<chunk) chunk=inl;\
            }\
        return 1;\
}
.fi
.PP
Definition at line 111 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_all_funcs(cname, cprefix, cbits, kstruct, ksched)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_func_cbc(cname, cprefix, kstruct, ksched) \
        BLOCK_CIPHER_func_cfb(cname, cprefix, cbits, kstruct, ksched) \
        BLOCK_CIPHER_func_ecb(cname, cprefix, kstruct, ksched) \
        BLOCK_CIPHER_func_ofb(cname, cprefix, cbits, kstruct, ksched)
.fi
.PP
Definition at line 128 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_def1(cname, nmode, mode, MODE, kstruct, \fBnid\fP, block_size, key_len, iv_len, \fBflags\fP, init_key, cleanup, set_asn1, get_asn1, ctrl)"
\fBValue:\fP
.PP
.nf
static const EVP_CIPHER cname##_##mode = { \
        nid##_##nmode, block_size, key_len, iv_len, \
        flags | EVP_CIPH_##MODE##_MODE, \
        init_key, \
        cname##_##mode##_cipher, \
        cleanup, \
        sizeof(kstruct), \
        set_asn1, get_asn1,\
        ctrl, \
        NULL \
}; \
const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
.fi
.PP
Definition at line 134 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_def_cbc(cname, kstruct, \fBnid\fP, block_size, key_len, iv_len, \fBflags\fP, init_key, cleanup, set_asn1, get_asn1, ctrl)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_def1(cname, cbc, cbc, CBC, kstruct, nid, block_size, key_len, \
                  iv_len, flags, init_key, cleanup, set_asn1, get_asn1, ctrl)
.fi
.PP
Definition at line 150 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_def_cfb(cname, kstruct, \fBnid\fP, key_len, iv_len, cbits, \fBflags\fP, init_key, cleanup, set_asn1, get_asn1, ctrl)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_def1(cname, cfb##cbits, cfb##cbits, CFB, kstruct, nid, 1, \
                  key_len, iv_len, flags, init_key, cleanup, set_asn1, \
                  get_asn1, ctrl)
.fi
.PP
Definition at line 156 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_def_ofb(cname, kstruct, \fBnid\fP, key_len, iv_len, cbits, \fBflags\fP, init_key, cleanup, set_asn1, get_asn1, ctrl)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_def1(cname, ofb##cbits, ofb, OFB, kstruct, nid, 1, \
                  key_len, iv_len, flags, init_key, cleanup, set_asn1, \
                  get_asn1, ctrl)
.fi
.PP
Definition at line 163 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_def_ecb(cname, kstruct, \fBnid\fP, block_size, key_len, \fBflags\fP, init_key, cleanup, set_asn1, get_asn1, ctrl)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_def1(cname, ecb, ecb, ECB, kstruct, nid, block_size, key_len, \
                  0, flags, init_key, cleanup, set_asn1, get_asn1, ctrl)
.fi
.PP
Definition at line 170 of file evp_locl\&.h\&.
.SS "#define BLOCK_CIPHER_defs(cname, kstruct, \fBnid\fP, block_size, key_len, iv_len, cbits, \fBflags\fP, init_key, cleanup, set_asn1, get_asn1, ctrl)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_def_cbc(cname, kstruct, nid, block_size, key_len, iv_len, flags, \
                     init_key, cleanup, set_asn1, get_asn1, ctrl) \\
BLOCK_CIPHER_def_cfb(cname, kstruct, nid, key_len, iv_len, cbits, \
                     flags, init_key, cleanup, set_asn1, get_asn1, ctrl) \\
BLOCK_CIPHER_def_ofb(cname, kstruct, nid, key_len, iv_len, cbits, \
                     flags, init_key, cleanup, set_asn1, get_asn1, ctrl) \\
BLOCK_CIPHER_def_ecb(cname, kstruct, nid, block_size, key_len, flags, \
                     init_key, cleanup, set_asn1, get_asn1, ctrl)
.fi
.PP
Definition at line 176 of file evp_locl\&.h\&.
.SS "#define IMPLEMENT_BLOCK_CIPHER(cname, ksched, cprefix, kstruct, \fBnid\fP, block_size, key_len, iv_len, cbits, \fBflags\fP, init_key, cleanup, set_asn1, get_asn1, ctrl)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_all_funcs(cname, cprefix, cbits, kstruct, ksched) \
        BLOCK_CIPHER_defs(cname, kstruct, nid, block_size, key_len, iv_len, \
                          cbits, flags, init_key, cleanup, set_asn1, \
                          get_asn1, ctrl)
.fi
.PP
Definition at line 246 of file evp_locl\&.h\&.
.SS "#define EVP_C_DATA(kstruct, ctx)   ((kstruct *)(ctx)\->cipher_data)"

.PP
Definition at line 255 of file evp_locl\&.h\&.
.SS "#define IMPLEMENT_CFBR(cipher, cprefix, kstruct, ksched, keysize, cbits, iv_len)"
\fBValue:\fP
.PP
.nf
BLOCK_CIPHER_func_cfb(cipher##_##keysize,cprefix,cbits,kstruct,ksched) \
        BLOCK_CIPHER_def_cfb(cipher##_##keysize,kstruct, \
                             NID_##cipher##_##keysize, keysize/8, iv_len, cbits, \
                             0, cipher##_init_key, NULL, \
                             EVP_CIPHER_set_asn1_iv, \
                             EVP_CIPHER_get_asn1_iv, \
                             NULL)
.fi
.PP
Definition at line 257 of file evp_locl\&.h\&.
.SS "#define EVP_PKEY_FLAG_DYNAMIC   1"

.PP
Definition at line 288 of file evp_locl\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP evp_pkey_set_cb_translate (\fBBN_GENCB\fP * cb, \fBEVP_PKEY_CTX\fP * ctx)"

.SS "int PKCS5_v2_PBKDF2_keyivgen (\fBEVP_CIPHER_CTX\fP * ctx, const char * pass, int passlen, \fBASN1_TYPE\fP * param, const \fBEVP_CIPHER\fP * c, const \fBEVP_MD\fP * md, int en_de)"

.SS "const \fBEVP_MD\fP* evp_get_fips_md (const \fBEVP_MD\fP * md)"

.SS "const \fBEVP_CIPHER\fP* evp_get_fips_cipher (const \fBEVP_CIPHER\fP * cipher)"

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
