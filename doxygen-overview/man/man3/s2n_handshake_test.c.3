.TH "s2n-master/tests/unit/s2n_handshake_test.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tests/unit/s2n_handshake_test.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 's2n_test\&.h'\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <s2n\&.h>\fP
.br
\fC#include 'tls/s2n_connection\&.h'\fP
.br
\fC#include 'tls/s2n_handshake\&.h'\fP
.br
\fC#include 'tls/s2n_cipher_suites\&.h'\fP
.br
\fC#include 'utils/s2n_safety\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char ** argv)"

.PP
Definition at line 125 of file s2n_handshake_test\&.c\&.
.PP
.nf
126 {
127     struct s2n_config *server_config;
128     struct s2n_cipher_preferences *default_cipher_preferences;
129 
130     BEGIN_TEST();
131 
132     EXPECT_SUCCESS(setenv("S2N_ENABLE_CLIENT_MODE", "1", 0));
133 
134     EXPECT_NOT_NULL(server_config = s2n_config_new());
135     EXPECT_SUCCESS(s2n_config_add_cert_chain_and_key(server_config, certificate_chain, private_key));
136     EXPECT_SUCCESS(s2n_config_add_dhparams(server_config, dhparams));
137     EXPECT_NOT_NULL(default_cipher_preferences = server_config->cipher_preferences);
138 
139     /* Verify that a handshake succeeds for every cipher in the default list\&. */
140     for (int cipher_idx = 0; cipher_idx < default_cipher_preferences->count; cipher_idx++) {
141         struct s2n_cipher_preferences server_cipher_preferences;
142         struct s2n_connection *client_conn;
143         struct s2n_connection *server_conn;
144         s2n_blocked_status client_blocked;
145         s2n_blocked_status server_blocked;
146         int server_to_client[2];
147         int client_to_server[2];
148 
149         /* Craft a cipher preference with a cipher_idx cipher
150            NOTE: Its safe to use memcpy as the address of server_cipher_preferences
151            will never be NULL */
152         memcpy(&server_cipher_preferences, default_cipher_preferences, sizeof(server_cipher_preferences));
153         server_cipher_preferences\&.count = 1;
154         server_cipher_preferences\&.wire_format = default_cipher_preferences->wire_format + cipher_idx * S2N_TLS_CIPHER_SUITE_LEN;
155         server_config->cipher_preferences = &server_cipher_preferences;
156 
157         /* Create nonblocking pipes */
158         EXPECT_SUCCESS(pipe(server_to_client));
159         EXPECT_SUCCESS(pipe(client_to_server));
160         for (int i = 0; i < 2; i++) {
161            EXPECT_NOT_EQUAL(fcntl(server_to_client[i], F_SETFL, fcntl(server_to_client[i], F_GETFL) | O_NONBLOCK), -1);
162            EXPECT_NOT_EQUAL(fcntl(client_to_server[i], F_SETFL, fcntl(client_to_server[i], F_GETFL) | O_NONBLOCK), -1);
163         }
164 
165         EXPECT_NOT_NULL(client_conn = s2n_connection_new(S2N_CLIENT));
166         EXPECT_SUCCESS(s2n_connection_set_read_fd(client_conn, server_to_client[0]));
167         EXPECT_SUCCESS(s2n_connection_set_write_fd(client_conn, client_to_server[1]));
168 
169         EXPECT_NOT_NULL(server_conn = s2n_connection_new(S2N_SERVER));
170         EXPECT_SUCCESS(s2n_connection_set_read_fd(server_conn, client_to_server[0]));
171         EXPECT_SUCCESS(s2n_connection_set_write_fd(server_conn, server_to_client[1]));
172         EXPECT_SUCCESS(s2n_connection_set_config(server_conn, server_config));
173 
174         do {
175             int ret;
176             ret = s2n_negotiate(client_conn, &client_blocked);
177             EXPECT_TRUE(ret == 0 || (client_blocked && errno == EAGAIN));
178             ret = s2n_negotiate(server_conn, &server_blocked);
179             EXPECT_TRUE(ret == 0 || (server_blocked && errno == EAGAIN));
180         } while (client_blocked || server_blocked);
181 
182         uint8_t server_shutdown=0;
183         uint8_t client_shutdown=0;
184         do {
185             int ret;
186             if (!server_shutdown) {
187                 ret = s2n_shutdown(server_conn, &server_blocked);
188                 EXPECT_TRUE(ret == 0 || (server_blocked && errno == EAGAIN));
189                 if (ret == 0) {
190                     server_shutdown = 1;
191                 }
192             }
193             if (!client_shutdown) {
194                 ret = s2n_shutdown(client_conn, &client_blocked); 
195                 EXPECT_TRUE(ret == 0 || (client_blocked && errno == EAGAIN));
196                 if (ret == 0) {
197                     client_shutdown = 1;
198                 }
199             }
200         } while (!server_shutdown || !client_shutdown);
201 
202         EXPECT_SUCCESS(s2n_connection_free(server_conn));
203         EXPECT_SUCCESS(s2n_connection_free(client_conn));
204 
205         for (int i = 0; i < 2; i++) {
206            EXPECT_SUCCESS(close(server_to_client[i]));
207            EXPECT_SUCCESS(close(client_to_server[i]));
208         }
209     }
210 
211     EXPECT_SUCCESS(s2n_config_free(server_config));
212 
213     END_TEST();
214     return 0;
215 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
