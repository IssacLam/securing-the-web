.TH "s2n-master/crypto/s2n_drbg.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/crypto/s2n_drbg.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/evp\&.h>\fP
.br
\fC#include 'crypto/s2n_hash\&.h'\fP
.br
\fC#include 'utils/s2n_blob\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBs2n_drbg\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBS2N_DRBG_BLOCK_SIZE\fP   16"
.br
.ti -1c
.RI "#define \fBS2N_DRBG_GENERATE_LIMIT\fP   8192"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBs2n_drbg_instantiate\fP (struct \fBs2n_drbg\fP *drbg, struct \fBs2n_blob\fP *personalization_string)"
.br
.ti -1c
.RI "int \fBs2n_drbg_generate\fP (struct \fBs2n_drbg\fP *drbg, struct \fBs2n_blob\fP *returned_bits)"
.br
.ti -1c
.RI "int \fBs2n_drbg_wipe\fP (struct \fBs2n_drbg\fP *drbg)"
.br
.ti -1c
.RI "int \fBs2n_drbg_bytes_used\fP (struct \fBs2n_drbg\fP *drbg)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define S2N_DRBG_BLOCK_SIZE   16"

.PP
Definition at line 23 of file s2n_drbg\&.h\&.
.SS "#define S2N_DRBG_GENERATE_LIMIT   8192"

.PP
Definition at line 26 of file s2n_drbg\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int s2n_drbg_instantiate (struct \fBs2n_drbg\fP * drbg, struct \fBs2n_blob\fP * personalization_string)"

.PP
Definition at line 112 of file s2n_drbg\&.c\&.
.PP
.nf
113 {
114     struct s2n_blob value = {\&.data = drbg->v,\&.size = sizeof(drbg->v) };
115     uint8_t ps_prefix[32];
116     struct s2n_blob ps = {\&.data = ps_prefix,\&.size = sizeof(ps_prefix) };
117 
118     /* Start off with zerod data, per 10\&.2\&.1\&.3\&.1 item 4 */
119     GUARD(s2n_blob_zero(&value));
120 
121     /* Start off with zerod key, per 10\&.2\&.1\&.3\&.1 item 5 */
122     (void)EVP_CIPHER_CTX_init(&drbg->ctx);
123     if (EVP_EncryptInit_ex(&drbg->ctx, EVP_aes_128_ecb(), NULL, drbg->v, NULL) != 1) {
124         S2N_ERROR(S2N_ERR_DRBG);
125     }
126 
127     /* Copy the personalization string */
128     GUARD(s2n_blob_zero(&ps));
129 
130     memcpy_check(ps\&.data, personalization_string->data, MIN(ps\&.size, personalization_string->size));
131 
132     /* Seed / update the DRBG */
133     GUARD(s2n_drbg_seed(drbg, &ps));
134 
135     /* After initial seeding, pivot to RDRAND if available and not overridden */
136     if (drbg->entropy_generator == NULL && s2n_cpu_supports_rdrand()) {
137         drbg->entropy_generator = s2n_get_rdrand_data;
138     }
139     return 0;
140 }
.fi
.SS "int s2n_drbg_generate (struct \fBs2n_drbg\fP * drbg, struct \fBs2n_blob\fP * returned_bits)"

.PP
Definition at line 142 of file s2n_drbg\&.c\&.
.PP
.nf
143 {
144     uint8_t all_zeros[32] = { 0 };
145     struct s2n_blob zeros = {\&.data = all_zeros,\&.size = sizeof(all_zeros) };
146     if (blob->size > S2N_DRBG_GENERATE_LIMIT) {
147         S2N_ERROR(S2N_ERR_DRBG_REQUEST_SIZE);
148     }
149 
150     GUARD(s2n_drbg_seed(drbg, &zeros));
151     GUARD(s2n_drbg_bits(drbg, blob));
152     GUARD(s2n_drbg_update(drbg, &zeros));
153 
154     return 0;
155 }
.fi
.SS "int s2n_drbg_wipe (struct \fBs2n_drbg\fP * drbg)"

.PP
Definition at line 157 of file s2n_drbg\&.c\&.
.PP
.nf
158 {
159     struct s2n_blob state = {\&.data = (void *)drbg,\&.size = sizeof(struct s2n_drbg) };
160 
161     if (EVP_CIPHER_CTX_cleanup(&drbg->ctx) != 1) {
162         S2N_ERROR(S2N_ERR_DRBG);
163     }
164 
165     GUARD(s2n_blob_zero(&state));
166 
167     return 0;
168 }
.fi
.SS "int s2n_drbg_bytes_used (struct \fBs2n_drbg\fP * drbg)"

.PP
Definition at line 170 of file s2n_drbg\&.c\&.
.PP
.nf
171 {
172     return drbg->bytes_used;
173 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
