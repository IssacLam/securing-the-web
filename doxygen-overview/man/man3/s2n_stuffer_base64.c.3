.TH "s2n-master/stuffer/s2n_stuffer_base64.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/stuffer/s2n_stuffer_base64.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include 'error/s2n_errno\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'utils/s2n_safety\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBs2n_stuffer_read_base64\fP (struct \fBs2n_stuffer\fP *stuffer, struct \fBs2n_stuffer\fP *out)"
.br
.ti -1c
.RI "int \fBs2n_stuffer_write_base64\fP (struct \fBs2n_stuffer\fP *stuffer, struct \fBs2n_stuffer\fP *in)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int s2n_stuffer_read_base64 (struct \fBs2n_stuffer\fP * stuffer, struct \fBs2n_stuffer\fP * out)"
NOTE: In general, shift before masking\&. This avoids needing to worry about how the signed bit may be handled\&. 
.PP
Definition at line 70 of file s2n_stuffer_base64\&.c\&.
.PP
.nf
71 {
72     uint8_t pad[4];
73     int bytes_this_round = 3;
74     struct s2n_blob o = {\&.data = pad,\&.size = sizeof(pad) };
75 
76     do {
77         if (s2n_stuffer_data_available(stuffer) < 4) {
78             break;
79         }
80 
81         GUARD(s2n_stuffer_read(stuffer, &o));
82 
83         uint8_t value1 = b64_inverse[o\&.data[0]];
84         uint8_t value2 = b64_inverse[o\&.data[1]];
85         uint8_t value3 = b64_inverse[o\&.data[2]];
86         uint8_t value4 = b64_inverse[o\&.data[3]];
87 
88         /* Terminate cleanly if we encounter a non-base64 character */
89         if (value1 == 255) {
90             /* Undo the read */
91             stuffer->read_cursor -= 4;
92             return 0;
93         }
94 
95         /* The first two characters can never be '=' and in general
96          * everything has to be a valid character\&. 
97          */
98         if (value1 == 64 || value2 == 64 || value2 == 255 || value3 == 255 || value4 == 255) {
99             S2N_ERROR(S2N_ERR_INVALID_BASE64);
100         }
101 
102         if (o\&.data[2] == '=') {
103             /* If there is only one output byte, then the second value
104              * should have none of its bottom four bits set\&.
105              */
106             if (o\&.data[3] != '=' || value2 & 0x0f) {
107                 S2N_ERROR(S2N_ERR_INVALID_BASE64);
108             }
109             bytes_this_round = 1;
110             value3 = 0;
111             value4 = 0;
112         } else if (o\&.data[3] == '=') {
113             /* The last two bits of the final value should be unset */
114             if (value3 & 0x03) {
115                 S2N_ERROR(S2N_ERR_INVALID_BASE64);
116             }
117 
118             bytes_this_round = 2;
119             value4 = 0;
120         }
121 
122         /* value1 maps to the first 6 bits of the first data byte */
123         /* value2's top two bits are the rest */
124         uint8_t c = ((value1 << 2) & 0xfc) | ((value2 >> 4) & 0x03);
125         GUARD(s2n_stuffer_write_uint8(out, c));
126 
127         if (bytes_this_round > 1) {
128             /* Put the next four bits in the second data byte */
129             /* Put the next four bits in the third data byte */
130             c = ((value2 << 4) & 0xf0) | ((value3 >> 2) & 0x0f);
131             GUARD(s2n_stuffer_write_uint8(out, c));
132         }
133 
134         if (bytes_this_round > 2) {
135             /* Put the next two bits in the third data byte */
136             /* Put the next six bits in the fourth data byte */
137             c = ((value3 << 6) & 0xc0) | (value4 & 0x3f);
138             GUARD(s2n_stuffer_write_uint8(out, c));
139         }
140 
141     } while (bytes_this_round == 3);
142 
143     return 0;
144 }
.fi
.SS "int s2n_stuffer_write_base64 (struct \fBs2n_stuffer\fP * stuffer, struct \fBs2n_stuffer\fP * in)"

.PP
Definition at line 146 of file s2n_stuffer_base64\&.c\&.
.PP
.nf
147 {
148     uint8_t outpad[4];
149     uint8_t inpad[3];
150     struct s2n_blob o = {\&.data = outpad,\&.size = sizeof(outpad) };
151     struct s2n_blob i = {\&.data = inpad,\&.size = sizeof(inpad) };
152 
153     while (s2n_stuffer_data_available(in) > 2) {
154         GUARD(s2n_stuffer_read(in, &i));
155 
156         /* Take the top 6-bits of the first data byte  */
157         o\&.data[0] = b64[(i\&.data[0] >> 2) & 0x3f];
158 
159         /* Take the bottom 2-bits of the first data byte -  0b00110000 = 0x30
160          * and take the top 4-bits of the second data byte - 0b00001111 = 0x0f 
161          */
162         o\&.data[1] = b64[((i\&.data[0] << 4) & 0x30) | ((i\&.data[1] >> 4) & 0x0f)];
163 
164         /* Take the bottom 4-bits of the second data byte - 0b00111100 = 0x3c
165          * and take the top 2-bits of the third data byte - 0b00000011 = 0x03 
166          */
167         o\&.data[2] = b64[((i\&.data[1] << 2) & 0x3c) | ((i\&.data[2] >> 6) & 0x03)];
168 
169         /* Take the bottom 6-bits of the second data byte - 0b00111111 = 0x3f
170          */
171         o\&.data[3] = b64[i\&.data[2] & 0x3f];
172 
173         GUARD(s2n_stuffer_write(stuffer, &o));
174     }
175 
176     if (s2n_stuffer_data_available(in)) {
177         /* Read just one byte */
178         i\&.size = 1;
179         GUARD(s2n_stuffer_read(in, &i));
180         uint8_t c = i\&.data[0];
181 
182         /* We at least one data byte left to encode, encode
183          * its first six bits 
184          */
185         o\&.data[0] = b64[(c >> 2) & 0x3f];
186 
187         /* And our end has to be an equals */
188         o\&.data[3] = '=';
189 
190         /* How many bytes are actually left? */
191         if (s2n_stuffer_data_available(in) == 0) {
192             /* We just have the last two bits to deal with */
193             o\&.data[1] = b64[(c << 4) & 0x30];
194             o\&.data[2] = '=';
195         } else {
196             /* Read the last byte */
197             GUARD(s2n_stuffer_read(in, &i));
198 
199             o\&.data[1] = b64[((c << 4) & 0x30) | ((i\&.data[0] >> 4) & 0x0f)];
200             o\&.data[2] = b64[((i\&.data[0] << 2) & 0x3c)];
201         }
202 
203         GUARD(s2n_stuffer_write(stuffer, &o));
204     }
205 
206     return 0;
207 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
