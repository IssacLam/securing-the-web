.TH "s2n-master/tests/unit/s2n_hash_test.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tests/unit/s2n_hash_test.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 's2n_test\&.h'\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'testlib/s2n_testlib\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'crypto/s2n_hash\&.h'\fP
.br
\fC#include 'utils/s2n_blob\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char ** argv)"

.PP
Definition at line 25 of file s2n_hash_test\&.c\&.
.PP
.nf
26 {
27     uint8_t digest_pad[64];
28     uint8_t output_pad[96];
29     uint8_t hello[] = "Hello world!\n";
30     struct s2n_stuffer output;
31     struct s2n_hash_state hash, copy;
32     struct s2n_blob out = {\&.data = output_pad,\&.size = sizeof(output_pad) };
33 
34     BEGIN_TEST();
35 
36     /* Initialise our output stuffers */
37     EXPECT_SUCCESS(s2n_stuffer_init(&output, &out));
38 
39     EXPECT_EQUAL(s2n_hash_digest_size(S2N_HASH_MD5), 16);
40     EXPECT_SUCCESS(s2n_hash_init(&hash, S2N_HASH_MD5));
41     EXPECT_SUCCESS(s2n_hash_update(&hash, hello, strlen((char *)hello)));
42     EXPECT_SUCCESS(s2n_hash_copy(&copy, &hash));
43     EXPECT_SUCCESS(s2n_hash_digest(&hash, digest_pad, MD5_DIGEST_LENGTH));
44 
45     for (int i = 0; i < 16; i++) {
46         EXPECT_SUCCESS(s2n_stuffer_write_uint8_hex(&output, digest_pad[i]));
47     }
48 
49     /* Reference value from command line md5sum */
50     EXPECT_EQUAL(memcmp(output_pad, "59ca0efa9f5633cb0371bbc0355478d8", 16 * 2), 0);
51 
52     /* Check the copy */
53     EXPECT_SUCCESS(s2n_hash_digest(&copy, digest_pad, MD5_DIGEST_LENGTH));
54 
55     for (int i = 0; i < 16; i++) {
56         EXPECT_SUCCESS(s2n_stuffer_write_uint8_hex(&output, digest_pad[i]));
57     }
58 
59     /* Reference value from command line md5sum */
60     EXPECT_EQUAL(memcmp(output_pad, "59ca0efa9f5633cb0371bbc0355478d8", 16 * 2), 0);
61 
62     EXPECT_SUCCESS(s2n_stuffer_init(&output, &out));
63     EXPECT_EQUAL(s2n_hash_digest_size(S2N_HASH_SHA1), 20);
64     EXPECT_SUCCESS(s2n_hash_init(&hash, S2N_HASH_SHA1));
65     EXPECT_SUCCESS(s2n_hash_update(&hash, hello, strlen((char *)hello)));
66     EXPECT_SUCCESS(s2n_hash_digest(&hash, digest_pad, SHA_DIGEST_LENGTH));
67 
68     for (int i = 0; i < 20; i++) {
69         EXPECT_SUCCESS(s2n_stuffer_write_uint8_hex(&output, digest_pad[i]));
70     }
71 
72     /* Reference value from command line sha1sum */
73     EXPECT_EQUAL(memcmp(output_pad, "47a013e660d408619d894b20806b1d5086aab03b", 20 * 2), 0);
74 
75     EXPECT_SUCCESS(s2n_stuffer_init(&output, &out));
76     EXPECT_EQUAL(s2n_hash_digest_size(S2N_HASH_SHA256), 32);
77     EXPECT_SUCCESS(s2n_hash_init(&hash, S2N_HASH_SHA256));
78     EXPECT_SUCCESS(s2n_hash_update(&hash, hello, strlen((char *)hello)));
79     EXPECT_SUCCESS(s2n_hash_digest(&hash, digest_pad, SHA256_DIGEST_LENGTH));
80 
81     for (int i = 0; i < 32; i++) {
82         EXPECT_SUCCESS(s2n_stuffer_write_uint8_hex(&output, digest_pad[i]));
83     }
84 
85     /* Reference value from command line sha256sum */
86     EXPECT_EQUAL(memcmp(output_pad, "0ba904eae8773b70c75333db4de2f3ac45a8ad4ddba1b242f0b3cfc199391dd8", 32 * 2), 0);
87 
88     EXPECT_SUCCESS(s2n_stuffer_init(&output, &out));
89     EXPECT_EQUAL(s2n_hash_digest_size(S2N_HASH_SHA384), 48);
90     EXPECT_SUCCESS(s2n_hash_init(&hash, S2N_HASH_SHA384));
91     EXPECT_SUCCESS(s2n_hash_update(&hash, hello, strlen((char *)hello)));
92     EXPECT_SUCCESS(s2n_hash_digest(&hash, digest_pad, SHA384_DIGEST_LENGTH));
93 
94     for (int i = 0; i < 48; i++) {
95         EXPECT_SUCCESS(s2n_stuffer_write_uint8_hex(&output, digest_pad[i]));
96     }
97 
98     /* Reference value from command line sha512sum */
99     EXPECT_EQUAL(memcmp(output_pad, "f7f8f1b9d5a9a61742eeda26c20990282ac08dabda14e70376fcb4c8b46198a9959ea9d7d194b38520eed5397ffe6d8e", 48 * 2), 0);
100 
101     END_TEST();
102 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
