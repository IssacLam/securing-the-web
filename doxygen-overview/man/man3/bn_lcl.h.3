.TH "s2n-master/libcrypto-build/openssl/crypto/bn/bn_lcl.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/crypto/bn/bn_lcl.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/bn\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBN_window_bits_for_exponent_size\fP(b)"
.br
.ti -1c
.RI "#define \fBMOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH\fP   ( 64 )"
.br
.ti -1c
.RI "#define \fBMOD_EXP_CTIME_MIN_CACHE_LINE_MASK\fP   (\fBMOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH\fP \- 1)"
.br
.ti -1c
.RI "#define \fBBN_window_bits_for_ctime_exponent_size\fP(b)"
.br
.ti -1c
.RI "#define \fBBN_MAX_WINDOW_BITS_FOR_CTIME_EXPONENT_SIZE\fP   (6)"
.br
.ti -1c
.RI "#define \fBBN_MULL_SIZE_NORMAL\fP   (16)/* 32 */"
.br
.ti -1c
.RI "#define \fBBN_MUL_RECURSIVE_SIZE_NORMAL\fP   (16)/* 32 less than */"
.br
.ti -1c
.RI "#define \fBBN_SQR_RECURSIVE_SIZE_NORMAL\fP   (16)/* 32 */"
.br
.ti -1c
.RI "#define \fBBN_MUL_LOW_RECURSIVE_SIZE_NORMAL\fP   (32)/* 32 */"
.br
.ti -1c
.RI "#define \fBBN_MONT_CTX_SET_SIZE_WORD\fP   (64)/* 32 */"
.br
.ti -1c
.RI "#define \fBPTR_SIZE_INT\fP   size_t"
.br
.ti -1c
.RI "#define \fBLw\fP(\fBt\fP)       (((BN_ULONG)(\fBt\fP))&BN_MASK2)"
.br
.ti -1c
.RI "#define \fBHw\fP(\fBt\fP)       (((BN_ULONG)((\fBt\fP)>>BN_BITS2))&BN_MASK2)"
.br
.ti -1c
.RI "#define \fBbn_clear_top2max\fP(\fBa\fP)"
.br
.ti -1c
.RI "#define \fBLBITS\fP(\fBa\fP)               ((\fBa\fP)&BN_MASK2l)"
.br
.ti -1c
.RI "#define \fBHBITS\fP(\fBa\fP)               (((\fBa\fP)>>BN_BITS4)&BN_MASK2l)"
.br
.ti -1c
.RI "#define \fBL2HBITS\fP(\fBa\fP)           (((\fBa\fP)<<BN_BITS4)&BN_MASK2)"
.br
.ti -1c
.RI "#define \fBLLBITS\fP(\fBa\fP)             ((\fBa\fP)&BN_MASKl)"
.br
.ti -1c
.RI "#define \fBLHBITS\fP(\fBa\fP)             (((\fBa\fP)>>BN_BITS2)&BN_MASKl)"
.br
.ti -1c
.RI "#define \fBLL2HBITS\fP(\fBa\fP)         ((BN_ULLONG)((\fBa\fP)&BN_MASKl)<<BN_BITS2)"
.br
.ti -1c
.RI "#define \fBmul64\fP(l,  h,  bl,  bh)"
.br
.ti -1c
.RI "#define \fBsqr64\fP(lo,  ho,  in)"
.br
.ti -1c
.RI "#define \fBmul_add\fP(r,  \fBa\fP,  bl,  bh,  \fBc\fP)"
.br
.ti -1c
.RI "#define \fBmul\fP(r,  \fBa\fP,  bl,  bh,  \fBc\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_normal\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, int na, BN_ULONG *b, int nb)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_comba8\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, BN_ULONG *b)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_comba4\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, BN_ULONG *b)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_sqr_normal\fP (BN_ULONG *r, const BN_ULONG *\fBa\fP, int n, BN_ULONG *tmp)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_sqr_comba8\fP (BN_ULONG *r, const BN_ULONG *\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_sqr_comba4\fP (BN_ULONG *r, const BN_ULONG *\fBa\fP)"
.br
.ti -1c
.RI "int \fBbn_cmp_words\fP (const BN_ULONG *\fBa\fP, const BN_ULONG *b, int n)"
.br
.ti -1c
.RI "int \fBbn_cmp_part_words\fP (const BN_ULONG *\fBa\fP, const BN_ULONG *b, int cl, int dl)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_recursive\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, BN_ULONG *b, int n2, int dna, int dnb, BN_ULONG *\fBt\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_part_recursive\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, BN_ULONG *b, int n, int tna, int tnb, BN_ULONG *\fBt\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_sqr_recursive\fP (BN_ULONG *r, const BN_ULONG *\fBa\fP, int n2, BN_ULONG *\fBt\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_low_normal\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, BN_ULONG *b, int n)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_low_recursive\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, BN_ULONG *b, int n2, BN_ULONG *\fBt\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbn_mul_high\fP (BN_ULONG *r, BN_ULONG *\fBa\fP, BN_ULONG *b, BN_ULONG *l, int n2, BN_ULONG *\fBt\fP)"
.br
.ti -1c
.RI "BN_ULONG \fBbn_add_part_words\fP (BN_ULONG *r, const BN_ULONG *\fBa\fP, const BN_ULONG *b, int cl, int dl)"
.br
.ti -1c
.RI "BN_ULONG \fBbn_sub_part_words\fP (BN_ULONG *r, const BN_ULONG *\fBa\fP, const BN_ULONG *b, int cl, int dl)"
.br
.ti -1c
.RI "int \fBbn_mul_mont\fP (BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *\fBbp\fP, const BN_ULONG *np, const BN_ULONG *n0, int \fBnum\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BN_window_bits_for_exponent_size(b)"
\fBValue:\fP
.PP
.nf
((b) > 671 ? 6 : \
                 (b) > 239 ? 5 : \
                 (b) >  79 ? 4 : \
                 (b) >  23 ? 3 : 1)
.fi
.PP
Definition at line 147 of file bn_lcl\&.h\&.
.SS "#define MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH   ( 64 )"

.PP
Definition at line 168 of file bn_lcl\&.h\&.
.SS "#define MOD_EXP_CTIME_MIN_CACHE_LINE_MASK   (\fBMOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH\fP \- 1)"

.PP
Definition at line 169 of file bn_lcl\&.h\&.
.SS "#define BN_window_bits_for_ctime_exponent_size(b)"
\fBValue:\fP
.PP
.nf
((b) > 937 ? 6 : \
                 (b) > 306 ? 5 : \
                 (b) >  89 ? 4 : \
                 (b) >  22 ? 3 : 1)
.fi
.PP
Definition at line 182 of file bn_lcl\&.h\&.
.SS "#define BN_MAX_WINDOW_BITS_FOR_CTIME_EXPONENT_SIZE   (6)"

.PP
Definition at line 187 of file bn_lcl\&.h\&.
.SS "#define BN_MULL_SIZE_NORMAL   (16)/* 32 */"

.PP
Definition at line 201 of file bn_lcl\&.h\&.
.SS "#define BN_MUL_RECURSIVE_SIZE_NORMAL   (16)/* 32 less than */"

.PP
Definition at line 202 of file bn_lcl\&.h\&.
.SS "#define BN_SQR_RECURSIVE_SIZE_NORMAL   (16)/* 32 */"

.PP
Definition at line 203 of file bn_lcl\&.h\&.
.SS "#define BN_MUL_LOW_RECURSIVE_SIZE_NORMAL   (32)/* 32 */"

.PP
Definition at line 204 of file bn_lcl\&.h\&.
.SS "#define BN_MONT_CTX_SET_SIZE_WORD   (64)/* 32 */"

.PP
Definition at line 205 of file bn_lcl\&.h\&.
.SS "#define PTR_SIZE_INT   size_t"

.PP
Definition at line 222 of file bn_lcl\&.h\&.
.SS "#define Lw(\fBt\fP)   (((BN_ULONG)(\fBt\fP))&BN_MASK2)"

.PP
Definition at line 331 of file bn_lcl\&.h\&.
.SS "#define Hw(\fBt\fP)   (((BN_ULONG)((\fBt\fP)>>BN_BITS2))&BN_MASK2)"

.PP
Definition at line 332 of file bn_lcl\&.h\&.
.SS "#define bn_clear_top2max(\fBa\fP)"

.PP
Definition at line 343 of file bn_lcl\&.h\&.
.SS "#define LBITS(\fBa\fP)   ((\fBa\fP)&BN_MASK2l)"

.PP
Definition at line 430 of file bn_lcl\&.h\&.
.SS "#define HBITS(\fBa\fP)   (((\fBa\fP)>>BN_BITS4)&BN_MASK2l)"

.PP
Definition at line 431 of file bn_lcl\&.h\&.
.SS "#define L2HBITS(\fBa\fP)   (((\fBa\fP)<<BN_BITS4)&BN_MASK2)"

.PP
Definition at line 432 of file bn_lcl\&.h\&.
.SS "#define LLBITS(\fBa\fP)   ((\fBa\fP)&BN_MASKl)"

.PP
Definition at line 434 of file bn_lcl\&.h\&.
.SS "#define LHBITS(\fBa\fP)   (((\fBa\fP)>>BN_BITS2)&BN_MASKl)"

.PP
Definition at line 435 of file bn_lcl\&.h\&.
.SS "#define LL2HBITS(\fBa\fP)   ((BN_ULLONG)((\fBa\fP)&BN_MASKl)<<BN_BITS2)"

.PP
Definition at line 436 of file bn_lcl\&.h\&.
.SS "#define mul64(l, h, bl, bh)"
\fBValue:\fP
.PP
.nf
{ \
        BN_ULONG m,m1,lt,ht; \
 \
        lt=l; \
        ht=h; \
        m =(bh)*(lt); \
        lt=(bl)*(lt); \
        m1=(bl)*(ht); \
        ht =(bh)*(ht); \
        m=(m+m1)&BN_MASK2; if (m < m1) ht+=L2HBITS((BN_ULONG)1); \
        ht+=HBITS(m); \
        m1=L2HBITS(m); \
        lt=(lt+m1)&BN_MASK2; if (lt < m1) ht++; \
        (l)=lt; \
        (h)=ht; \
        }
.fi
.PP
Definition at line 438 of file bn_lcl\&.h\&.
.SS "#define sqr64(lo, ho, in)"
\fBValue:\fP
.PP
.nf
{ \
        BN_ULONG l,h,m; \
 \
        h=(in); \
        l=LBITS(h); \
        h=HBITS(h); \
        m =(l)*(h); \
        l*=l; \
        h*=h; \
        h+=(m&BN_MASK2h1)>>(BN_BITS4-1); \
        m =(m&BN_MASK2l)<<(BN_BITS4+1); \
        l=(l+m)&BN_MASK2; if (l < m) h++; \
        (lo)=l; \
        (ho)=h; \
        }
.fi
.PP
Definition at line 456 of file bn_lcl\&.h\&.
.SS "#define mul_add(r, \fBa\fP, bl, bh, \fBc\fP)"
\fBValue:\fP
.PP
.nf
{ \
        BN_ULONG l,h; \
 \
        h= (a); \
        l=LBITS(h); \
        h=HBITS(h); \
        mul64(l,h,(bl),(bh)); \
 \
        /* non-multiply part */ \
        l=(l+(c))&BN_MASK2; if (l < (c)) h++; \
        (c)=(r); \
        l=(l+(c))&BN_MASK2; if (l < (c)) h++; \
        (c)=h&BN_MASK2; \
        (r)=l; \
        }
.fi
.PP
Definition at line 473 of file bn_lcl\&.h\&.
.SS "#define mul(r, \fBa\fP, bl, bh, \fBc\fP)"
\fBValue:\fP
.PP
.nf
{ \
        BN_ULONG l,h; \
 \
        h= (a); \
        l=LBITS(h); \
        h=HBITS(h); \
        mul64(l,h,(bl),(bh)); \
 \
        /* non-multiply part */ \
        l+=(c); if ((l&BN_MASK2) < (c)) h++; \
        (c)=h&BN_MASK2; \
        (r)=l&BN_MASK2; \
        }
.fi
.PP
Definition at line 489 of file bn_lcl\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP bn_mul_normal (BN_ULONG * r, BN_ULONG * a, int na, BN_ULONG * b, int nb)"

.SS "\fBvoid\fP bn_mul_comba8 (BN_ULONG * r, BN_ULONG * a, BN_ULONG * b)"

.SS "\fBvoid\fP bn_mul_comba4 (BN_ULONG * r, BN_ULONG * a, BN_ULONG * b)"

.SS "\fBvoid\fP bn_sqr_normal (BN_ULONG * r, const BN_ULONG * a, int n, BN_ULONG * tmp)"

.SS "\fBvoid\fP bn_sqr_comba8 (BN_ULONG * r, const BN_ULONG * a)"

.SS "\fBvoid\fP bn_sqr_comba4 (BN_ULONG * r, const BN_ULONG * a)"

.SS "int bn_cmp_words (const BN_ULONG * a, const BN_ULONG * b, int n)"

.SS "int bn_cmp_part_words (const BN_ULONG * a, const BN_ULONG * b, int cl, int dl)"

.SS "\fBvoid\fP bn_mul_recursive (BN_ULONG * r, BN_ULONG * a, BN_ULONG * b, int n2, int dna, int dnb, BN_ULONG * t)"

.SS "\fBvoid\fP bn_mul_part_recursive (BN_ULONG * r, BN_ULONG * a, BN_ULONG * b, int n, int tna, int tnb, BN_ULONG * t)"

.SS "\fBvoid\fP bn_sqr_recursive (BN_ULONG * r, const BN_ULONG * a, int n2, BN_ULONG * t)"

.SS "\fBvoid\fP bn_mul_low_normal (BN_ULONG * r, BN_ULONG * a, BN_ULONG * b, int n)"

.SS "\fBvoid\fP bn_mul_low_recursive (BN_ULONG * r, BN_ULONG * a, BN_ULONG * b, int n2, BN_ULONG * t)"

.SS "\fBvoid\fP bn_mul_high (BN_ULONG * r, BN_ULONG * a, BN_ULONG * b, BN_ULONG * l, int n2, BN_ULONG * t)"

.SS "BN_ULONG bn_add_part_words (BN_ULONG * r, const BN_ULONG * a, const BN_ULONG * b, int cl, int dl)"

.SS "BN_ULONG bn_sub_part_words (BN_ULONG * r, const BN_ULONG * a, const BN_ULONG * b, int cl, int dl)"

.SS "int bn_mul_mont (BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, const BN_ULONG * np, const BN_ULONG * n0, int num)"

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
