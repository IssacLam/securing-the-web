.TH "s2n-master/libcrypto-build/openssl/demos/ssl/cli.cpp" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/demos/ssl/cli.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <memory\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <netdb\&.h>\fP
.br
\fC#include <openssl/crypto\&.h>\fP
.br
\fC#include <openssl/x509\&.h>\fP
.br
\fC#include <openssl/pem\&.h>\fP
.br
\fC#include <openssl/ssl\&.h>\fP
.br
\fC#include <openssl/err\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCHK_NULL\fP(\fBx\fP)   if ((\fBx\fP)==NULL) exit (1)"
.br
.ti -1c
.RI "#define \fBCHK_ERR\fP(err,  s)   if ((err)==\-1) { perror(s); exit(1); }"
.br
.ti -1c
.RI "#define \fBCHK_SSL\fP(err)   if ((err)==\-1) { \fBERR_print_errors_fp\fP(stderr); exit(2); }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBmain\fP ()"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CHK_NULL(\fBx\fP)   if ((\fBx\fP)==NULL) exit (1)"

.PP
Definition at line 24 of file cli\&.cpp\&.
.SS "#define CHK_ERR(err, s)   if ((err)==\-1) { perror(s); exit(1); }"

.PP
Definition at line 25 of file cli\&.cpp\&.
.SS "#define CHK_SSL(err)   if ((err)==\-1) { \fBERR_print_errors_fp\fP(stderr); exit(2); }"

.PP
Definition at line 26 of file cli\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP main (\fBvoid\fP)"

.PP
Definition at line 28 of file cli\&.cpp\&.
.PP
.nf
29 {
30   int err;
31   int sd;
32   struct sockaddr_in sa;
33   SSL_CTX* ctx;
34   SSL*     ssl;
35   X509*    server_cert;
36   char*    str;
37   char     buf [4096];
38   SSL_METHOD *meth;
39 
40   SSLeay_add_ssl_algorithms();
41   meth = SSLv2_client_method();
42   SSL_load_error_strings();
43   ctx = SSL_CTX_new (meth);                        CHK_NULL(ctx);
44 
45   CHK_SSL(err);
46   
47   /* ----------------------------------------------- */
48   /* Create a socket and connect to server using normal socket calls\&. */
49   
50   sd = socket (AF_INET, SOCK_STREAM, 0);       CHK_ERR(sd, "socket");
51  
52   memset (&sa, '\0', sizeof(sa));
53   sa\&.sin_family      = AF_INET;
54   sa\&.sin_addr\&.s_addr = inet_addr ("127\&.0\&.0\&.1");   /* Server IP */
55   sa\&.sin_port        = htons     (1111);          /* Server Port number */
56   
57   err = connect(sd, (struct sockaddr*) &sa,
58         sizeof(sa));                   CHK_ERR(err, "connect");
59 
60   /* ----------------------------------------------- */
61   /* Now we have TCP conncetion\&. Start SSL negotiation\&. */
62   
63   ssl = SSL_new (ctx);                         CHK_NULL(ssl);    
64   SSL_set_fd (ssl, sd);
65   err = SSL_connect (ssl);                     CHK_SSL(err);
66     
67   /* Following two steps are optional and not required for
68      data exchange to be successful\&. */
69   
70   /* Get the cipher - opt */
71 
72   printf ("SSL connection using %s\n", SSL_get_cipher (ssl));
73   
74   /* Get server's certificate (note: beware of dynamic allocation) - opt */
75 
76   server_cert = SSL_get_peer_certificate (ssl);       CHK_NULL(server_cert);
77   printf ("Server certificate:\n");
78   
79   str = X509_NAME_oneline (X509_get_subject_name (server_cert),0,0);
80   CHK_NULL(str);
81   printf ("\t subject: %s\n", str);
82   OPENSSL_free (str);
83 
84   str = X509_NAME_oneline (X509_get_issuer_name  (server_cert),0,0);
85   CHK_NULL(str);
86   printf ("\t issuer: %s\n", str);
87   OPENSSL_free (str);
88 
89   /* We could do all sorts of certificate verification stuff here before
90      deallocating the certificate\&. */
91 
92   X509_free (server_cert);
93   
94   /* --------------------------------------------------- */
95   /* DATA EXCHANGE - Send a message and receive a reply\&. */
96 
97   err = SSL_write (ssl, "Hello World!", strlen("Hello World!"));  CHK_SSL(err);
98   
99   err = SSL_read (ssl, buf, sizeof(buf) - 1);                     CHK_SSL(err);
100   buf[err] = '\0';
101   printf ("Got %d chars:'%s'\n", err, buf);
102   SSL_shutdown (ssl);  /* send SSL/TLS close_notify */
103 
104   /* Clean up\&. */
105 
106   close (sd);
107   SSL_free (ssl);
108   SSL_CTX_free (ctx);
109 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
