.TH "md_s2n-master_tests_fuzz__readme" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_s2n-master_tests_fuzz__readme \- Readme 
#Fuzz Tests Every test in this directory will be run as a Fuzz test for several minutes during builds\&. To run all fuzz tests simply run \fCmake fuzz\fP from the top \fCs2n\fP directory to compile s2n with the proper flags and run the fuzz tests\&.
.PP
.SS "Each Fuzz Test should conform to the following rules:"
.PP
.IP "1." 4
End in either \fC*_test\&.c\fP or \fC*_negative_test\&.c\fP\&.
.IP "  1." 6
If the test ends with \fC*_test\&.c\fP, it is expected to pass fuzzing and return 0 (hereafter referred to as a 'Positive test')
.IP "  2." 6
If the test ends with \fC*_negative_test\&.c\fP the test is expected to fail in some way or return a non-zero integer (hereafter referred to as a 'Negative test')\&.
.PP

.IP "2." 4
Strive to be deterministic (Eg\&. shouldn't depend on the time or on the output of a RNG)\&. Each test should either always pass if a Positive Test, or always fail if a Negative Test\&.
.IP "3." 4
If a Positive Fuzz test, it should have a non-empty corpus directory with inputs that have a relatively high branch coverage\&.
.IP "4." 4
Have a function \fCint \fBLLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)\fP\fP that will pass \fCbuf\fP to one of s2n's API's
.IP "5." 4
Optionally, if initialization is required, have a function \fCint \fBLLVMFuzzerInitialize(const uint8_t *buf, size_t len)\fP\fP that will perform any initialization that will be run only once at startup\&.
.PP
.PP
.SS "Fuzz Test Directory Structure"
.PP
For a test with name \fC$TEST_NAME\fP, its files should be layed out with the following structure:
.PP
\fBRequired:\fP The actual Fuzz test to run: 
.PP
.RS 4
\fCs2n/tests/fuzz/${TEST_NAME}\&.c\fP 
.RE
.PP
.PP
\fBRequired:\fP The Corpus directory with inputs that provide good branch coverage: 
.PP
.RS 4
\fCs2n/tests/fuzz/corpus/${TEST_NAME}/*\fP 
.RE
.PP
.PP
\fBOptional:\fP Any \fCLD_PRELOAD\fP function overrides: 
.PP
.RS 4
\fCs2n/tests/fuzz/LD_PRELOAD/${TEST_NAME}_overrides\&.c\fP 
.RE
.PP
.PP
#Corpus A Corpus is a directory of 'interesting' inputs that result in a good branch/code coverage\&. These inputs will be permuted in random ways and checked to see if this permutation results in greater branch coverage or in a failure (Segfault, Memory Leak, Buffer Overflow, Non-zero return code, etc)\&. If the permutation results in greater branch coverage, then it will be added to the Corpus directory\&. If a Memory leak or a Crash is detected, that file will \fBnot\fP be added to the corpus for that test, and will instead be written to the current directory (\fCs2n/tests/fuzz/crash-*\fP or \fCs2n/tests/fuzz/leak-*\fP)\&. These files will be automatically deleted for any Negative Fuzz tests that are expected to crash or leak memory so as to not clutter the directory\&.
.PP
#LD_PRELOAD The \fCLD_PRELOAD\fP directory contains function overrides for each Fuzz test that will be used \fBinstead\fP of the original functions defined elsewhere\&. These function overrides will only be used during fuzz tests, and will not effect the rest of the s2n codebase when not fuzzing\&. Using \fCLD_PRELOAD\fP instead of C Preprocessor \fC#ifdef\fP's is preferable in the following ways:
.PP
.IP "1." 4
Using the C Preprocessor requires the use of fuzz only compiler flags and \fC#ifdef\fP's that end up cluttering the original s2n codebase and increases developer cognative load when developing other features for s2n\&. Using \fCLD_PRELOAD\fP helps keep s2n's code clean, and reduces developer cognative load when working with the core codebase\&.
.IP "2." 4
\fCLD_PRELOAD\fP provides better flexibility than \fC#ifdef\fP's in that it allows different Fuzz tests to efficiently have different function overrides for the same functions\&.
.IP "3." 4
It is possible to override functions that are outside of s2n's codebase\&.
.PP
.PP
Each Fuzz test will have up to two \fCLD_PRELOAD\fP function override files used:
.PP
.IP "1." 4
A test specific \fC${TEST_NAME}_overrides\&.c\fP file that contains overrides specific to that test\&.
.IP "2." 4
\fCglobal_overrides\&.c\fP file that contains overrides that will be used in every fuzz test\&. 
.PP

