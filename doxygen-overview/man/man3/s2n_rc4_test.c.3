.TH "s2n-master/tests/unit/s2n_rc4_test.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tests/unit/s2n_rc4_test.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 's2n_test\&.h'\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <s2n\&.h>\fP
.br
\fC#include 'testlib/s2n_testlib\&.h'\fP
.br
\fC#include 'tls/s2n_cipher_suites\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'crypto/s2n_cipher\&.h'\fP
.br
\fC#include 'utils/s2n_random\&.h'\fP
.br
\fC#include 'crypto/s2n_hmac\&.h'\fP
.br
\fC#include 'tls/s2n_record\&.h'\fP
.br
\fC#include 'tls/s2n_prf\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char ** argv)"

.PP
Definition at line 33 of file s2n_rc4_test\&.c\&.
.PP
.nf
34 {
35     struct s2n_connection *conn;
36     uint8_t mac_key[] = "sample mac key";
37     uint8_t rc4_key[] = "123456789012345";
38     struct s2n_blob key_iv = {\&.data = rc4_key,\&.size = sizeof(rc4_key) };
39     uint8_t random_data[S2N_SMALL_FRAGMENT_LENGTH + 1];
40     struct s2n_blob r = {\&.data = random_data, \&.size = sizeof(random_data)};
41 
42     BEGIN_TEST();
43 
44     EXPECT_NOT_NULL(conn = s2n_connection_new(S2N_SERVER));
45     EXPECT_SUCCESS(s2n_get_urandom_data(&r));
46 
47     /* Peer and we are in sync */
48     conn->server = &conn->secure;
49 
50     /* test the RC4 cipher with a SHA1 hash */
51     conn->secure\&.cipher_suite->cipher = &s2n_rc4;
52     conn->secure\&.cipher_suite->hmac_alg = S2N_HMAC_SHA1;
53     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->init(&conn->secure\&.server_key));
54     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->init(&conn->secure\&.client_key));
55     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->get_decryption_key(&conn->secure\&.client_key, &key_iv));
56     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->get_encryption_key(&conn->secure\&.server_key, &key_iv));
57     EXPECT_SUCCESS(s2n_hmac_init(&conn->secure\&.client_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
58     EXPECT_SUCCESS(s2n_hmac_init(&conn->secure\&.server_record_mac, S2N_HMAC_SHA1, mac_key, sizeof(mac_key)));
59     conn->actual_protocol_version = S2N_TLS11;
60 
61     for (int i = 0; i <= S2N_SMALL_FRAGMENT_LENGTH + 1; i++) {
62         struct s2n_blob in = {\&.data = random_data,\&.size = i };
63         int bytes_written;
64 
65         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->out));
66         EXPECT_SUCCESS(bytes_written = s2n_record_write(conn, TLS_APPLICATION_DATA, &in));
67 
68         if (i <= S2N_SMALL_FRAGMENT_LENGTH - 20) {
69             EXPECT_EQUAL(bytes_written, i);
70         } else {
71             EXPECT_EQUAL(bytes_written, S2N_SMALL_FRAGMENT_LENGTH - 20);
72         }
73 
74         uint16_t predicted_length = bytes_written + 20;
75         EXPECT_EQUAL(conn->out\&.blob\&.data[0], TLS_APPLICATION_DATA);
76         EXPECT_EQUAL(conn->out\&.blob\&.data[1], 3);
77         EXPECT_EQUAL(conn->out\&.blob\&.data[2], 2);
78         EXPECT_EQUAL(conn->out\&.blob\&.data[3], (predicted_length >> 8) & 0xff);
79         EXPECT_EQUAL(conn->out\&.blob\&.data[4], predicted_length & 0xff);
80 
81         /* The data should be encrypted */
82         if (bytes_written > 10) {
83             EXPECT_NOT_EQUAL(memcmp(conn->out\&.blob\&.data + 5, random_data, bytes_written), 0);
84         }
85 
86         /* Copy the encrypted out data to the in data */
87         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
88         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->header_in));
89         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->header_in, 5))
90         EXPECT_SUCCESS(s2n_stuffer_copy(&conn->out, &conn->in, s2n_stuffer_data_available(&conn->out)))
91 
92         /* Check that the data looks right */
93         EXPECT_EQUAL(bytes_written + 20, s2n_stuffer_data_available(&conn->in));
94 
95         /* Let's decrypt it */
96         uint8_t content_type;
97         uint16_t fragment_length;
98         EXPECT_SUCCESS(s2n_record_header_parse(conn, &content_type, &fragment_length));
99         EXPECT_SUCCESS(s2n_record_parse(conn));
100         EXPECT_EQUAL(content_type, TLS_APPLICATION_DATA);
101         EXPECT_EQUAL(fragment_length, predicted_length);
102 
103         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->header_in));
104         EXPECT_SUCCESS(s2n_stuffer_wipe(&conn->in));
105     }
106 
107     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->destroy_key(&conn->secure\&.server_key));
108     EXPECT_SUCCESS(conn->secure\&.cipher_suite->cipher->destroy_key(&conn->secure\&.client_key));
109     EXPECT_SUCCESS(s2n_connection_free(conn));
110 
111     END_TEST();
112 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
