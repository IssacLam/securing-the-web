.TH "s2n-master/tls/s2n_server_hello.c" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/tls/s2n_server_hello.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/param\&.h>\fP
.br
\fC#include <s2n\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include 'error/s2n_errno\&.h'\fP
.br
\fC#include 'tls/s2n_cipher_suites\&.h'\fP
.br
\fC#include 'tls/s2n_connection\&.h'\fP
.br
\fC#include 'tls/s2n_alerts\&.h'\fP
.br
\fC#include 'tls/s2n_tls\&.h'\fP
.br
\fC#include 'stuffer/s2n_stuffer\&.h'\fP
.br
\fC#include 'utils/s2n_safety\&.h'\fP
.br
\fC#include 'utils/s2n_random\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBS2N_TLS_COMPRESSION_METHOD_NULL\fP   0"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBs2n_server_hello_recv\fP (struct \fBs2n_connection\fP *conn)"
.br
.ti -1c
.RI "int \fBs2n_server_hello_send\fP (struct \fBs2n_connection\fP *conn)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define S2N_TLS_COMPRESSION_METHOD_NULL   0"

.PP
Definition at line 34 of file s2n_server_hello\&.c\&.
.SH "Function Documentation"
.PP 
.SS "int s2n_server_hello_recv (struct \fBs2n_connection\fP * conn)"

.PP
Definition at line 36 of file s2n_server_hello\&.c\&.
.PP
.nf
37 {
38     struct s2n_stuffer *in = &conn->handshake\&.io;
39     uint8_t compression_method;
40     uint8_t session_id[S2N_TLS_SESSION_ID_MAX_LEN];
41     uint8_t session_id_len;
42     uint16_t extensions_size;
43     uint8_t protocol_version[S2N_TLS_PROTOCOL_VERSION_LEN];
44 
45     GUARD(s2n_stuffer_read_bytes(in, protocol_version, S2N_TLS_PROTOCOL_VERSION_LEN));
46 
47     conn->server_protocol_version = (protocol_version[0] * 10) + protocol_version[1];
48 
49     if (conn->server_protocol_version > conn->actual_protocol_version) {
50         GUARD(s2n_queue_reader_unsupported_protocol_version_alert(conn));
51         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
52     }
53     conn->actual_protocol_version = conn->server_protocol_version;
54     conn->actual_protocol_version_established = 1;
55 
56     /* Verify that the protocol version is sane */
57     if (conn->actual_protocol_version < S2N_SSLv3 || conn->actual_protocol_version > S2N_TLS12) {
58         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
59     }
60 
61     conn->secure\&.signature_digest_alg = S2N_HASH_MD5_SHA1;
62     if (conn->actual_protocol_version == S2N_TLS12) {
63         conn->secure\&.signature_digest_alg = S2N_HASH_SHA1;
64     }
65 
66     GUARD(s2n_stuffer_read_bytes(in, conn->secure\&.server_random, S2N_TLS_RANDOM_DATA_LEN));
67     GUARD(s2n_stuffer_read_uint8(in, &session_id_len));
68 
69     if (session_id_len > S2N_TLS_SESSION_ID_MAX_LEN) {
70         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
71     }
72 
73     conn->session_id_len = session_id_len;
74     GUARD(s2n_stuffer_read_bytes(in, session_id, session_id_len));
75     uint8_t *cipher_suite_wire = s2n_stuffer_raw_read(in, S2N_TLS_CIPHER_SUITE_LEN);
76     notnull_check(cipher_suite_wire);
77     GUARD(s2n_set_cipher_as_client(conn, cipher_suite_wire));
78     GUARD(s2n_stuffer_read_uint8(in, &compression_method));
79 
80     if (compression_method != S2N_TLS_COMPRESSION_METHOD_NULL) {
81         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
82     }
83 
84     GUARD(s2n_conn_set_handshake_type(conn));
85 
86     if (conn->handshake\&.handshake_type == RESUME) {
87         GUARD(s2n_prf_key_expansion(conn));
88     }
89 
90     if (s2n_stuffer_data_available(in) < 2) {
91         /* No extensions */
92         return 0;
93     }
94 
95     GUARD(s2n_stuffer_read_uint16(in, &extensions_size));
96 
97     if (extensions_size > s2n_stuffer_data_available(in)) {
98         S2N_ERROR(S2N_ERR_BAD_MESSAGE);
99     }
100 
101     struct s2n_blob extensions;
102     extensions\&.size = extensions_size;
103     extensions\&.data = s2n_stuffer_raw_read(in, extensions\&.size);
104     notnull_check(extensions\&.data);
105 
106     GUARD(s2n_server_extensions_recv(conn, &extensions));
107 
108     return 0;
109 }
.fi
.SS "int s2n_server_hello_send (struct \fBs2n_connection\fP * conn)"

.PP
Definition at line 111 of file s2n_server_hello\&.c\&.
.PP
.nf
112 {
113     uint32_t gmt_unix_time = time(NULL);
114     struct s2n_stuffer *out = &conn->handshake\&.io;
115     struct s2n_stuffer server_random;
116     struct s2n_blob b, r;
117     uint8_t protocol_version[S2N_TLS_PROTOCOL_VERSION_LEN];
118 
119     b\&.data = conn->secure\&.server_random;
120     b\&.size = S2N_TLS_RANDOM_DATA_LEN;
121 
122     /* Create the server random data */
123     GUARD(s2n_stuffer_init(&server_random, &b));
124     GUARD(s2n_stuffer_write_uint32(&server_random, gmt_unix_time));
125 
126     r\&.data = s2n_stuffer_raw_write(&server_random, S2N_TLS_RANDOM_DATA_LEN - 4);
127     r\&.size = S2N_TLS_RANDOM_DATA_LEN - 4;
128     notnull_check(r\&.data);
129     GUARD(s2n_get_public_random_data(&r));
130 
131     protocol_version[0] = conn->actual_protocol_version / 10;
132     protocol_version[1] = conn->actual_protocol_version % 10;
133 
134     conn->secure\&.signature_digest_alg = S2N_HASH_MD5_SHA1;
135     if (conn->actual_protocol_version == S2N_TLS12) {
136         conn->secure\&.signature_digest_alg = S2N_HASH_SHA1;
137     }
138 
139     GUARD(s2n_stuffer_write_bytes(out, protocol_version, S2N_TLS_PROTOCOL_VERSION_LEN));
140     GUARD(s2n_stuffer_write_bytes(out, conn->secure\&.server_random, S2N_TLS_RANDOM_DATA_LEN));
141     GUARD(s2n_stuffer_write_uint8(out, conn->session_id_len));
142     GUARD(s2n_stuffer_write_bytes(out, conn->session_id, conn->session_id_len));
143     GUARD(s2n_stuffer_write_bytes(out, conn->secure\&.cipher_suite->value, S2N_TLS_CIPHER_SUITE_LEN));
144     GUARD(s2n_stuffer_write_uint8(out, S2N_TLS_COMPRESSION_METHOD_NULL));
145 
146     GUARD(s2n_server_extensions_send(conn, out));
147 
148     conn->actual_protocol_version_established = 1;
149 
150     return 0;
151 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
