.TH "s2n-master/libcrypto-build/openssl/include/openssl/x509_vfy.h" 3 "Fri Aug 19 2016" "s2n-doxygen-full" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n-master/libcrypto-build/openssl/include/openssl/x509_vfy.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/x509\&.h>\fP
.br
\fC#include <openssl/opensslconf\&.h>\fP
.br
\fC#include <openssl/lhash\&.h>\fP
.br
\fC#include <openssl/bio\&.h>\fP
.br
\fC#include <openssl/crypto\&.h>\fP
.br
\fC#include <openssl/symhacks\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBx509_file_st\fP"
.br
.ti -1c
.RI "struct \fBx509_object_st\fP"
.br
.ti -1c
.RI "struct \fBx509_lookup_method_st\fP"
.br
.ti -1c
.RI "struct \fBX509_VERIFY_PARAM_st\fP"
.br
.ti -1c
.RI "struct \fBx509_store_st\fP"
.br
.ti -1c
.RI "struct \fBx509_lookup_st\fP"
.br
.ti -1c
.RI "struct \fBx509_store_ctx_st\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBX509_LU_RETRY\fP   \-1"
.br
.ti -1c
.RI "#define \fBX509_LU_FAIL\fP   0"
.br
.ti -1c
.RI "#define \fBX509_LU_X509\fP   1"
.br
.ti -1c
.RI "#define \fBX509_LU_CRL\fP   2"
.br
.ti -1c
.RI "#define \fBX509_LU_PKEY\fP   3"
.br
.ti -1c
.RI "#define \fBX509_STORE_set_verify_cb_func\fP(ctx,  func)   ((ctx)\->verify_cb=(func))"
.br
.ti -1c
.RI "#define \fBX509_STORE_set_verify_func\fP(ctx,  func)       ((ctx)\->verify=(func))"
.br
.ti -1c
.RI "#define \fBX509_STORE_CTX_set_app_data\fP(ctx,  data)   \fBX509_STORE_CTX_set_ex_data\fP(ctx,0,data)"
.br
.ti -1c
.RI "#define \fBX509_STORE_CTX_get_app_data\fP(ctx)   \fBX509_STORE_CTX_get_ex_data\fP(ctx,0)"
.br
.ti -1c
.RI "#define \fBX509_L_FILE_LOAD\fP   1"
.br
.ti -1c
.RI "#define \fBX509_L_ADD_DIR\fP   2"
.br
.ti -1c
.RI "#define \fBX509_LOOKUP_load_file\fP(\fBx\fP,  name,  \fBtype\fP)   \fBX509_LOOKUP_ctrl\fP((\fBx\fP),\fBX509_L_FILE_LOAD\fP,(name),(long)(\fBtype\fP),NULL)"
.br
.ti -1c
.RI "#define \fBX509_LOOKUP_add_dir\fP(\fBx\fP,  name,  \fBtype\fP)   \fBX509_LOOKUP_ctrl\fP((\fBx\fP),\fBX509_L_ADD_DIR\fP,(name),(long)(\fBtype\fP),NULL)"
.br
.ti -1c
.RI "#define \fBX509_V_OK\fP   0"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNSPECIFIED\fP   1"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_GET_ISSUER_CERT\fP   2"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_GET_CRL\fP   3"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE\fP   4"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE\fP   5"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY\fP   6"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CERT_SIGNATURE_FAILURE\fP   7"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CRL_SIGNATURE_FAILURE\fP   8"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CERT_NOT_YET_VALID\fP   9"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CERT_HAS_EXPIRED\fP   10"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CRL_NOT_YET_VALID\fP   11"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CRL_HAS_EXPIRED\fP   12"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD\fP   13"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD\fP   14"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD\fP   15"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD\fP   16"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_OUT_OF_MEM\fP   17"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT\fP   18"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN\fP   19"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY\fP   20"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE\fP   21"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CERT_CHAIN_TOO_LONG\fP   22"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CERT_REVOKED\fP   23"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_INVALID_CA\fP   24"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_PATH_LENGTH_EXCEEDED\fP   25"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_INVALID_PURPOSE\fP   26"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CERT_UNTRUSTED\fP   27"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CERT_REJECTED\fP   28"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUBJECT_ISSUER_MISMATCH\fP   29"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_AKID_SKID_MISMATCH\fP   30"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH\fP   31"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_KEYUSAGE_NO_CERTSIGN\fP   32"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNABLE_TO_GET_CRL_ISSUER\fP   33"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNHANDLED_CRITICAL_EXTENSION\fP   34"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_KEYUSAGE_NO_CRL_SIGN\fP   35"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION\fP   36"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_INVALID_NON_CA\fP   37"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED\fP   38"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE\fP   39"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED\fP   40"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_INVALID_EXTENSION\fP   41"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_INVALID_POLICY_EXTENSION\fP   42"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_NO_EXPLICIT_POLICY\fP   43"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_DIFFERENT_CRL_SCOPE\fP   44"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE\fP   45"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNNESTED_RESOURCE\fP   46"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_PERMITTED_VIOLATION\fP   47"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_EXCLUDED_VIOLATION\fP   48"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUBTREE_MINMAX\fP   49"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_APPLICATION_VERIFICATION\fP   50"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE\fP   51"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX\fP   52"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_UNSUPPORTED_NAME_SYNTAX\fP   53"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_CRL_PATH_VALIDATION_ERROR\fP   54"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUITE_B_INVALID_VERSION\fP   56"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUITE_B_INVALID_ALGORITHM\fP   57"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUITE_B_INVALID_CURVE\fP   58"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM\fP   59"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUITE_B_LOS_NOT_ALLOWED\fP   60"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256\fP   61"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_HOSTNAME_MISMATCH\fP   62"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_EMAIL_MISMATCH\fP   63"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_IP_ADDRESS_MISMATCH\fP   64"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_INVALID_CALL\fP   65"
.br
.ti -1c
.RI "#define \fBX509_V_ERR_STORE_LOOKUP\fP   66"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_CB_ISSUER_CHECK\fP   0x1"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_USE_CHECK_TIME\fP   0x2"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_CRL_CHECK\fP   0x4"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_CRL_CHECK_ALL\fP   0x8"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_IGNORE_CRITICAL\fP   0x10"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_X509_STRICT\fP   0x20"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_ALLOW_PROXY_CERTS\fP   0x40"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_POLICY_CHECK\fP   0x80"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_EXPLICIT_POLICY\fP   0x100"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_INHIBIT_ANY\fP   0x200"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_INHIBIT_MAP\fP   0x400"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_NOTIFY_POLICY\fP   0x800"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_EXTENDED_CRL_SUPPORT\fP   0x1000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_USE_DELTAS\fP   0x2000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_CHECK_SS_SIGNATURE\fP   0x4000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_TRUSTED_FIRST\fP   0x8000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_SUITEB_128_LOS_ONLY\fP   0x10000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_SUITEB_192_LOS\fP   0x20000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_SUITEB_128_LOS\fP   0x30000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_PARTIAL_CHAIN\fP   0x80000"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_NO_ALT_CHAINS\fP   0x100000"
.br
.ti -1c
.RI "#define \fBX509_VP_FLAG_DEFAULT\fP   0x1"
.br
.ti -1c
.RI "#define \fBX509_VP_FLAG_OVERWRITE\fP   0x2"
.br
.ti -1c
.RI "#define \fBX509_VP_FLAG_RESET_FLAGS\fP   0x4"
.br
.ti -1c
.RI "#define \fBX509_VP_FLAG_LOCKED\fP   0x8"
.br
.ti -1c
.RI "#define \fBX509_VP_FLAG_ONCE\fP   0x10"
.br
.ti -1c
.RI "#define \fBX509_V_FLAG_POLICY_MASK\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBx509_file_st\fP \fBX509_CERT_FILE_CTX\fP"
.br
.ti -1c
.RI "typedef struct \fBx509_object_st\fP \fBX509_OBJECT\fP"
.br
.ti -1c
.RI "typedef struct \fBx509_lookup_st\fP \fBX509_LOOKUP\fP"
.br
.ti -1c
.RI "typedef struct \fBx509_lookup_method_st\fP \fBX509_LOOKUP_METHOD\fP"
.br
.ti -1c
.RI "typedef struct \fBX509_VERIFY_PARAM_ID_st\fP \fBX509_VERIFY_PARAM_ID\fP"
.br
.ti -1c
.RI "typedef struct \fBX509_VERIFY_PARAM_st\fP \fBX509_VERIFY_PARAM\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBX509_STORE_set_depth\fP (\fBX509_STORE\fP *store, int depth)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set_depth\fP (\fBX509_STORE_CTX\fP *ctx, int depth)"
.br
.ti -1c
.RI "int \fBX509_OBJECT_idx_by_subject\fP (\fBSTACK_OF\fP(\fBX509_OBJECT\fP)*h, int \fBtype\fP, \fBX509_NAME\fP *name)"
.br
.ti -1c
.RI "\fBX509_OBJECT\fP * \fBX509_OBJECT_retrieve_by_subject\fP (\fBSTACK_OF\fP(\fBX509_OBJECT\fP)*h, int \fBtype\fP, \fBX509_NAME\fP *name)"
.br
.ti -1c
.RI "\fBX509_OBJECT\fP * \fBX509_OBJECT_retrieve_match\fP (\fBSTACK_OF\fP(\fBX509_OBJECT\fP)*h, \fBX509_OBJECT\fP *\fBx\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_OBJECT_up_ref_count\fP (\fBX509_OBJECT\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_OBJECT_free_contents\fP (\fBX509_OBJECT\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBX509_STORE\fP * \fBX509_STORE_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_free\fP (\fBX509_STORE\fP *v)"
.br
.ti -1c
.RI "\fBSTACK_OF\fP (\fBX509\fP)*X509_STORE_get1_certs(\fBX509_STORE_CTX\fP *st"
.br
.ti -1c
.RI "\fBSTACK_OF\fP (\fBX509_CRL\fP)*X509_STORE_get1_crls(\fBX509_STORE_CTX\fP *st"
.br
.ti -1c
.RI "int \fBX509_STORE_set_flags\fP (\fBX509_STORE\fP *ctx, unsigned long \fBflags\fP)"
.br
.ti -1c
.RI "int \fBX509_STORE_set_purpose\fP (\fBX509_STORE\fP *ctx, int purpose)"
.br
.ti -1c
.RI "int \fBX509_STORE_set_trust\fP (\fBX509_STORE\fP *ctx, int trust)"
.br
.ti -1c
.RI "int \fBX509_STORE_set1_param\fP (\fBX509_STORE\fP *ctx, \fBX509_VERIFY_PARAM\fP *pm)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_set_verify_cb\fP (\fBX509_STORE\fP *ctx, int(*verify_cb)(int, \fBX509_STORE_CTX\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_set_lookup_crls_cb\fP (\fBX509_STORE\fP *ctx, \fBSTACK_OF\fP(\fBX509_CRL\fP)*(*\fBcb\fP)(\fBX509_STORE_CTX\fP                                                                                                                                                                                                                                               *ctx,                                                                                                                                                                                                                                               \fBX509_NAME\fP *\fBnm\fP))"
.br
.ti -1c
.RI "\fBX509_STORE_CTX\fP * \fBX509_STORE_CTX_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_get1_issuer\fP (\fBX509\fP **issuer, \fBX509_STORE_CTX\fP *ctx, \fBX509\fP *\fBx\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_free\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_init\fP (\fBX509_STORE_CTX\fP *ctx, \fBX509_STORE\fP *store, \fBX509\fP *x509, \fBSTACK_OF\fP(\fBX509\fP)*chain)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_trusted_stack\fP (\fBX509_STORE_CTX\fP *ctx, \fBSTACK_OF\fP(\fBX509\fP)*sk)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_cleanup\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBX509_STORE\fP * \fBX509_STORE_CTX_get0_store\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBX509_LOOKUP\fP * \fBX509_STORE_add_lookup\fP (\fBX509_STORE\fP *v, \fBX509_LOOKUP_METHOD\fP *m)"
.br
.ti -1c
.RI "\fBX509_LOOKUP_METHOD\fP * \fBX509_LOOKUP_hash_dir\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBX509_LOOKUP_METHOD\fP * \fBX509_LOOKUP_file\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBX509_STORE_add_cert\fP (\fBX509_STORE\fP *ctx, \fBX509\fP *\fBx\fP)"
.br
.ti -1c
.RI "int \fBX509_STORE_add_crl\fP (\fBX509_STORE\fP *ctx, \fBX509_CRL\fP *\fBx\fP)"
.br
.ti -1c
.RI "int \fBX509_STORE_get_by_subject\fP (\fBX509_STORE_CTX\fP *vs, int \fBtype\fP, \fBX509_NAME\fP *name, \fBX509_OBJECT\fP *ret)"
.br
.ti -1c
.RI "int \fBX509_LOOKUP_ctrl\fP (\fBX509_LOOKUP\fP *ctx, int cmd, const char *argc, long argl, char **ret)"
.br
.ti -1c
.RI "int \fBX509_load_cert_file\fP (\fBX509_LOOKUP\fP *ctx, const char *\fBfile\fP, int \fBtype\fP)"
.br
.ti -1c
.RI "int \fBX509_load_crl_file\fP (\fBX509_LOOKUP\fP *ctx, const char *\fBfile\fP, int \fBtype\fP)"
.br
.ti -1c
.RI "int \fBX509_load_cert_crl_file\fP (\fBX509_LOOKUP\fP *ctx, const char *\fBfile\fP, int \fBtype\fP)"
.br
.ti -1c
.RI "\fBX509_LOOKUP\fP * \fBX509_LOOKUP_new\fP (\fBX509_LOOKUP_METHOD\fP *method)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_LOOKUP_free\fP (\fBX509_LOOKUP\fP *ctx)"
.br
.ti -1c
.RI "int \fBX509_LOOKUP_init\fP (\fBX509_LOOKUP\fP *ctx)"
.br
.ti -1c
.RI "int \fBX509_LOOKUP_by_subject\fP (\fBX509_LOOKUP\fP *ctx, int \fBtype\fP, \fBX509_NAME\fP *name, \fBX509_OBJECT\fP *ret)"
.br
.ti -1c
.RI "int \fBX509_LOOKUP_by_issuer_serial\fP (\fBX509_LOOKUP\fP *ctx, int \fBtype\fP, \fBX509_NAME\fP *name, \fBASN1_INTEGER\fP *serial, \fBX509_OBJECT\fP *ret)"
.br
.ti -1c
.RI "int \fBX509_LOOKUP_by_fingerprint\fP (\fBX509_LOOKUP\fP *ctx, int \fBtype\fP, unsigned char *\fBbytes\fP, int \fBlen\fP, \fBX509_OBJECT\fP *ret)"
.br
.ti -1c
.RI "int \fBX509_LOOKUP_by_alias\fP (\fBX509_LOOKUP\fP *ctx, int \fBtype\fP, char *str, int \fBlen\fP, \fBX509_OBJECT\fP *ret)"
.br
.ti -1c
.RI "int \fBX509_LOOKUP_shutdown\fP (\fBX509_LOOKUP\fP *ctx)"
.br
.ti -1c
.RI "int \fBX509_STORE_load_locations\fP (\fBX509_STORE\fP *ctx, const char *\fBfile\fP, const char *dir)"
.br
.ti -1c
.RI "int \fBX509_STORE_set_default_paths\fP (\fBX509_STORE\fP *ctx)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_get_ex_new_index\fP (long argl, \fBvoid\fP *argp, \fBCRYPTO_EX_new\fP *new_func, \fBCRYPTO_EX_dup\fP *dup_func, \fBCRYPTO_EX_free\fP *\fBfree_func\fP)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_set_ex_data\fP (\fBX509_STORE_CTX\fP *ctx, int idx, \fBvoid\fP *data)"
.br
.ti -1c
.RI "\fBvoid\fP * \fBX509_STORE_CTX_get_ex_data\fP (\fBX509_STORE_CTX\fP *ctx, int idx)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_get_error\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set_error\fP (\fBX509_STORE_CTX\fP *ctx, int s)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_get_error_depth\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBX509\fP * \fBX509_STORE_CTX_get_current_cert\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBX509\fP * \fBX509_STORE_CTX_get0_current_issuer\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBX509_CRL\fP * \fBX509_STORE_CTX_get0_current_crl\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBX509_STORE_CTX\fP * \fBX509_STORE_CTX_get0_parent_ctx\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set_cert\fP (\fBX509_STORE_CTX\fP *\fBc\fP, \fBX509\fP *\fBx\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set_chain\fP (\fBX509_STORE_CTX\fP *\fBc\fP, \fBSTACK_OF\fP(\fBX509\fP)*sk)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set0_crls\fP (\fBX509_STORE_CTX\fP *\fBc\fP, \fBSTACK_OF\fP(\fBX509_CRL\fP)*sk)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_set_purpose\fP (\fBX509_STORE_CTX\fP *ctx, int purpose)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_set_trust\fP (\fBX509_STORE_CTX\fP *ctx, int trust)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_purpose_inherit\fP (\fBX509_STORE_CTX\fP *ctx, int def_purpose, int purpose, int trust)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set_flags\fP (\fBX509_STORE_CTX\fP *ctx, unsigned long \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set_time\fP (\fBX509_STORE_CTX\fP *ctx, unsigned long \fBflags\fP, time_t \fBt\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set_verify_cb\fP (\fBX509_STORE_CTX\fP *ctx, int(*verify_cb)(int, \fBX509_STORE_CTX\fP *))"
.br
.ti -1c
.RI "\fBX509_POLICY_TREE\fP * \fBX509_STORE_CTX_get0_policy_tree\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_get_explicit_policy\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBX509_VERIFY_PARAM\fP * \fBX509_STORE_CTX_get0_param\fP (\fBX509_STORE_CTX\fP *ctx)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_STORE_CTX_set0_param\fP (\fBX509_STORE_CTX\fP *ctx, \fBX509_VERIFY_PARAM\fP *param)"
.br
.ti -1c
.RI "int \fBX509_STORE_CTX_set_default\fP (\fBX509_STORE_CTX\fP *ctx, const char *name)"
.br
.ti -1c
.RI "\fBX509_VERIFY_PARAM\fP * \fBX509_VERIFY_PARAM_new\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_VERIFY_PARAM_free\fP (\fBX509_VERIFY_PARAM\fP *param)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_inherit\fP (\fBX509_VERIFY_PARAM\fP *to, const \fBX509_VERIFY_PARAM\fP *from)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set1\fP (\fBX509_VERIFY_PARAM\fP *to, const \fBX509_VERIFY_PARAM\fP *from)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set1_name\fP (\fBX509_VERIFY_PARAM\fP *param, const char *name)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set_flags\fP (\fBX509_VERIFY_PARAM\fP *param, unsigned long \fBflags\fP)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_clear_flags\fP (\fBX509_VERIFY_PARAM\fP *param, unsigned long \fBflags\fP)"
.br
.ti -1c
.RI "unsigned long \fBX509_VERIFY_PARAM_get_flags\fP (\fBX509_VERIFY_PARAM\fP *param)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set_purpose\fP (\fBX509_VERIFY_PARAM\fP *param, int purpose)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set_trust\fP (\fBX509_VERIFY_PARAM\fP *param, int trust)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_VERIFY_PARAM_set_depth\fP (\fBX509_VERIFY_PARAM\fP *param, int depth)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_VERIFY_PARAM_set_time\fP (\fBX509_VERIFY_PARAM\fP *param, time_t \fBt\fP)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_add0_policy\fP (\fBX509_VERIFY_PARAM\fP *param, \fBASN1_OBJECT\fP *policy)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set1_policies\fP (\fBX509_VERIFY_PARAM\fP *param, \fBSTACK_OF\fP(\fBASN1_OBJECT\fP)*policies)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set1_host\fP (\fBX509_VERIFY_PARAM\fP *param, const char *name, size_t namelen)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_add1_host\fP (\fBX509_VERIFY_PARAM\fP *param, const char *name, size_t namelen)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_VERIFY_PARAM_set_hostflags\fP (\fBX509_VERIFY_PARAM\fP *param, unsigned int \fBflags\fP)"
.br
.ti -1c
.RI "char * \fBX509_VERIFY_PARAM_get0_peername\fP (\fBX509_VERIFY_PARAM\fP *)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set1_email\fP (\fBX509_VERIFY_PARAM\fP *param, const char *email, size_t emaillen)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set1_ip\fP (\fBX509_VERIFY_PARAM\fP *param, const unsigned char *ip, size_t iplen)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_set1_ip_asc\fP (\fBX509_VERIFY_PARAM\fP *param, const char *ipasc)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_get_depth\fP (const \fBX509_VERIFY_PARAM\fP *param)"
.br
.ti -1c
.RI "const char * \fBX509_VERIFY_PARAM_get0_name\fP (const \fBX509_VERIFY_PARAM\fP *param)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_add0_table\fP (\fBX509_VERIFY_PARAM\fP *param)"
.br
.ti -1c
.RI "int \fBX509_VERIFY_PARAM_get_count\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "const \fBX509_VERIFY_PARAM\fP * \fBX509_VERIFY_PARAM_get0\fP (int id)"
.br
.ti -1c
.RI "const \fBX509_VERIFY_PARAM\fP * \fBX509_VERIFY_PARAM_lookup\fP (const char *name)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_VERIFY_PARAM_table_cleanup\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "int \fBX509_policy_check\fP (\fBX509_POLICY_TREE\fP **ptree, int *pexplicit_policy, \fBSTACK_OF\fP(\fBX509\fP)*certs, \fBSTACK_OF\fP(\fBASN1_OBJECT\fP)*policy_oids, unsigned int \fBflags\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBX509_policy_tree_free\fP (\fBX509_POLICY_TREE\fP *tree)"
.br
.ti -1c
.RI "int \fBX509_policy_tree_level_count\fP (const \fBX509_POLICY_TREE\fP *tree)"
.br
.ti -1c
.RI "\fBX509_POLICY_LEVEL\fP * \fBX509_policy_tree_get0_level\fP (const \fBX509_POLICY_TREE\fP *tree, int i)"
.br
.ti -1c
.RI "\fBSTACK_OF\fP (\fBX509_POLICY_NODE\fP)*X509_policy_tree_get0_policies(const \fBX509_POLICY_TREE\fP *tree)"
.br
.ti -1c
.RI "int \fBX509_policy_level_node_count\fP (\fBX509_POLICY_LEVEL\fP *level)"
.br
.ti -1c
.RI "\fBX509_POLICY_NODE\fP * \fBX509_policy_level_get0_node\fP (\fBX509_POLICY_LEVEL\fP *level, int i)"
.br
.ti -1c
.RI "const \fBASN1_OBJECT\fP * \fBX509_policy_node_get0_policy\fP (const \fBX509_POLICY_NODE\fP *node)"
.br
.ti -1c
.RI "\fBSTACK_OF\fP (\fBPOLICYQUALINFO\fP)*X509_policy_node_get0_qualifiers(const \fBX509_POLICY_NODE\fP *node)"
.br
.ti -1c
.RI "const \fBX509_POLICY_NODE\fP * \fBX509_policy_node_get0_parent\fP (const \fBX509_POLICY_NODE\fP *node)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBX509_NAME\fP * \fBnm\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define X509_LU_RETRY   \-1"

.PP
Definition at line 117 of file x509_vfy\&.h\&.
.SS "#define X509_LU_FAIL   0"

.PP
Definition at line 118 of file x509_vfy\&.h\&.
.SS "#define X509_LU_X509   1"

.PP
Definition at line 119 of file x509_vfy\&.h\&.
.SS "#define X509_LU_CRL   2"

.PP
Definition at line 120 of file x509_vfy\&.h\&.
.SS "#define X509_LU_PKEY   3"

.PP
Definition at line 121 of file x509_vfy\&.h\&.
.SS "#define X509_STORE_set_verify_cb_func(ctx, func)   ((ctx)\->verify_cb=(func))"

.PP
Definition at line 219 of file x509_vfy\&.h\&.
.SS "#define X509_STORE_set_verify_func(ctx, func)   ((ctx)\->verify=(func))"

.PP
Definition at line 220 of file x509_vfy\&.h\&.
.SS "#define X509_STORE_CTX_set_app_data(ctx, data)   \fBX509_STORE_CTX_set_ex_data\fP(ctx,0,data)"

.PP
Definition at line 301 of file x509_vfy\&.h\&.
.SS "#define X509_STORE_CTX_get_app_data(ctx)   \fBX509_STORE_CTX_get_ex_data\fP(ctx,0)"

.PP
Definition at line 303 of file x509_vfy\&.h\&.
.SS "#define X509_L_FILE_LOAD   1"

.PP
Definition at line 306 of file x509_vfy\&.h\&.
.SS "#define X509_L_ADD_DIR   2"

.PP
Definition at line 307 of file x509_vfy\&.h\&.
.SS "#define X509_LOOKUP_load_file(\fBx\fP, name, \fBtype\fP)   \fBX509_LOOKUP_ctrl\fP((\fBx\fP),\fBX509_L_FILE_LOAD\fP,(name),(long)(\fBtype\fP),NULL)"

.PP
Definition at line 309 of file x509_vfy\&.h\&.
.SS "#define X509_LOOKUP_add_dir(\fBx\fP, name, \fBtype\fP)   \fBX509_LOOKUP_ctrl\fP((\fBx\fP),\fBX509_L_ADD_DIR\fP,(name),(long)(\fBtype\fP),NULL)"

.PP
Definition at line 312 of file x509_vfy\&.h\&.
.SS "#define X509_V_OK   0"

.PP
Definition at line 315 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNSPECIFIED   1"

.PP
Definition at line 316 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT   2"

.PP
Definition at line 318 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_GET_CRL   3"

.PP
Definition at line 319 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE   4"

.PP
Definition at line 320 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE   5"

.PP
Definition at line 321 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY   6"

.PP
Definition at line 322 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CERT_SIGNATURE_FAILURE   7"

.PP
Definition at line 323 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CRL_SIGNATURE_FAILURE   8"

.PP
Definition at line 324 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CERT_NOT_YET_VALID   9"

.PP
Definition at line 325 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CERT_HAS_EXPIRED   10"

.PP
Definition at line 326 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CRL_NOT_YET_VALID   11"

.PP
Definition at line 327 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CRL_HAS_EXPIRED   12"

.PP
Definition at line 328 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD   13"

.PP
Definition at line 329 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD   14"

.PP
Definition at line 330 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD   15"

.PP
Definition at line 331 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD   16"

.PP
Definition at line 332 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_OUT_OF_MEM   17"

.PP
Definition at line 333 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT   18"

.PP
Definition at line 334 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN   19"

.PP
Definition at line 335 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY   20"

.PP
Definition at line 336 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE   21"

.PP
Definition at line 337 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CERT_CHAIN_TOO_LONG   22"

.PP
Definition at line 338 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CERT_REVOKED   23"

.PP
Definition at line 339 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_INVALID_CA   24"

.PP
Definition at line 340 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_PATH_LENGTH_EXCEEDED   25"

.PP
Definition at line 341 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_INVALID_PURPOSE   26"

.PP
Definition at line 342 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CERT_UNTRUSTED   27"

.PP
Definition at line 343 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CERT_REJECTED   28"

.PP
Definition at line 344 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUBJECT_ISSUER_MISMATCH   29"

.PP
Definition at line 346 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_AKID_SKID_MISMATCH   30"

.PP
Definition at line 347 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH   31"

.PP
Definition at line 348 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_KEYUSAGE_NO_CERTSIGN   32"

.PP
Definition at line 349 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER   33"

.PP
Definition at line 351 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION   34"

.PP
Definition at line 352 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_KEYUSAGE_NO_CRL_SIGN   35"

.PP
Definition at line 353 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION   36"

.PP
Definition at line 354 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_INVALID_NON_CA   37"

.PP
Definition at line 355 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED   38"

.PP
Definition at line 356 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE   39"

.PP
Definition at line 357 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED   40"

.PP
Definition at line 358 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_INVALID_EXTENSION   41"

.PP
Definition at line 360 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_INVALID_POLICY_EXTENSION   42"

.PP
Definition at line 361 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_NO_EXPLICIT_POLICY   43"

.PP
Definition at line 362 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_DIFFERENT_CRL_SCOPE   44"

.PP
Definition at line 363 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE   45"

.PP
Definition at line 364 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNNESTED_RESOURCE   46"

.PP
Definition at line 366 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_PERMITTED_VIOLATION   47"

.PP
Definition at line 368 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_EXCLUDED_VIOLATION   48"

.PP
Definition at line 369 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUBTREE_MINMAX   49"

.PP
Definition at line 370 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_APPLICATION_VERIFICATION   50"

.PP
Definition at line 371 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE   51"

.PP
Definition at line 372 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX   52"

.PP
Definition at line 373 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_UNSUPPORTED_NAME_SYNTAX   53"

.PP
Definition at line 374 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_CRL_PATH_VALIDATION_ERROR   54"

.PP
Definition at line 375 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUITE_B_INVALID_VERSION   56"

.PP
Definition at line 378 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUITE_B_INVALID_ALGORITHM   57"

.PP
Definition at line 379 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUITE_B_INVALID_CURVE   58"

.PP
Definition at line 380 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM   59"

.PP
Definition at line 381 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED   60"

.PP
Definition at line 382 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256   61"

.PP
Definition at line 383 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_HOSTNAME_MISMATCH   62"

.PP
Definition at line 386 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_EMAIL_MISMATCH   63"

.PP
Definition at line 387 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_IP_ADDRESS_MISMATCH   64"

.PP
Definition at line 388 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_INVALID_CALL   65"

.PP
Definition at line 391 of file x509_vfy\&.h\&.
.SS "#define X509_V_ERR_STORE_LOOKUP   66"

.PP
Definition at line 393 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_CB_ISSUER_CHECK   0x1"

.PP
Definition at line 398 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_USE_CHECK_TIME   0x2"

.PP
Definition at line 400 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_CRL_CHECK   0x4"

.PP
Definition at line 402 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_CRL_CHECK_ALL   0x8"

.PP
Definition at line 404 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_IGNORE_CRITICAL   0x10"

.PP
Definition at line 406 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_X509_STRICT   0x20"

.PP
Definition at line 408 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_ALLOW_PROXY_CERTS   0x40"

.PP
Definition at line 410 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_POLICY_CHECK   0x80"

.PP
Definition at line 412 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_EXPLICIT_POLICY   0x100"

.PP
Definition at line 414 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_INHIBIT_ANY   0x200"

.PP
Definition at line 416 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_INHIBIT_MAP   0x400"

.PP
Definition at line 418 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_NOTIFY_POLICY   0x800"

.PP
Definition at line 420 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_EXTENDED_CRL_SUPPORT   0x1000"

.PP
Definition at line 422 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_USE_DELTAS   0x2000"

.PP
Definition at line 424 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_CHECK_SS_SIGNATURE   0x4000"

.PP
Definition at line 426 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_TRUSTED_FIRST   0x8000"

.PP
Definition at line 428 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_SUITEB_128_LOS_ONLY   0x10000"

.PP
Definition at line 430 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_SUITEB_192_LOS   0x20000"

.PP
Definition at line 432 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_SUITEB_128_LOS   0x30000"

.PP
Definition at line 434 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_PARTIAL_CHAIN   0x80000"

.PP
Definition at line 437 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_NO_ALT_CHAINS   0x100000"

.PP
Definition at line 443 of file x509_vfy\&.h\&.
.SS "#define X509_VP_FLAG_DEFAULT   0x1"

.PP
Definition at line 445 of file x509_vfy\&.h\&.
.SS "#define X509_VP_FLAG_OVERWRITE   0x2"

.PP
Definition at line 446 of file x509_vfy\&.h\&.
.SS "#define X509_VP_FLAG_RESET_FLAGS   0x4"

.PP
Definition at line 447 of file x509_vfy\&.h\&.
.SS "#define X509_VP_FLAG_LOCKED   0x8"

.PP
Definition at line 448 of file x509_vfy\&.h\&.
.SS "#define X509_VP_FLAG_ONCE   0x10"

.PP
Definition at line 449 of file x509_vfy\&.h\&.
.SS "#define X509_V_FLAG_POLICY_MASK"
\fBValue:\fP
.PP
.nf
(X509_V_FLAG_POLICY_CHECK \
                                | X509_V_FLAG_EXPLICIT_POLICY \
                                | X509_V_FLAG_INHIBIT_ANY \
                                | X509_V_FLAG_INHIBIT_MAP)
.fi
.PP
Definition at line 452 of file x509_vfy\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBx509_file_st\fP  \fBX509_CERT_FILE_CTX\fP"

.SS "typedef struct \fBx509_object_st\fP  \fBX509_OBJECT\fP"

.SS "typedef struct \fBx509_lookup_st\fP \fBX509_LOOKUP\fP"

.PP
Definition at line 134 of file x509_vfy\&.h\&.
.SS "typedef struct \fBx509_lookup_method_st\fP  \fBX509_LOOKUP_METHOD\fP"

.SS "typedef struct \fBX509_VERIFY_PARAM_ID_st\fP \fBX509_VERIFY_PARAM_ID\fP"

.PP
Definition at line 159 of file x509_vfy\&.h\&.
.SS "typedef struct \fBX509_VERIFY_PARAM_st\fP  \fBX509_VERIFY_PARAM\fP"

.SH "Function Documentation"
.PP 
.SS "int X509_STORE_set_depth (\fBX509_STORE\fP * store, int depth)"

.SS "\fBvoid\fP X509_STORE_CTX_set_depth (\fBX509_STORE_CTX\fP * ctx, int depth)"

.SS "int X509_OBJECT_idx_by_subject (\fBSTACK_OF\fP(\fBX509_OBJECT\fP)* h, int type, \fBX509_NAME\fP * name)"

.SS "\fBX509_OBJECT\fP* X509_OBJECT_retrieve_by_subject (\fBSTACK_OF\fP(\fBX509_OBJECT\fP)* h, int type, \fBX509_NAME\fP * name)"

.SS "\fBX509_OBJECT\fP* X509_OBJECT_retrieve_match (\fBSTACK_OF\fP(\fBX509_OBJECT\fP)* h, \fBX509_OBJECT\fP * x)"

.SS "\fBvoid\fP X509_OBJECT_up_ref_count (\fBX509_OBJECT\fP * a)"

.SS "\fBvoid\fP X509_OBJECT_free_contents (\fBX509_OBJECT\fP * a)"

.SS "\fBX509_STORE\fP* X509_STORE_new (\fBvoid\fP)"

.SS "\fBvoid\fP X509_STORE_free (\fBX509_STORE\fP * v)"

.SS "STACK_OF (\fBX509\fP)"

.SS "STACK_OF (\fBX509_CRL\fP)"

.SS "int X509_STORE_set_flags (\fBX509_STORE\fP * ctx, unsigned long flags)"

.SS "int X509_STORE_set_purpose (\fBX509_STORE\fP * ctx, int purpose)"

.SS "int X509_STORE_set_trust (\fBX509_STORE\fP * ctx, int trust)"

.SS "int X509_STORE_set1_param (\fBX509_STORE\fP * ctx, \fBX509_VERIFY_PARAM\fP * pm)"

.SS "\fBvoid\fP X509_STORE_set_verify_cb (\fBX509_STORE\fP * ctx, int(*)(int, \fBX509_STORE_CTX\fP *) verify_cb)"

.SS "\fBvoid\fP X509_STORE_set_lookup_crls_cb (\fBX509_STORE\fP * ctx, \fBSTACK_OF\fP(\fBX509_CRL\fP)*(*)(\fBX509_STORE_CTX\fctxfBX509_NAME\fP *\fBnm\fP) cb)"

.SS "\fBX509_STORE_CTX\fP* X509_STORE_CTX_new (\fBvoid\fP)"

.SS "int X509_STORE_CTX_get1_issuer (\fBX509\fP ** issuer, \fBX509_STORE_CTX\fP * ctx, \fBX509\fP * x)"

.SS "\fBvoid\fP X509_STORE_CTX_free (\fBX509_STORE_CTX\fP * ctx)"

.SS "int X509_STORE_CTX_init (\fBX509_STORE_CTX\fP * ctx, \fBX509_STORE\fP * store, \fBX509\fP * x509, \fBSTACK_OF\fP(\fBX509\fP)* chain)"

.SS "\fBvoid\fP X509_STORE_CTX_trusted_stack (\fBX509_STORE_CTX\fP * ctx, \fBSTACK_OF\fP(\fBX509\fP)* sk)"

.SS "\fBvoid\fP X509_STORE_CTX_cleanup (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBX509_STORE\fP* X509_STORE_CTX_get0_store (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBX509_LOOKUP\fP* X509_STORE_add_lookup (\fBX509_STORE\fP * v, \fBX509_LOOKUP_METHOD\fP * m)"

.SS "\fBX509_LOOKUP_METHOD\fP* X509_LOOKUP_hash_dir (\fBvoid\fP)"

.SS "\fBX509_LOOKUP_METHOD\fP* X509_LOOKUP_file (\fBvoid\fP)"

.SS "int X509_STORE_add_cert (\fBX509_STORE\fP * ctx, \fBX509\fP * x)"

.SS "int X509_STORE_add_crl (\fBX509_STORE\fP * ctx, \fBX509_CRL\fP * x)"

.SS "int X509_STORE_get_by_subject (\fBX509_STORE_CTX\fP * vs, int type, \fBX509_NAME\fP * name, \fBX509_OBJECT\fP * ret)"

.SS "int X509_LOOKUP_ctrl (\fBX509_LOOKUP\fP * ctx, int cmd, const char * argc, long argl, char ** ret)"

.SS "int X509_load_cert_file (\fBX509_LOOKUP\fP * ctx, const char * file, int type)"

.SS "int X509_load_crl_file (\fBX509_LOOKUP\fP * ctx, const char * file, int type)"

.SS "int X509_load_cert_crl_file (\fBX509_LOOKUP\fP * ctx, const char * file, int type)"

.SS "\fBX509_LOOKUP\fP* X509_LOOKUP_new (\fBX509_LOOKUP_METHOD\fP * method)"

.SS "\fBvoid\fP X509_LOOKUP_free (\fBX509_LOOKUP\fP * ctx)"

.SS "int X509_LOOKUP_init (\fBX509_LOOKUP\fP * ctx)"

.SS "int X509_LOOKUP_by_subject (\fBX509_LOOKUP\fP * ctx, int type, \fBX509_NAME\fP * name, \fBX509_OBJECT\fP * ret)"

.SS "int X509_LOOKUP_by_issuer_serial (\fBX509_LOOKUP\fP * ctx, int type, \fBX509_NAME\fP * name, \fBASN1_INTEGER\fP * serial, \fBX509_OBJECT\fP * ret)"

.SS "int X509_LOOKUP_by_fingerprint (\fBX509_LOOKUP\fP * ctx, int type, unsigned char * bytes, int len, \fBX509_OBJECT\fP * ret)"

.SS "int X509_LOOKUP_by_alias (\fBX509_LOOKUP\fP * ctx, int type, char * str, int len, \fBX509_OBJECT\fP * ret)"

.SS "int X509_LOOKUP_shutdown (\fBX509_LOOKUP\fP * ctx)"

.SS "int X509_STORE_load_locations (\fBX509_STORE\fP * ctx, const char * file, const char * dir)"

.SS "int X509_STORE_set_default_paths (\fBX509_STORE\fP * ctx)"

.SS "int X509_STORE_CTX_get_ex_new_index (long argl, \fBvoid\fP * argp, \fBCRYPTO_EX_new\fP * new_func, \fBCRYPTO_EX_dup\fP * dup_func, \fBCRYPTO_EX_free\fP * free_func)"

.SS "int X509_STORE_CTX_set_ex_data (\fBX509_STORE_CTX\fP * ctx, int idx, \fBvoid\fP * data)"

.SS "\fBvoid\fP* X509_STORE_CTX_get_ex_data (\fBX509_STORE_CTX\fP * ctx, int idx)"

.SS "int X509_STORE_CTX_get_error (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBvoid\fP X509_STORE_CTX_set_error (\fBX509_STORE_CTX\fP * ctx, int s)"

.SS "int X509_STORE_CTX_get_error_depth (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBX509\fP* X509_STORE_CTX_get_current_cert (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBX509\fP* X509_STORE_CTX_get0_current_issuer (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBX509_CRL\fP* X509_STORE_CTX_get0_current_crl (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBX509_STORE_CTX\fP* X509_STORE_CTX_get0_parent_ctx (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBvoid\fP X509_STORE_CTX_set_cert (\fBX509_STORE_CTX\fP * c, \fBX509\fP * x)"

.SS "\fBvoid\fP X509_STORE_CTX_set_chain (\fBX509_STORE_CTX\fP * c, \fBSTACK_OF\fP(\fBX509\fP)* sk)"

.SS "\fBvoid\fP X509_STORE_CTX_set0_crls (\fBX509_STORE_CTX\fP * c, \fBSTACK_OF\fP(\fBX509_CRL\fP)* sk)"

.SS "int X509_STORE_CTX_set_purpose (\fBX509_STORE_CTX\fP * ctx, int purpose)"

.SS "int X509_STORE_CTX_set_trust (\fBX509_STORE_CTX\fP * ctx, int trust)"

.SS "int X509_STORE_CTX_purpose_inherit (\fBX509_STORE_CTX\fP * ctx, int def_purpose, int purpose, int trust)"

.SS "\fBvoid\fP X509_STORE_CTX_set_flags (\fBX509_STORE_CTX\fP * ctx, unsigned long flags)"

.SS "\fBvoid\fP X509_STORE_CTX_set_time (\fBX509_STORE_CTX\fP * ctx, unsigned long flags, time_t t)"

.SS "\fBvoid\fP X509_STORE_CTX_set_verify_cb (\fBX509_STORE_CTX\fP * ctx, int(*)(int, \fBX509_STORE_CTX\fP *) verify_cb)"

.SS "\fBX509_POLICY_TREE\fP* X509_STORE_CTX_get0_policy_tree (\fBX509_STORE_CTX\fP * ctx)"

.SS "int X509_STORE_CTX_get_explicit_policy (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBX509_VERIFY_PARAM\fP* X509_STORE_CTX_get0_param (\fBX509_STORE_CTX\fP * ctx)"

.SS "\fBvoid\fP X509_STORE_CTX_set0_param (\fBX509_STORE_CTX\fP * ctx, \fBX509_VERIFY_PARAM\fP * param)"

.SS "int X509_STORE_CTX_set_default (\fBX509_STORE_CTX\fP * ctx, const char * name)"

.SS "\fBX509_VERIFY_PARAM\fP* X509_VERIFY_PARAM_new (\fBvoid\fP)"

.SS "\fBvoid\fP X509_VERIFY_PARAM_free (\fBX509_VERIFY_PARAM\fP * param)"

.SS "int X509_VERIFY_PARAM_inherit (\fBX509_VERIFY_PARAM\fP * to, const \fBX509_VERIFY_PARAM\fP * from)"

.SS "int X509_VERIFY_PARAM_set1 (\fBX509_VERIFY_PARAM\fP * to, const \fBX509_VERIFY_PARAM\fP * from)"

.SS "int X509_VERIFY_PARAM_set1_name (\fBX509_VERIFY_PARAM\fP * param, const char * name)"

.SS "int X509_VERIFY_PARAM_set_flags (\fBX509_VERIFY_PARAM\fP * param, unsigned long flags)"

.SS "int X509_VERIFY_PARAM_clear_flags (\fBX509_VERIFY_PARAM\fP * param, unsigned long flags)"

.SS "unsigned long X509_VERIFY_PARAM_get_flags (\fBX509_VERIFY_PARAM\fP * param)"

.SS "int X509_VERIFY_PARAM_set_purpose (\fBX509_VERIFY_PARAM\fP * param, int purpose)"

.SS "int X509_VERIFY_PARAM_set_trust (\fBX509_VERIFY_PARAM\fP * param, int trust)"

.SS "\fBvoid\fP X509_VERIFY_PARAM_set_depth (\fBX509_VERIFY_PARAM\fP * param, int depth)"

.SS "\fBvoid\fP X509_VERIFY_PARAM_set_time (\fBX509_VERIFY_PARAM\fP * param, time_t t)"

.SS "int X509_VERIFY_PARAM_add0_policy (\fBX509_VERIFY_PARAM\fP * param, \fBASN1_OBJECT\fP * policy)"

.SS "int X509_VERIFY_PARAM_set1_policies (\fBX509_VERIFY_PARAM\fP * param, \fBSTACK_OF\fP(\fBASN1_OBJECT\fP)* policies)"

.SS "int X509_VERIFY_PARAM_set1_host (\fBX509_VERIFY_PARAM\fP * param, const char * name, size_t namelen)"

.SS "int X509_VERIFY_PARAM_add1_host (\fBX509_VERIFY_PARAM\fP * param, const char * name, size_t namelen)"

.SS "\fBvoid\fP X509_VERIFY_PARAM_set_hostflags (\fBX509_VERIFY_PARAM\fP * param, unsigned int flags)"

.SS "char* X509_VERIFY_PARAM_get0_peername (\fBX509_VERIFY_PARAM\fP *)"

.SS "int X509_VERIFY_PARAM_set1_email (\fBX509_VERIFY_PARAM\fP * param, const char * email, size_t emaillen)"

.SS "int X509_VERIFY_PARAM_set1_ip (\fBX509_VERIFY_PARAM\fP * param, const unsigned char * ip, size_t iplen)"

.SS "int X509_VERIFY_PARAM_set1_ip_asc (\fBX509_VERIFY_PARAM\fP * param, const char * ipasc)"

.SS "int X509_VERIFY_PARAM_get_depth (const \fBX509_VERIFY_PARAM\fP * param)"

.SS "const char* X509_VERIFY_PARAM_get0_name (const \fBX509_VERIFY_PARAM\fP * param)"

.SS "int X509_VERIFY_PARAM_add0_table (\fBX509_VERIFY_PARAM\fP * param)"

.SS "int X509_VERIFY_PARAM_get_count (\fBvoid\fP)"

.SS "const \fBX509_VERIFY_PARAM\fP* X509_VERIFY_PARAM_get0 (int id)"

.SS "const \fBX509_VERIFY_PARAM\fP* X509_VERIFY_PARAM_lookup (const char * name)"

.SS "\fBvoid\fP X509_VERIFY_PARAM_table_cleanup (\fBvoid\fP)"

.SS "int X509_policy_check (\fBX509_POLICY_TREE\fP ** ptree, int * pexplicit_policy, \fBSTACK_OF\fP(\fBX509\fP)* certs, \fBSTACK_OF\fP(\fBASN1_OBJECT\fP)* policy_oids, unsigned int flags)"

.SS "\fBvoid\fP X509_policy_tree_free (\fBX509_POLICY_TREE\fP * tree)"

.SS "int X509_policy_tree_level_count (const \fBX509_POLICY_TREE\fP * tree)"

.SS "\fBX509_POLICY_LEVEL\fP* X509_policy_tree_get0_level (const \fBX509_POLICY_TREE\fP * tree, int i)"

.SS "STACK_OF (\fBX509_POLICY_NODE\fP) const"

.SS "int X509_policy_level_node_count (\fBX509_POLICY_LEVEL\fP * level)"

.SS "\fBX509_POLICY_NODE\fP* X509_policy_level_get0_node (\fBX509_POLICY_LEVEL\fP * level, int i)"

.SS "const \fBASN1_OBJECT\fP* X509_policy_node_get0_policy (const \fBX509_POLICY_NODE\fP * node)"

.SS "STACK_OF (\fBPOLICYQUALINFO\fP) const"

.SS "const \fBX509_POLICY_NODE\fP* X509_policy_node_get0_parent (const \fBX509_POLICY_NODE\fP * node)"

.SH "Variable Documentation"
.PP 
.SS "\fBX509_NAME\fP* nm"

.PP
Definition at line 468 of file x509_vfy\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-doxygen-full from the source code\&.
