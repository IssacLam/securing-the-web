.TH "ec_method_st" 3 "Thu Jun 30 2016" "s2n-openssl-doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ec_method_st \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ec_lcl\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBflags\fP"
.br
.ti -1c
.RI "int \fBfield_type\fP"
.br
.ti -1c
.RI "int(* \fBgroup_init\fP )(\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP(* \fBgroup_finish\fP )(\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP(* \fBgroup_clear_finish\fP )(\fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int(* \fBgroup_copy\fP )(\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int(* \fBgroup_set_curve\fP )(\fBEC_GROUP\fP *, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBgroup_get_curve\fP )(const \fBEC_GROUP\fP *, \fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBgroup_get_degree\fP )(const \fBEC_GROUP\fP *)"
.br
.ti -1c
.RI "int(* \fBgroup_check_discriminant\fP )(const \fBEC_GROUP\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_init\fP )(\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP(* \fBpoint_finish\fP )(\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP(* \fBpoint_clear_finish\fP )(\fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_copy\fP )(\fBEC_POINT\fP *, const \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_set_to_infinity\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_set_Jprojective_coordinates_GFp\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, const \fBBIGNUM\fP *z, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_get_Jprojective_coordinates_GFp\fP )(const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBIGNUM\fP *z, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_set_affine_coordinates\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_get_affine_coordinates\fP )(const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_set_compressed_coordinates\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, int y_bit, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "size_t(* \fBpoint2oct\fP )(const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP \fBform\fP, unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBoct2point\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBadd\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *\fBb\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBdbl\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBinvert\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBis_at_infinity\fP )(const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *)"
.br
.ti -1c
.RI "int(* \fBis_on_curve\fP )(const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBpoint_cmp\fP )(const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *\fBb\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBmake_affine\fP )(const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBpoints_make_affine\fP )(const \fBEC_GROUP\fP *, size_t \fBnum\fP, \fBEC_POINT\fP *[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBmul\fP )(const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBprecompute_mult\fP )(\fBEC_GROUP\fP *group, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBhave_precompute_mult\fP )(const \fBEC_GROUP\fP *group)"
.br
.ti -1c
.RI "int(* \fBfield_mul\fP )(const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBfield_sqr\fP )(const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBfield_div\fP )(const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBfield_encode\fP )(const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBfield_decode\fP )(const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"
.br
.ti -1c
.RI "int(* \fBfield_set_to_one\fP )(const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, \fBBN_CTX\fP *)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 92 of file ec_lcl\&.h\&.
.SH "Field Documentation"
.PP 
.SS "int(* add) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *\fBb\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 155 of file ec_lcl\&.h\&.
.SS "int(* dbl) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *r, const \fBEC_POINT\fP *\fBa\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 157 of file ec_lcl\&.h\&.
.SS "int(* field_decode) (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 196 of file ec_lcl\&.h\&.
.SS "int(* field_div) (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 190 of file ec_lcl\&.h\&.
.SS "int(* field_encode) (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 193 of file ec_lcl\&.h\&.
.SS "int(* field_mul) (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 187 of file ec_lcl\&.h\&.
.SS "int(* field_set_to_one) (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, \fBBN_CTX\fP *)"

.PP
Definition at line 198 of file ec_lcl\&.h\&.
.SS "int(* field_sqr) (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *r, const \fBBIGNUM\fP *\fBa\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 189 of file ec_lcl\&.h\&.
.SS "int field_type"

.PP
Definition at line 96 of file ec_lcl\&.h\&.
.SS "int flags"

.PP
Definition at line 94 of file ec_lcl\&.h\&.
.SS "int(* group_check_discriminant) (const \fBEC_GROUP\fP *, \fBBN_CTX\fP *)"

.PP
Definition at line 114 of file ec_lcl\&.h\&.
.SS "\fBvoid\fP(* group_clear_finish) (\fBEC_GROUP\fP *)"

.PP
Definition at line 103 of file ec_lcl\&.h\&.
.SS "int(* group_copy) (\fBEC_GROUP\fP *, const \fBEC_GROUP\fP *)"

.PP
Definition at line 104 of file ec_lcl\&.h\&.
.SS "\fBvoid\fP(* group_finish) (\fBEC_GROUP\fP *)"

.PP
Definition at line 102 of file ec_lcl\&.h\&.
.SS "int(* group_get_curve) (const \fBEC_GROUP\fP *, \fBBIGNUM\fP *\fBp\fP, \fBBIGNUM\fP *\fBa\fP, \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 109 of file ec_lcl\&.h\&.
.SS "int(* group_get_degree) (const \fBEC_GROUP\fP *)"

.PP
Definition at line 112 of file ec_lcl\&.h\&.
.SS "int(* group_init) (\fBEC_GROUP\fP *)"

.PP
Definition at line 101 of file ec_lcl\&.h\&.
.SS "int(* group_set_curve) (\fBEC_GROUP\fP *, const \fBBIGNUM\fP *\fBp\fP, const \fBBIGNUM\fP *\fBa\fP, const \fBBIGNUM\fP *\fBb\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 107 of file ec_lcl\&.h\&.
.SS "int(* have_precompute_mult) (const \fBEC_GROUP\fP *group)"

.PP
Definition at line 179 of file ec_lcl\&.h\&.
.SS "int(* invert) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.PP
Definition at line 158 of file ec_lcl\&.h\&.
.SS "int(* is_at_infinity) (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *)"

.PP
Definition at line 162 of file ec_lcl\&.h\&.
.SS "int(* is_on_curve) (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.PP
Definition at line 163 of file ec_lcl\&.h\&.
.SS "int(* make_affine) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, \fBBN_CTX\fP *)"

.PP
Definition at line 167 of file ec_lcl\&.h\&.
.SS "int(* mul) (const \fBEC_GROUP\fP *group, \fBEC_POINT\fP *r, const \fBBIGNUM\fP *scalar, size_t \fBnum\fP, const \fBEC_POINT\fP *points[], const \fBBIGNUM\fP *scalars[], \fBBN_CTX\fP *)"

.PP
Definition at line 175 of file ec_lcl\&.h\&.
.SS "int(* oct2point) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 152 of file ec_lcl\&.h\&.
.SS "size_t(* point2oct) (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBpoint_conversion_form_t\fP \fBform\fP, unsigned char *buf, size_t \fBlen\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 149 of file ec_lcl\&.h\&.
.SS "\fBvoid\fP(* point_clear_finish) (\fBEC_POINT\fP *)"

.PP
Definition at line 121 of file ec_lcl\&.h\&.
.SS "int(* point_cmp) (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *\fBa\fP, const \fBEC_POINT\fP *\fBb\fP, \fBBN_CTX\fP *)"

.PP
Definition at line 164 of file ec_lcl\&.h\&.
.SS "int(* point_copy) (\fBEC_POINT\fP *, const \fBEC_POINT\fP *)"

.PP
Definition at line 122 of file ec_lcl\&.h\&.
.SS "\fBvoid\fP(* point_finish) (\fBEC_POINT\fP *)"

.PP
Definition at line 120 of file ec_lcl\&.h\&.
.SS "int(* point_get_affine_coordinates) (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"

.PP
Definition at line 143 of file ec_lcl\&.h\&.
.SS "int(* point_get_Jprojective_coordinates_GFp) (const \fBEC_GROUP\fP *, const \fBEC_POINT\fP *, \fBBIGNUM\fP *\fBx\fP, \fBBIGNUM\fP *y, \fBBIGNUM\fP *z, \fBBN_CTX\fP *)"

.PP
Definition at line 136 of file ec_lcl\&.h\&.
.SS "int(* point_init) (\fBEC_POINT\fP *)"

.PP
Definition at line 119 of file ec_lcl\&.h\&.
.SS "int(* point_set_affine_coordinates) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, \fBBN_CTX\fP *)"

.PP
Definition at line 140 of file ec_lcl\&.h\&.
.SS "int(* point_set_compressed_coordinates) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, int y_bit, \fBBN_CTX\fP *)"

.PP
Definition at line 145 of file ec_lcl\&.h\&.
.SS "int(* point_set_Jprojective_coordinates_GFp) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *, const \fBBIGNUM\fP *\fBx\fP, const \fBBIGNUM\fP *y, const \fBBIGNUM\fP *z, \fBBN_CTX\fP *)"

.PP
Definition at line 132 of file ec_lcl\&.h\&.
.SS "int(* point_set_to_infinity) (const \fBEC_GROUP\fP *, \fBEC_POINT\fP *)"

.PP
Definition at line 131 of file ec_lcl\&.h\&.
.SS "int(* points_make_affine) (const \fBEC_GROUP\fP *, size_t \fBnum\fP, \fBEC_POINT\fP *[], \fBBN_CTX\fP *)"

.PP
Definition at line 168 of file ec_lcl\&.h\&.
.SS "int(* precompute_mult) (\fBEC_GROUP\fP *group, \fBBN_CTX\fP *)"

.PP
Definition at line 178 of file ec_lcl\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-openssl-doxygen from the source code\&.
