.TH "s2n/libcrypto-build/openssl/crypto/x509v3/pcy_int.h" 3 "Thu Jun 30 2016" "s2n-openssl-doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
s2n/libcrypto-build/openssl/crypto/x509v3/pcy_int.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBX509_POLICY_DATA_st\fP"
.br
.ti -1c
.RI "struct \fBX509_POLICY_CACHE_st\fP"
.br
.ti -1c
.RI "struct \fBX509_POLICY_NODE_st\fP"
.br
.ti -1c
.RI "struct \fBX509_POLICY_LEVEL_st\fP"
.br
.ti -1c
.RI "struct \fBX509_POLICY_TREE_st\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBPOLICY_DATA_FLAG_MAPPED\fP   0x1"
.br
.ti -1c
.RI "#define \fBPOLICY_DATA_FLAG_MAPPED_ANY\fP   0x2"
.br
.ti -1c
.RI "#define \fBPOLICY_DATA_FLAG_MAP_MASK\fP   0x3"
.br
.ti -1c
.RI "#define \fBPOLICY_DATA_FLAG_SHARED_QUALIFIERS\fP   0x4"
.br
.ti -1c
.RI "#define \fBPOLICY_DATA_FLAG_EXTRA_NODE\fP   0x8"
.br
.ti -1c
.RI "#define \fBPOLICY_DATA_FLAG_CRITICAL\fP   0x10"
.br
.ti -1c
.RI "#define \fBPOLICY_FLAG_ANY_POLICY\fP   0x2"
.br
.ti -1c
.RI "#define \fBnode_data_critical\fP(\fBdata\fP)   (\fBdata\fP\->\fBflags\fP & \fBPOLICY_DATA_FLAG_CRITICAL\fP)"
.br
.ti -1c
.RI "#define \fBnode_critical\fP(node)   \fBnode_data_critical\fP(node\->\fBdata\fP)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBX509_POLICY_DATA_st\fP \fBX509_POLICY_DATA\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBX509_POLICY_DATA\fP * \fBpolicy_data_new\fP (\fBPOLICYINFO\fP *policy, const \fBASN1_OBJECT\fP *id, int crit)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpolicy_data_free\fP (\fBX509_POLICY_DATA\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBX509_POLICY_DATA\fP * \fBpolicy_cache_find_data\fP (const \fBX509_POLICY_CACHE\fP *cache, const \fBASN1_OBJECT\fP *id)"
.br
.ti -1c
.RI "int \fBpolicy_cache_set_mapping\fP (\fBX509\fP *\fBx\fP, POLICY_MAPPINGS *maps)"
.br
.ti -1c
.RI "\fBSTACK_OF\fP (\fBX509_POLICY_NODE\fP)*policy_node_cmp_new(\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpolicy_cache_init\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpolicy_cache_free\fP (\fBX509_POLICY_CACHE\fP *cache)"
.br
.ti -1c
.RI "\fBX509_POLICY_NODE\fP * \fBlevel_find_node\fP (const \fBX509_POLICY_LEVEL\fP *level, const \fBX509_POLICY_NODE\fP *parent, const \fBASN1_OBJECT\fP *id)"
.br
.ti -1c
.RI "\fBX509_POLICY_NODE\fP * \fBtree_find_sk\fP (\fBSTACK_OF\fP(\fBX509_POLICY_NODE\fP)*sk, const \fBASN1_OBJECT\fP *id)"
.br
.ti -1c
.RI "\fBX509_POLICY_NODE\fP * \fBlevel_add_node\fP (\fBX509_POLICY_LEVEL\fP *level, const \fBX509_POLICY_DATA\fP *\fBdata\fP, \fBX509_POLICY_NODE\fP *parent, \fBX509_POLICY_TREE\fP *tree)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpolicy_node_free\fP (\fBX509_POLICY_NODE\fP *node)"
.br
.ti -1c
.RI "int \fBpolicy_node_match\fP (const \fBX509_POLICY_LEVEL\fP *lvl, const \fBX509_POLICY_NODE\fP *node, const \fBASN1_OBJECT\fP *oid)"
.br
.ti -1c
.RI "const \fBX509_POLICY_CACHE\fP * \fBpolicy_cache_set\fP (\fBX509\fP *\fBx\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define node_critical(node)   \fBnode_data_critical\fP(node\->\fBdata\fP)"

.PP
Definition at line 184 of file pcy_int\&.h\&.
.SS "#define node_data_critical(\fBdata\fP)   (\fBdata\fP\->\fBflags\fP & \fBPOLICY_DATA_FLAG_CRITICAL\fP)"

.PP
Definition at line 183 of file pcy_int\&.h\&.
.SS "#define POLICY_DATA_FLAG_CRITICAL   0x10"

.PP
Definition at line 111 of file pcy_int\&.h\&.
.SS "#define POLICY_DATA_FLAG_EXTRA_NODE   0x8"

.PP
Definition at line 107 of file pcy_int\&.h\&.
.SS "#define POLICY_DATA_FLAG_MAP_MASK   0x3"

.PP
Definition at line 99 of file pcy_int\&.h\&.
.SS "#define POLICY_DATA_FLAG_MAPPED   0x1"

.PP
Definition at line 88 of file pcy_int\&.h\&.
.SS "#define POLICY_DATA_FLAG_MAPPED_ANY   0x2"

.PP
Definition at line 95 of file pcy_int\&.h\&.
.SS "#define POLICY_DATA_FLAG_SHARED_QUALIFIERS   0x4"

.PP
Definition at line 103 of file pcy_int\&.h\&.
.SS "#define POLICY_FLAG_ANY_POLICY   0x2"

.PP
Definition at line 179 of file pcy_int\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBX509_POLICY_DATA_st\fP \fBX509_POLICY_DATA\fP"

.PP
Definition at line 60 of file pcy_int\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBX509_POLICY_NODE\fP* level_add_node (\fBX509_POLICY_LEVEL\fP * level, const \fBX509_POLICY_DATA\fP * data, \fBX509_POLICY_NODE\fP * parent, \fBX509_POLICY_TREE\fP * tree)"

.PP
Definition at line 111 of file pcy_node\&.c\&.
.SS "\fBX509_POLICY_NODE\fP* level_find_node (const \fBX509_POLICY_LEVEL\fP * level, const \fBX509_POLICY_NODE\fP * parent, const \fBASN1_OBJECT\fP * id)"

.PP
Definition at line 95 of file pcy_node\&.c\&.
.SS "\fBX509_POLICY_DATA\fP* policy_cache_find_data (const \fBX509_POLICY_CACHE\fP * cache, const \fBASN1_OBJECT\fP * id)"

.PP
Definition at line 243 of file pcy_cache\&.c\&.
.SS "\fBvoid\fP policy_cache_free (\fBX509_POLICY_CACHE\fP * cache)"

.PP
Definition at line 219 of file pcy_cache\&.c\&.
.SS "\fBvoid\fP policy_cache_init (\fBvoid\fP)"

.SS "const \fBX509_POLICY_CACHE\fP* policy_cache_set (\fBX509\fP * x)"

.PP
Definition at line 230 of file pcy_cache\&.c\&.
.SS "int policy_cache_set_mapping (\fBX509\fP * x, POLICY_MAPPINGS * maps)"

.PP
Definition at line 71 of file pcy_map\&.c\&.
.SS "\fBvoid\fP policy_data_free (\fBX509_POLICY_DATA\fP * data)"

.PP
Definition at line 68 of file pcy_data\&.c\&.
.SS "\fBX509_POLICY_DATA\fP* policy_data_new (\fBPOLICYINFO\fP * policy, const \fBASN1_OBJECT\fP * id, int crit)"

.PP
Definition at line 86 of file pcy_data\&.c\&.
.SS "\fBvoid\fP policy_node_free (\fBX509_POLICY_NODE\fP * node)"

.PP
Definition at line 159 of file pcy_node\&.c\&.
.SS "int policy_node_match (const \fBX509_POLICY_LEVEL\fP * lvl, const \fBX509_POLICY_NODE\fP * node, const \fBASN1_OBJECT\fP * oid)"

.PP
Definition at line 169 of file pcy_node\&.c\&.
.SS "STACK_OF (\fBX509_POLICY_NODE\fP)"

.PP
Definition at line 85 of file pcy_lib\&.c\&.
.SS "\fBX509_POLICY_NODE\fP* tree_find_sk (\fBSTACK_OF\fP(\fBX509_POLICY_NODE\fP)* sk, const \fBASN1_OBJECT\fP * id)"

.PP
Definition at line 77 of file pcy_node\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for s2n-openssl-doxygen from the source code\&.
